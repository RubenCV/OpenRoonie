
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '643FED03C7A1ABC68DB40E9346C34583'
    
_lr_action_items = {'VOID':([6,18,32,68,],[10,10,10,10,]),'$end':([1,29,60,],[0,-1,-6,]),'BOOL':([6,18,32,68,],[12,12,12,12,]),'IF':([7,25,30,33,39,42,44,47,48,49,50,58,60,65,108,165,173,174,179,180,181,182,188,189,],[-72,-104,46,-71,-59,-60,-57,-58,-72,-56,46,-61,-6,46,-19,-12,-104,-104,-9,-10,-4,-8,-20,-7,]),'LSQBRACKET':([35,72,134,],[56,106,158,]),'WHILE':([7,25,30,33,39,42,44,47,48,49,50,58,60,65,108,165,173,174,179,180,181,182,188,189,],[-72,-104,40,-71,-59,-60,-57,-58,-72,-56,40,-61,-6,40,-19,-12,-104,-104,-9,-10,-4,-8,-20,-7,]),'PROGRAM':([0,],[2,]),'CTEINT':([55,57,59,61,62,74,84,110,111,112,113,114,115,116,119,120,121,124,125,126,129,132,133,137,140,142,147,158,176,],[81,81,81,81,81,-25,81,-48,-50,81,-52,-53,-49,-51,-39,-38,81,-43,81,-44,81,-34,-33,81,-18,81,81,81,81,]),'PLUS':([70,71,72,75,76,78,79,81,82,83,85,86,87,88,89,90,91,97,105,107,123,127,138,151,154,155,156,],[-23,-101,-104,-24,-93,-100,-96,-98,-104,-97,-22,-103,-99,-95,-94,133,-102,-96,-27,-29,-42,-46,-62,-28,-45,-21,-26,]),'COMMA':([20,32,53,54,64,68,70,71,72,75,76,77,78,79,80,81,82,83,85,86,87,88,89,90,91,93,97,98,103,105,107,109,117,118,122,123,127,130,131,138,151,152,153,154,155,156,157,161,171,184,],[27,-104,-84,68,-83,-104,-23,-101,-104,-24,-93,-104,-100,-96,-104,-98,-104,-97,-22,-103,-99,-95,-94,-104,-102,137,140,140,68,-27,-29,-47,-55,-41,-37,-42,-46,-32,-30,-62,-28,-54,-40,-45,-21,-26,-31,137,176,176,]),'PRINT':([7,25,30,33,39,42,44,47,48,49,50,58,60,65,108,165,173,174,179,180,181,182,188,189,],[-72,-104,45,-71,-59,-60,-57,-58,-72,-56,45,-61,-6,45,-19,-12,-104,-104,-9,-10,-4,-8,-20,-7,]),'LESSTHANEQUAL':([70,71,72,75,76,77,78,79,81,82,83,85,86,87,88,89,90,91,97,105,107,123,127,130,131,138,151,154,155,156,157,],[-23,-101,-104,-24,-93,114,-100,-96,-98,-104,-97,-22,-103,-99,-95,-94,-104,-102,-96,-27,-29,-42,-46,-32,-30,-62,-28,-45,-21,-26,-31,]),'LESSTHAN':([70,71,72,75,76,77,78,79,81,82,83,85,86,87,88,89,90,91,97,105,107,123,127,130,131,138,151,154,155,156,157,],[-23,-101,-104,-24,-93,115,-100,-96,-98,-104,-97,-22,-103,-99,-95,-94,-104,-102,-96,-27,-29,-42,-46,-32,-30,-62,-28,-45,-21,-26,-31,]),'ISEQUALTO':([70,71,72,75,76,77,78,79,81,82,83,85,86,87,88,89,90,91,97,105,107,123,127,130,131,138,151,154,155,156,157,],[-23,-101,-104,-24,-93,116,-100,-96,-98,-104,-97,-22,-103,-99,-95,-94,-104,-102,-96,-27,-29,-42,-46,-32,-30,-62,-28,-45,-21,-26,-31,]),'NOTEQUAL':([70,71,72,75,76,77,78,79,81,82,83,85,86,87,88,89,90,91,97,105,107,123,127,130,131,138,151,154,155,156,157,],[-23,-101,-104,-24,-93,111,-100,-96,-98,-104,-97,-22,-103,-99,-95,-94,-104,-102,-96,-27,-29,-42,-46,-32,-30,-62,-28,-45,-21,-26,-31,]),'TRUE':([55,57,59,61,62,74,84,110,111,112,113,114,115,116,119,120,121,124,125,126,129,132,133,137,140,142,147,158,176,],[91,91,91,91,91,-25,91,-48,-50,91,-52,-53,-49,-51,-39,-38,91,-43,91,-44,91,-34,-33,91,-18,91,91,91,91,]),'DIVIDE':([70,71,72,75,76,78,79,81,82,83,85,86,87,88,89,91,97,105,107,138,151,155,156,],[-23,-101,-104,-24,-93,-100,-96,-98,126,-97,-22,-103,-99,-95,-94,-102,-96,-27,-29,-62,-28,-21,-26,]),'LBRACKET':([21,22,52,104,139,146,162,163,166,179,183,186,],[-3,30,65,65,-104,-104,-5,30,30,-9,-104,30,]),'CTESTRING':([55,57,59,61,62,74,84,110,111,112,113,114,115,116,119,120,121,124,125,126,129,132,133,137,140,142,147,158,176,],[71,71,71,71,71,-25,71,-48,-50,71,-52,-53,-49,-51,-39,-38,71,-43,71,-44,71,-34,-33,71,-18,71,71,71,71,]),'ID':([2,3,7,9,10,11,12,13,14,15,23,25,27,30,33,39,42,44,47,48,49,50,51,55,57,58,59,60,61,62,65,74,84,108,110,111,112,113,114,115,116,119,120,121,124,125,126,129,132,133,137,140,142,147,158,165,173,174,176,179,180,181,182,188,189,],[-2,4,-72,20,-92,-89,-90,-87,-88,-91,31,-104,20,35,-71,-59,-60,-57,-58,-72,-56,35,64,72,72,-61,72,-6,72,72,35,-25,72,-19,-48,-50,72,-52,-53,-49,-51,-39,-38,72,-43,72,-44,72,-34,-33,72,-18,72,72,72,-12,-104,-104,72,-9,-10,-4,-8,-20,-7,]),'FUNCTION':([5,7,8,25,33,66,150,169,],[-104,-72,18,-104,-71,18,18,-79,]),'LPAREN':([24,31,35,36,38,40,43,45,46,55,57,59,61,62,72,74,84,110,111,112,113,114,115,116,119,120,121,124,125,126,129,132,133,137,140,142,147,158,176,],[32,-82,-63,57,59,-11,61,-13,62,74,74,74,74,74,-63,-25,74,-48,-50,74,-52,-53,-49,-51,-39,-38,74,-43,74,-44,74,-34,-33,74,-18,74,74,74,74,]),'AND':([70,71,72,75,76,77,78,79,80,81,82,83,85,86,87,88,89,90,91,97,105,107,109,117,123,127,130,131,138,151,152,154,155,156,157,],[-23,-101,-104,-24,-93,-104,-100,-96,120,-98,-104,-97,-22,-103,-99,-95,-94,-104,-102,-96,-27,-29,-47,-55,-42,-46,-32,-30,-62,-28,-54,-45,-21,-26,-31,]),'CTECHAR':([55,57,59,61,62,74,84,110,111,112,113,114,115,116,119,120,121,124,125,126,129,132,133,137,140,142,147,158,176,],[78,78,78,78,78,-25,78,-48,-50,78,-52,-53,-49,-51,-39,-38,78,-43,78,-44,78,-34,-33,78,-18,78,78,78,78,]),'RSQBRACKET':([56,70,71,72,75,76,77,78,79,80,81,82,83,85,86,87,88,89,90,91,105,106,107,109,117,118,122,123,127,130,131,138,151,152,153,154,155,156,157,171,177,178,184,187,],[92,-23,-101,-104,-24,-93,-104,-100,-96,-104,-98,-104,-97,-22,-103,-99,-95,-94,-104,-102,-27,151,-29,-47,-55,-41,-37,-42,-46,-32,-30,-62,-28,-54,-40,-45,-21,-26,-31,-104,185,-36,-104,-35,]),'MORETHANEQUAL':([70,71,72,75,76,77,78,79,81,82,83,85,86,87,88,89,90,91,97,105,107,123,127,130,131,138,151,154,155,156,157,],[-23,-101,-104,-24,-93,113,-100,-96,-98,-104,-97,-22,-103,-99,-95,-94,-104,-102,-96,-27,-29,-42,-46,-32,-30,-62,-28,-45,-21,-26,-31,]),'TIMES':([70,71,72,75,76,78,79,81,82,83,85,86,87,88,89,91,97,105,107,138,151,155,156,],[-23,-101,-104,-24,-93,-100,-96,-98,124,-97,-22,-103,-99,-95,-94,-102,-96,-27,-29,-62,-28,-21,-26,]),'VAR':([5,7,25,30,33,39,42,44,47,48,49,50,58,60,65,108,165,173,174,179,180,181,182,188,189,],[6,-72,6,6,-71,-59,-60,-57,-58,-72,-56,6,-61,-6,6,-19,-12,-104,-104,-9,-10,-4,-8,-20,-7,]),'SEMICOLON':([4,19,20,26,28,34,37,70,71,72,73,75,76,77,78,79,80,81,82,83,85,86,87,88,89,90,91,105,107,109,117,118,122,123,127,130,131,138,145,147,151,152,153,154,155,156,157,167,185,],[5,25,-104,-75,-73,-74,58,-23,-101,-104,108,-24,-93,-104,-100,-96,-104,-98,-104,-97,-22,-103,-99,-95,-94,-104,-102,-27,-29,-47,-55,-41,-37,-42,-46,-32,-30,-62,165,168,-28,-54,-40,-45,-21,-26,-31,175,188,]),'MAIN':([5,7,8,16,17,25,33,66,102,150,169,170,],[-104,-72,-104,21,-78,-104,-71,-104,-77,-104,-79,-76,]),'RPAREN':([32,53,54,57,64,67,68,69,70,71,72,75,76,77,78,79,80,81,82,83,85,86,87,88,89,90,91,93,94,95,96,97,98,99,100,103,105,107,109,117,118,122,123,127,128,130,131,135,136,138,141,143,144,149,151,152,153,154,155,156,157,159,160,161,164,172,],[52,-84,-104,-104,-83,-86,-104,104,-23,-101,-104,-24,-93,-104,-100,-96,-104,-98,-104,-97,-22,-103,-99,-95,-94,-104,-102,-104,138,-65,139,-96,-104,145,146,-104,-27,-29,-47,-55,-41,-37,-42,-46,156,-32,-30,-104,-67,-62,-15,-17,-14,-85,-28,-54,-40,-45,-21,-26,-31,-64,-68,-104,-16,-66,]),'STRING':([6,18,32,68,],[15,15,15,15,]),'RETURN':([7,25,33,39,42,44,47,48,49,50,58,60,63,65,101,108,165,173,174,179,180,181,182,188,189,],[-72,-104,-71,-59,-60,-57,-58,-70,-56,-104,-61,-6,-69,-104,147,-19,-12,-104,-104,-9,-10,-4,-8,-20,-7,]),'RBRACKET':([7,25,30,33,39,41,42,44,47,48,49,50,58,60,63,108,148,165,168,173,174,175,179,180,181,182,188,189,],[-72,-104,-104,-71,-59,60,-60,-57,-58,-70,-56,-104,-61,-6,-69,-19,169,-12,-81,-104,-104,-80,-9,-10,-4,-8,-20,-7,]),'CHAR':([6,18,32,68,],[11,11,11,11,]),'MINUS':([70,71,72,75,76,78,79,81,82,83,85,86,87,88,89,90,91,97,105,107,123,127,138,151,154,155,156,],[-23,-101,-104,-24,-93,-100,-96,-98,-104,-97,-22,-103,-99,-95,-94,132,-102,-96,-27,-29,-42,-46,-62,-28,-45,-21,-26,]),'FALSE':([55,57,59,61,62,74,84,110,111,112,113,114,115,116,119,120,121,124,125,126,129,132,133,137,140,142,147,158,176,],[86,86,86,86,86,-25,86,-48,-50,86,-52,-53,-49,-51,-39,-38,86,-43,86,-44,86,-34,-33,86,-18,86,86,86,86,]),'INT':([6,18,32,68,],[13,13,13,13,]),'EQUALS':([35,92,],[55,134,]),'MORETHAN':([70,71,72,75,76,77,78,79,81,82,83,85,86,87,88,89,90,91,97,105,107,123,127,130,131,138,151,154,155,156,157,],[-23,-101,-104,-24,-93,110,-100,-96,-98,-104,-97,-22,-103,-99,-95,-94,-104,-102,-96,-27,-29,-42,-46,-32,-30,-62,-28,-45,-21,-26,-31,]),'ELSE':([60,174,],[-6,183,]),'FLOAT':([6,18,32,68,],[14,14,14,14,]),'CTEFLOAT':([55,57,59,61,62,74,84,110,111,112,113,114,115,116,119,120,121,124,125,126,129,132,133,137,140,142,147,158,176,],[87,87,87,87,87,-25,87,-48,-50,87,-52,-53,-49,-51,-39,-38,87,-43,87,-44,87,-34,-33,87,-18,87,87,87,87,]),'OR':([70,71,72,75,76,77,78,79,80,81,82,83,85,86,87,88,89,90,91,97,105,107,109,117,123,127,130,131,138,151,152,154,155,156,157,],[-23,-101,-104,-24,-93,-104,-100,-96,119,-98,-104,-97,-22,-103,-99,-95,-94,-104,-102,-96,-27,-29,-47,-55,-42,-46,-32,-30,-62,-28,-54,-45,-21,-26,-31,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'addQTD':([82,],[125,]),'addQPPM':([90,],[129,]),'funcaux':([18,],[24,]),'ctestring':([55,57,59,61,62,84,112,121,125,129,137,142,147,158,176,],[79,79,79,97,79,79,79,79,79,79,79,97,79,79,79,]),'expresion':([55,57,59,61,62,84,121,137,142,158,176,],[73,93,96,98,100,128,153,161,98,171,184,]),'llamafunc':([30,50,55,57,59,61,62,65,84,112,121,125,129,137,142,147,158,176,],[37,37,75,75,75,75,75,37,75,75,75,75,75,75,75,75,75,75,]),'cteint':([55,57,59,61,62,84,112,121,125,129,137,142,147,158,176,],[76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,]),'addQPP':([97,98,],[142,142,]),'programa':([0,],[1,]),'bloque':([22,163,166,186,],[29,173,174,189,]),'rightparen':([128,],[155,]),'bloquefunc':([52,104,],[66,150,]),'escritura':([30,50,65,],[39,39,39,]),'listafuncargs':([93,161,],[135,172,]),'masexpresion':([80,],[122,]),'addQPComp':([77,],[112,]),'listaid':([9,27,],[19,34,]),'tipo':([6,18,32,68,],[9,23,51,51,]),'factor':([55,57,59,61,62,84,112,121,125,129,137,142,147,158,176,],[82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,]),'ctebool':([55,57,59,61,62,84,112,121,125,129,137,142,147,158,176,],[83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,]),'leftparen':([55,57,59,61,62,84,112,121,125,129,137,142,147,158,176,],[84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,]),'varcte':([55,57,59,61,62,84,112,121,125,129,137,142,147,158,176,],[85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,]),'exp':([55,57,59,61,62,84,112,121,129,137,142,147,158,176,],[77,77,77,77,77,77,77,77,157,77,77,167,77,77,]),'ctechar':([55,57,59,61,62,84,112,121,125,129,137,142,147,158,176,],[88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,]),'expcompcontinuo':([77,],[109,]),'ctefloat':([55,57,59,61,62,84,112,121,125,129,137,142,147,158,176,],[89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,]),'ciclo':([30,50,65,],[47,47,47,]),'asignacion':([30,50,65,],[49,49,49,]),'args':([32,68,],[54,103,]),'goto':([173,183,],[180,186,]),'prog':([0,],[3,]),'comaexpresion':([171,184,],[177,187,]),'empty':([5,8,20,25,30,32,50,54,57,65,66,68,72,77,80,82,90,93,97,98,103,135,139,146,150,161,171,173,174,183,184,],[7,17,26,7,48,53,48,67,95,48,17,53,107,117,118,127,130,136,143,143,67,160,162,162,17,136,178,179,182,179,178,]),'varid':([55,57,59,61,62,84,112,121,125,129,137,142,147,158,176,],[70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'masterminos':([82,],[123,]),'funcs':([8,66,150,],[16,102,170,]),'print':([30,50,65,],[43,43,43,]),'while':([30,50,65,],[38,38,38,]),'idfunc':([30,50,55,57,59,61,62,65,84,112,121,125,129,137,142,147,158,176,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'masid':([20,],[28,]),'masexp':([90,],[131,]),'listaprint':([61,142,],[99,164,]),'arr':([72,],[105,]),'checarparams':([135,],[159,]),'masestatuto':([30,50,65,],[41,63,101,]),'main':([16,],[22,]),'vars':([5,25,30,50,65,],[8,33,42,42,42,]),'expcomp':([55,57,59,61,62,84,112,121,137,142,158,176,],[80,80,80,80,80,80,152,80,80,80,80,80,]),'condicion':([30,50,65,],[44,44,44,]),'masbloque':([174,],[181,]),'masprint':([97,98,],[141,144,]),'addQPAO':([80,],[121,]),'funcargs':([57,],[94,]),'retorno':([101,],[148,]),'gotoF':([139,146,],[163,166,]),'estatuto':([30,50,65,],[50,50,50,]),'termino':([55,57,59,61,62,84,112,121,125,129,137,142,147,158,176,],[90,90,90,90,90,90,90,90,154,90,90,90,90,90,90,]),'masargs':([54,103,],[69,149,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programa","S'",1,None,None,None),
  ('programa -> prog ID SEMICOLON vars funcs main bloque','programa',7,'p_programa','OpenRoonie.py',169),
  ('prog -> PROGRAM','prog',1,'p_prog','OpenRoonie.py',172),
  ('main -> MAIN','main',1,'p_main','OpenRoonie.py',187),
  ('condicion -> IF LPAREN expresion RPAREN gotoF bloque masbloque','condicion',7,'p_condicion','OpenRoonie.py',195),
  ('gotoF -> empty','gotoF',1,'p_gotoF','OpenRoonie.py',199),
  ('bloque -> LBRACKET masestatuto RBRACKET','bloque',3,'p_bloque','OpenRoonie.py',206),
  ('masbloque -> ELSE goto bloque','masbloque',3,'p_masbloque','OpenRoonie.py',209),
  ('masbloque -> empty','masbloque',1,'p_masbloque','OpenRoonie.py',210),
  ('goto -> empty','goto',1,'p_goto','OpenRoonie.py',212),
  ('ciclo -> while LPAREN expresion RPAREN gotoF bloque goto','ciclo',7,'p_ciclo','OpenRoonie.py',219),
  ('while -> WHILE','while',1,'p_while','OpenRoonie.py',224),
  ('escritura -> print LPAREN listaprint RPAREN SEMICOLON','escritura',5,'p_escritura','OpenRoonie.py',228),
  ('print -> PRINT','print',1,'p_print','OpenRoonie.py',231),
  ('listaprint -> expresion masprint','listaprint',2,'p_listaprint','OpenRoonie.py',235),
  ('listaprint -> ctestring masprint','listaprint',2,'p_listaprint','OpenRoonie.py',236),
  ('masprint -> addQPP listaprint','masprint',2,'p_masprint','OpenRoonie.py',240),
  ('masprint -> empty','masprint',1,'p_masprint','OpenRoonie.py',241),
  ('addQPP -> COMMA','addQPP',1,'p_addQPP','OpenRoonie.py',244),
  ('asignacion -> ID EQUALS expresion SEMICOLON','asignacion',4,'p_asignacion','OpenRoonie.py',249),
  ('asignacion -> ID LSQBRACKET RSQBRACKET EQUALS LSQBRACKET expresion comaexpresion RSQBRACKET SEMICOLON','asignacion',9,'p_asignacion','OpenRoonie.py',250),
  ('factor -> leftparen expresion rightparen','factor',3,'p_factor','OpenRoonie.py',256),
  ('factor -> varcte','factor',1,'p_factor','OpenRoonie.py',257),
  ('factor -> varid','factor',1,'p_factor','OpenRoonie.py',258),
  ('factor -> llamafunc','factor',1,'p_factor','OpenRoonie.py',259),
  ('leftparen -> LPAREN','leftparen',1,'p_leftparen','OpenRoonie.py',262),
  ('rightparen -> RPAREN','rightparen',1,'p_rightparen','OpenRoonie.py',266),
  ('varid -> ID arr','varid',2,'p_varid','OpenRoonie.py',270),
  ('arr -> LSQBRACKET RSQBRACKET','arr',2,'p_arr','OpenRoonie.py',274),
  ('arr -> empty','arr',1,'p_arr','OpenRoonie.py',275),
  ('exp -> termino masexp','exp',2,'p_exp','OpenRoonie.py',278),
  ('masexp -> addQPPM exp','masexp',2,'p_masexp','OpenRoonie.py',281),
  ('masexp -> empty','masexp',1,'p_masexp','OpenRoonie.py',282),
  ('addQPPM -> PLUS','addQPPM',1,'p_addQPPM','OpenRoonie.py',286),
  ('addQPPM -> MINUS','addQPPM',1,'p_addQPPM','OpenRoonie.py',287),
  ('comaexpresion -> COMMA expresion comaexpresion','comaexpresion',3,'p_comaexpresion','OpenRoonie.py',292),
  ('comaexpresion -> empty','comaexpresion',1,'p_comaexpresion','OpenRoonie.py',293),
  ('expresion -> expcomp masexpresion','expresion',2,'p_expresion','OpenRoonie.py',296),
  ('addQPAO -> AND','addQPAO',1,'p_addQPAO','OpenRoonie.py',299),
  ('addQPAO -> OR','addQPAO',1,'p_addQPAO','OpenRoonie.py',300),
  ('masexpresion -> addQPAO expresion','masexpresion',2,'p_masexpresion','OpenRoonie.py',305),
  ('masexpresion -> empty','masexpresion',1,'p_masexpresion','OpenRoonie.py',306),
  ('termino -> factor masterminos','termino',2,'p_termino','OpenRoonie.py',310),
  ('addQTD -> TIMES','addQTD',1,'p_addQTD','OpenRoonie.py',313),
  ('addQTD -> DIVIDE','addQTD',1,'p_addQTD','OpenRoonie.py',314),
  ('masterminos -> addQTD termino','masterminos',2,'p_masterminos','OpenRoonie.py',319),
  ('masterminos -> empty','masterminos',1,'p_masterminos','OpenRoonie.py',320),
  ('expcomp -> exp expcompcontinuo','expcomp',2,'p_expcomp','OpenRoonie.py',324),
  ('addQPComp -> MORETHAN','addQPComp',1,'p_addQPComp','OpenRoonie.py',327),
  ('addQPComp -> LESSTHAN','addQPComp',1,'p_addQPComp','OpenRoonie.py',328),
  ('addQPComp -> NOTEQUAL','addQPComp',1,'p_addQPComp','OpenRoonie.py',329),
  ('addQPComp -> ISEQUALTO','addQPComp',1,'p_addQPComp','OpenRoonie.py',330),
  ('addQPComp -> MORETHANEQUAL','addQPComp',1,'p_addQPComp','OpenRoonie.py',331),
  ('addQPComp -> LESSTHANEQUAL','addQPComp',1,'p_addQPComp','OpenRoonie.py',332),
  ('expcompcontinuo -> addQPComp expcomp','expcompcontinuo',2,'p_expcompcontinuo','OpenRoonie.py',337),
  ('expcompcontinuo -> empty','expcompcontinuo',1,'p_expcompcontinuo','OpenRoonie.py',338),
  ('estatuto -> asignacion','estatuto',1,'p_estatuto','OpenRoonie.py',342),
  ('estatuto -> condicion','estatuto',1,'p_estatuto','OpenRoonie.py',343),
  ('estatuto -> ciclo','estatuto',1,'p_estatuto','OpenRoonie.py',344),
  ('estatuto -> escritura','estatuto',1,'p_estatuto','OpenRoonie.py',345),
  ('estatuto -> vars','estatuto',1,'p_estatuto','OpenRoonie.py',346),
  ('estatuto -> llamafunc SEMICOLON','estatuto',2,'p_estatuto','OpenRoonie.py',347),
  ('llamafunc -> idfunc LPAREN funcargs RPAREN','llamafunc',4,'p_llamafunc','OpenRoonie.py',350),
  ('idfunc -> ID','idfunc',1,'p_idfunc','OpenRoonie.py',358),
  ('funcargs -> expresion listafuncargs checarparams','funcargs',3,'p_funcargs','OpenRoonie.py',370),
  ('funcargs -> empty','funcargs',1,'p_funcargs','OpenRoonie.py',371),
  ('listafuncargs -> COMMA expresion listafuncargs','listafuncargs',3,'p_listafuncargs','OpenRoonie.py',374),
  ('listafuncargs -> empty','listafuncargs',1,'p_listafuncargs','OpenRoonie.py',375),
  ('checarparams -> empty','checarparams',1,'p_checarparams','OpenRoonie.py',378),
  ('masestatuto -> estatuto masestatuto','masestatuto',2,'p_masestatuto','OpenRoonie.py',385),
  ('masestatuto -> empty','masestatuto',1,'p_masestatuto','OpenRoonie.py',386),
  ('vars -> VAR tipo listaid SEMICOLON vars','vars',5,'p_vars','OpenRoonie.py',389),
  ('vars -> empty','vars',1,'p_vars','OpenRoonie.py',390),
  ('listaid -> ID masid','listaid',2,'p_listaid','OpenRoonie.py',393),
  ('masid -> COMMA listaid','masid',2,'p_masid','OpenRoonie.py',399),
  ('masid -> empty','masid',1,'p_masid','OpenRoonie.py',400),
  ('funcs -> FUNCTION funcaux LPAREN args masargs RPAREN bloquefunc funcs','funcs',8,'p_funcs','OpenRoonie.py',403),
  ('funcs -> FUNCTION funcaux LPAREN RPAREN bloquefunc funcs','funcs',6,'p_funcs','OpenRoonie.py',404),
  ('funcs -> empty','funcs',1,'p_funcs','OpenRoonie.py',405),
  ('bloquefunc -> LBRACKET masestatuto retorno RBRACKET','bloquefunc',4,'p_bloquefunc','OpenRoonie.py',408),
  ('retorno -> RETURN exp SEMICOLON','retorno',3,'p_retorno','OpenRoonie.py',411),
  ('retorno -> RETURN SEMICOLON','retorno',2,'p_retorno','OpenRoonie.py',412),
  ('funcaux -> tipo ID','funcaux',2,'p_funcaux','OpenRoonie.py',422),
  ('args -> tipo ID','args',2,'p_args','OpenRoonie.py',427),
  ('args -> empty','args',1,'p_args','OpenRoonie.py',428),
  ('masargs -> COMMA args masargs','masargs',3,'p_masargs','OpenRoonie.py',435),
  ('masargs -> empty','masargs',1,'p_masargs','OpenRoonie.py',436),
  ('tipo -> INT','tipo',1,'p_tipo','OpenRoonie.py',439),
  ('tipo -> FLOAT','tipo',1,'p_tipo','OpenRoonie.py',440),
  ('tipo -> CHAR','tipo',1,'p_tipo','OpenRoonie.py',441),
  ('tipo -> BOOL','tipo',1,'p_tipo','OpenRoonie.py',442),
  ('tipo -> STRING','tipo',1,'p_tipo','OpenRoonie.py',443),
  ('tipo -> VOID','tipo',1,'p_tipo','OpenRoonie.py',444),
  ('varcte -> cteint','varcte',1,'p_varcte','OpenRoonie.py',449),
  ('varcte -> ctefloat','varcte',1,'p_varcte','OpenRoonie.py',450),
  ('varcte -> ctechar','varcte',1,'p_varcte','OpenRoonie.py',451),
  ('varcte -> ctestring','varcte',1,'p_varcte','OpenRoonie.py',452),
  ('varcte -> ctebool','varcte',1,'p_varcte','OpenRoonie.py',453),
  ('cteint -> CTEINT','cteint',1,'p_cteint','OpenRoonie.py',456),
  ('ctefloat -> CTEFLOAT','ctefloat',1,'p_ctefloat','OpenRoonie.py',460),
  ('ctechar -> CTECHAR','ctechar',1,'p_ctechar','OpenRoonie.py',464),
  ('ctestring -> CTESTRING','ctestring',1,'p_ctestring','OpenRoonie.py',468),
  ('ctebool -> TRUE','ctebool',1,'p_ctebool','OpenRoonie.py',472),
  ('ctebool -> FALSE','ctebool',1,'p_ctebool','OpenRoonie.py',473),
  ('empty -> <empty>','empty',0,'p_empty','OpenRoonie.py',481),
]
