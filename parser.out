Created by PLY version 3.9 (http://www.dabeaz.com/ply)

Unused terminals:

    EXECUTE
    QUIT

Grammar

Rule 0     S' -> programa
Rule 1     programa -> prog ID SEMICOLON vars funcs main bloque
Rule 2     prog -> PROGRAM
Rule 3     main -> MAIN
Rule 4     condicion -> IF LPAREN expresion RPAREN gotoF bloque masbloque
Rule 5     gotoF -> empty
Rule 6     bloque -> LBRACKET masestatuto RBRACKET
Rule 7     masbloque -> ELSE goto bloque
Rule 8     masbloque -> empty
Rule 9     goto -> empty
Rule 10    ciclo -> while LPAREN expresion RPAREN gotoF bloque goto
Rule 11    while -> WHILE
Rule 12    escritura -> print LPAREN listaprint RPAREN SEMICOLON
Rule 13    print -> PRINT
Rule 14    listaprint -> expresion masprint
Rule 15    listaprint -> ctestring masprint
Rule 16    masprint -> COMMA listaprint
Rule 17    masprint -> empty
Rule 18    asignacion -> ID EQUALS expresion SEMICOLON
Rule 19    asignacion -> ID LSQBRACKET RSQBRACKET EQUALS LSQBRACKET expresion comaexpresion RSQBRACKET SEMICOLON
Rule 20    factor -> leftparen expresion rightparen
Rule 21    factor -> varcte
Rule 22    factor -> varid
Rule 23    leftparen -> LPAREN
Rule 24    rightparen -> RPAREN
Rule 25    varid -> ID arr
Rule 26    arr -> LSQBRACKET RSQBRACKET
Rule 27    arr -> empty
Rule 28    exp -> termino masexp addQPPM
Rule 29    addQPPM -> empty
Rule 30    masexp -> PLUS exp
Rule 31    masexp -> MINUS exp
Rule 32    masexp -> empty
Rule 33    comaexpresion -> COMMA expresion comaexpresion
Rule 34    comaexpresion -> empty
Rule 35    expresion -> expcomp masexpresion addQPAO
Rule 36    addQPAO -> empty
Rule 37    masexpresion -> AND expresion
Rule 38    masexpresion -> OR expresion
Rule 39    masexpresion -> empty
Rule 40    termino -> factor masterminos addQTD
Rule 41    addQTD -> empty
Rule 42    masterminos -> TIMES termino
Rule 43    masterminos -> DIVIDE termino
Rule 44    masterminos -> empty
Rule 45    expcomp -> exp expcompcontinuo addQPComp
Rule 46    addQPComp -> empty
Rule 47    expcompcontinuo -> MORETHAN exp
Rule 48    expcompcontinuo -> LESSTHAN exp
Rule 49    expcompcontinuo -> NOTEQUAL exp
Rule 50    expcompcontinuo -> ISEQUALTO exp
Rule 51    expcompcontinuo -> MORETHANEQUAL exp
Rule 52    expcompcontinuo -> LESSTHANEQUAL exp
Rule 53    expcompcontinuo -> empty
Rule 54    estatuto -> asignacion
Rule 55    estatuto -> condicion
Rule 56    estatuto -> ciclo
Rule 57    estatuto -> escritura
Rule 58    estatuto -> vars
Rule 59    masestatuto -> estatuto masestatuto
Rule 60    masestatuto -> empty
Rule 61    vars -> VAR tipo listaid SEMICOLON vars
Rule 62    vars -> empty
Rule 63    listaid -> ID masid
Rule 64    masid -> COMMA listaid
Rule 65    masid -> empty
Rule 66    funcs -> FUNCTION funcaux LPAREN args RPAREN bloque funcs
Rule 67    funcs -> empty
Rule 68    funcaux -> tipo ID
Rule 69    args -> tipo ID masargs
Rule 70    args -> empty
Rule 71    masargs -> COMMA args
Rule 72    masargs -> empty
Rule 73    tipo -> INT
Rule 74    tipo -> FLOAT
Rule 75    tipo -> CHAR
Rule 76    tipo -> BOOL
Rule 77    tipo -> STRING
Rule 78    varcte -> cteint
Rule 79    varcte -> ctefloat
Rule 80    varcte -> ctechar
Rule 81    varcte -> ctestring
Rule 82    varcte -> ctebool
Rule 83    cteint -> CTEINT
Rule 84    ctefloat -> CTEFLOAT
Rule 85    ctechar -> CTECHAR
Rule 86    ctestring -> CTESTRING
Rule 87    ctebool -> TRUE
Rule 88    ctebool -> FALSE
Rule 89    empty -> <empty>

Terminals, with rules where they appear

AND                  : 37
BOOL                 : 76
CHAR                 : 75
COMMA                : 16 33 64 71
CTECHAR              : 85
CTEFLOAT             : 84
CTEINT               : 83
CTESTRING            : 86
DIVIDE               : 43
ELSE                 : 7
EQUALS               : 18 19
EXECUTE              : 
FALSE                : 88
FLOAT                : 74
FUNCTION             : 66
ID                   : 1 18 19 25 63 68 69
IF                   : 4
INT                  : 73
ISEQUALTO            : 50
LBRACKET             : 6
LESSTHAN             : 48
LESSTHANEQUAL        : 52
LPAREN               : 4 10 12 23 66
LSQBRACKET           : 19 19 26
MAIN                 : 3
MINUS                : 31
MORETHAN             : 47
MORETHANEQUAL        : 51
NOTEQUAL             : 49
OR                   : 38
PLUS                 : 30
PRINT                : 13
PROGRAM              : 2
QUIT                 : 
RBRACKET             : 6
RPAREN               : 4 10 12 24 66
RSQBRACKET           : 19 19 26
SEMICOLON            : 1 12 18 19 61
STRING               : 77
TIMES                : 42
TRUE                 : 87
VAR                  : 61
WHILE                : 11
error                : 

Nonterminals, with rules where they appear

addQPAO              : 35
addQPComp            : 45
addQPPM              : 28
addQTD               : 40
args                 : 66 71
arr                  : 25
asignacion           : 54
bloque               : 1 4 7 10 66
ciclo                : 56
comaexpresion        : 19 33
condicion            : 55
ctebool              : 82
ctechar              : 80
ctefloat             : 79
cteint               : 78
ctestring            : 15 81
empty                : 5 8 9 17 27 29 32 34 36 39 41 44 46 53 60 62 65 67 70 72
escritura            : 57
estatuto             : 59
exp                  : 30 31 45 47 48 49 50 51 52
expcomp              : 35
expcompcontinuo      : 45
expresion            : 4 10 14 18 19 20 33 37 38
factor               : 40
funcaux              : 66
funcs                : 1 66
goto                 : 7 10
gotoF                : 4 10
leftparen            : 20
listaid              : 61 64
listaprint           : 12 16
main                 : 1
masargs              : 69
masbloque            : 4
masestatuto          : 6 59
masexp               : 28
masexpresion         : 35
masid                : 63
masprint             : 14 15
masterminos          : 40
print                : 12
prog                 : 1
programa             : 0
rightparen           : 20
termino              : 28 42 43
tipo                 : 61 68 69
varcte               : 21
varid                : 22
vars                 : 1 58 61
while                : 10

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . prog ID SEMICOLON vars funcs main bloque
    (2) prog -> . PROGRAM

    PROGRAM         shift and go to state 3

    prog                           shift and go to state 1
    programa                       shift and go to state 2

state 1

    (1) programa -> prog . ID SEMICOLON vars funcs main bloque

    ID              shift and go to state 4


state 2

    (0) S' -> programa .



state 3

    (2) prog -> PROGRAM .

    ID              reduce using rule 2 (prog -> PROGRAM .)


state 4

    (1) programa -> prog ID . SEMICOLON vars funcs main bloque

    SEMICOLON       shift and go to state 5


state 5

    (1) programa -> prog ID SEMICOLON . vars funcs main bloque
    (61) vars -> . VAR tipo listaid SEMICOLON vars
    (62) vars -> . empty
    (89) empty -> .

    VAR             shift and go to state 7
    FUNCTION        reduce using rule 89 (empty -> .)
    MAIN            reduce using rule 89 (empty -> .)

    empty                          shift and go to state 6
    vars                           shift and go to state 8

state 6

    (62) vars -> empty .

    FUNCTION        reduce using rule 62 (vars -> empty .)
    MAIN            reduce using rule 62 (vars -> empty .)
    ID              reduce using rule 62 (vars -> empty .)
    IF              reduce using rule 62 (vars -> empty .)
    VAR             reduce using rule 62 (vars -> empty .)
    WHILE           reduce using rule 62 (vars -> empty .)
    PRINT           reduce using rule 62 (vars -> empty .)
    RBRACKET        reduce using rule 62 (vars -> empty .)


state 7

    (61) vars -> VAR . tipo listaid SEMICOLON vars
    (73) tipo -> . INT
    (74) tipo -> . FLOAT
    (75) tipo -> . CHAR
    (76) tipo -> . BOOL
    (77) tipo -> . STRING

    INT             shift and go to state 13
    FLOAT           shift and go to state 12
    CHAR            shift and go to state 11
    BOOL            shift and go to state 10
    STRING          shift and go to state 14

    tipo                           shift and go to state 9

state 8

    (1) programa -> prog ID SEMICOLON vars . funcs main bloque
    (66) funcs -> . FUNCTION funcaux LPAREN args RPAREN bloque funcs
    (67) funcs -> . empty
    (89) empty -> .

    FUNCTION        shift and go to state 15
    MAIN            reduce using rule 89 (empty -> .)

    empty                          shift and go to state 16
    funcs                          shift and go to state 17

state 9

    (61) vars -> VAR tipo . listaid SEMICOLON vars
    (63) listaid -> . ID masid

    ID              shift and go to state 18

    listaid                        shift and go to state 19

state 10

    (76) tipo -> BOOL .

    ID              reduce using rule 76 (tipo -> BOOL .)


state 11

    (75) tipo -> CHAR .

    ID              reduce using rule 75 (tipo -> CHAR .)


state 12

    (74) tipo -> FLOAT .

    ID              reduce using rule 74 (tipo -> FLOAT .)


state 13

    (73) tipo -> INT .

    ID              reduce using rule 73 (tipo -> INT .)


state 14

    (77) tipo -> STRING .

    ID              reduce using rule 77 (tipo -> STRING .)


state 15

    (66) funcs -> FUNCTION . funcaux LPAREN args RPAREN bloque funcs
    (68) funcaux -> . tipo ID
    (73) tipo -> . INT
    (74) tipo -> . FLOAT
    (75) tipo -> . CHAR
    (76) tipo -> . BOOL
    (77) tipo -> . STRING

    INT             shift and go to state 13
    FLOAT           shift and go to state 12
    CHAR            shift and go to state 11
    BOOL            shift and go to state 10
    STRING          shift and go to state 14

    tipo                           shift and go to state 20
    funcaux                        shift and go to state 21

state 16

    (67) funcs -> empty .

    MAIN            reduce using rule 67 (funcs -> empty .)


state 17

    (1) programa -> prog ID SEMICOLON vars funcs . main bloque
    (3) main -> . MAIN

    MAIN            shift and go to state 22

    main                           shift and go to state 23

state 18

    (63) listaid -> ID . masid
    (64) masid -> . COMMA listaid
    (65) masid -> . empty
    (89) empty -> .

    COMMA           shift and go to state 26
    SEMICOLON       reduce using rule 89 (empty -> .)

    masid                          shift and go to state 24
    empty                          shift and go to state 25

state 19

    (61) vars -> VAR tipo listaid . SEMICOLON vars

    SEMICOLON       shift and go to state 27


state 20

    (68) funcaux -> tipo . ID

    ID              shift and go to state 28


state 21

    (66) funcs -> FUNCTION funcaux . LPAREN args RPAREN bloque funcs

    LPAREN          shift and go to state 29


state 22

    (3) main -> MAIN .

    LBRACKET        reduce using rule 3 (main -> MAIN .)


state 23

    (1) programa -> prog ID SEMICOLON vars funcs main . bloque
    (6) bloque -> . LBRACKET masestatuto RBRACKET

    LBRACKET        shift and go to state 30

    bloque                         shift and go to state 31

state 24

    (63) listaid -> ID masid .

    SEMICOLON       reduce using rule 63 (listaid -> ID masid .)


state 25

    (65) masid -> empty .

    SEMICOLON       reduce using rule 65 (masid -> empty .)


state 26

    (64) masid -> COMMA . listaid
    (63) listaid -> . ID masid

    ID              shift and go to state 18

    listaid                        shift and go to state 32

state 27

    (61) vars -> VAR tipo listaid SEMICOLON . vars
    (61) vars -> . VAR tipo listaid SEMICOLON vars
    (62) vars -> . empty
    (89) empty -> .

  ! shift/reduce conflict for VAR resolved as shift
    VAR             shift and go to state 7
    FUNCTION        reduce using rule 89 (empty -> .)
    MAIN            reduce using rule 89 (empty -> .)
    ID              reduce using rule 89 (empty -> .)
    IF              reduce using rule 89 (empty -> .)
    WHILE           reduce using rule 89 (empty -> .)
    PRINT           reduce using rule 89 (empty -> .)
    RBRACKET        reduce using rule 89 (empty -> .)

  ! VAR             [ reduce using rule 89 (empty -> .) ]

    vars                           shift and go to state 33
    empty                          shift and go to state 6

state 28

    (68) funcaux -> tipo ID .

    LPAREN          reduce using rule 68 (funcaux -> tipo ID .)


state 29

    (66) funcs -> FUNCTION funcaux LPAREN . args RPAREN bloque funcs
    (69) args -> . tipo ID masargs
    (70) args -> . empty
    (73) tipo -> . INT
    (74) tipo -> . FLOAT
    (75) tipo -> . CHAR
    (76) tipo -> . BOOL
    (77) tipo -> . STRING
    (89) empty -> .

    INT             shift and go to state 13
    FLOAT           shift and go to state 12
    CHAR            shift and go to state 11
    BOOL            shift and go to state 10
    STRING          shift and go to state 14
    RPAREN          reduce using rule 89 (empty -> .)

    tipo                           shift and go to state 34
    empty                          shift and go to state 35
    args                           shift and go to state 36

state 30

    (6) bloque -> LBRACKET . masestatuto RBRACKET
    (59) masestatuto -> . estatuto masestatuto
    (60) masestatuto -> . empty
    (54) estatuto -> . asignacion
    (55) estatuto -> . condicion
    (56) estatuto -> . ciclo
    (57) estatuto -> . escritura
    (58) estatuto -> . vars
    (89) empty -> .
    (18) asignacion -> . ID EQUALS expresion SEMICOLON
    (19) asignacion -> . ID LSQBRACKET RSQBRACKET EQUALS LSQBRACKET expresion comaexpresion RSQBRACKET SEMICOLON
    (4) condicion -> . IF LPAREN expresion RPAREN gotoF bloque masbloque
    (10) ciclo -> . while LPAREN expresion RPAREN gotoF bloque goto
    (12) escritura -> . print LPAREN listaprint RPAREN SEMICOLON
    (61) vars -> . VAR tipo listaid SEMICOLON vars
    (62) vars -> . empty
    (11) while -> . WHILE
    (13) print -> . PRINT

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
    RBRACKET        reduce using rule 89 (empty -> .)
    ID              shift and go to state 39
    IF              shift and go to state 40
    VAR             shift and go to state 7
    WHILE           shift and go to state 43
    PRINT           shift and go to state 48

  ! ID              [ reduce using rule 89 (empty -> .) ]
  ! IF              [ reduce using rule 89 (empty -> .) ]
  ! VAR             [ reduce using rule 89 (empty -> .) ]
  ! WHILE           [ reduce using rule 89 (empty -> .) ]
  ! PRINT           [ reduce using rule 89 (empty -> .) ]

    masestatuto                    shift and go to state 37
    ciclo                          shift and go to state 38
    empty                          shift and go to state 44
    condicion                      shift and go to state 45
    asignacion                     shift and go to state 46
    while                          shift and go to state 41
    print                          shift and go to state 47
    vars                           shift and go to state 49
    estatuto                       shift and go to state 42
    escritura                      shift and go to state 50

state 31

    (1) programa -> prog ID SEMICOLON vars funcs main bloque .

    $end            reduce using rule 1 (programa -> prog ID SEMICOLON vars funcs main bloque .)


state 32

    (64) masid -> COMMA listaid .

    SEMICOLON       reduce using rule 64 (masid -> COMMA listaid .)


state 33

    (61) vars -> VAR tipo listaid SEMICOLON vars .

    FUNCTION        reduce using rule 61 (vars -> VAR tipo listaid SEMICOLON vars .)
    MAIN            reduce using rule 61 (vars -> VAR tipo listaid SEMICOLON vars .)
    ID              reduce using rule 61 (vars -> VAR tipo listaid SEMICOLON vars .)
    IF              reduce using rule 61 (vars -> VAR tipo listaid SEMICOLON vars .)
    VAR             reduce using rule 61 (vars -> VAR tipo listaid SEMICOLON vars .)
    WHILE           reduce using rule 61 (vars -> VAR tipo listaid SEMICOLON vars .)
    PRINT           reduce using rule 61 (vars -> VAR tipo listaid SEMICOLON vars .)
    RBRACKET        reduce using rule 61 (vars -> VAR tipo listaid SEMICOLON vars .)


state 34

    (69) args -> tipo . ID masargs

    ID              shift and go to state 51


state 35

    (70) args -> empty .

    RPAREN          reduce using rule 70 (args -> empty .)


state 36

    (66) funcs -> FUNCTION funcaux LPAREN args . RPAREN bloque funcs

    RPAREN          shift and go to state 52


state 37

    (6) bloque -> LBRACKET masestatuto . RBRACKET

    RBRACKET        shift and go to state 53


state 38

    (56) estatuto -> ciclo .

    ID              reduce using rule 56 (estatuto -> ciclo .)
    IF              reduce using rule 56 (estatuto -> ciclo .)
    VAR             reduce using rule 56 (estatuto -> ciclo .)
    WHILE           reduce using rule 56 (estatuto -> ciclo .)
    PRINT           reduce using rule 56 (estatuto -> ciclo .)
    RBRACKET        reduce using rule 56 (estatuto -> ciclo .)


state 39

    (18) asignacion -> ID . EQUALS expresion SEMICOLON
    (19) asignacion -> ID . LSQBRACKET RSQBRACKET EQUALS LSQBRACKET expresion comaexpresion RSQBRACKET SEMICOLON

    EQUALS          shift and go to state 54
    LSQBRACKET      shift and go to state 55


state 40

    (4) condicion -> IF . LPAREN expresion RPAREN gotoF bloque masbloque

    LPAREN          shift and go to state 56


state 41

    (10) ciclo -> while . LPAREN expresion RPAREN gotoF bloque goto

    LPAREN          shift and go to state 57


state 42

    (59) masestatuto -> estatuto . masestatuto
    (59) masestatuto -> . estatuto masestatuto
    (60) masestatuto -> . empty
    (54) estatuto -> . asignacion
    (55) estatuto -> . condicion
    (56) estatuto -> . ciclo
    (57) estatuto -> . escritura
    (58) estatuto -> . vars
    (89) empty -> .
    (18) asignacion -> . ID EQUALS expresion SEMICOLON
    (19) asignacion -> . ID LSQBRACKET RSQBRACKET EQUALS LSQBRACKET expresion comaexpresion RSQBRACKET SEMICOLON
    (4) condicion -> . IF LPAREN expresion RPAREN gotoF bloque masbloque
    (10) ciclo -> . while LPAREN expresion RPAREN gotoF bloque goto
    (12) escritura -> . print LPAREN listaprint RPAREN SEMICOLON
    (61) vars -> . VAR tipo listaid SEMICOLON vars
    (62) vars -> . empty
    (11) while -> . WHILE
    (13) print -> . PRINT

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
    RBRACKET        reduce using rule 89 (empty -> .)
    ID              shift and go to state 39
    IF              shift and go to state 40
    VAR             shift and go to state 7
    WHILE           shift and go to state 43
    PRINT           shift and go to state 48

  ! ID              [ reduce using rule 89 (empty -> .) ]
  ! IF              [ reduce using rule 89 (empty -> .) ]
  ! VAR             [ reduce using rule 89 (empty -> .) ]
  ! WHILE           [ reduce using rule 89 (empty -> .) ]
  ! PRINT           [ reduce using rule 89 (empty -> .) ]

    masestatuto                    shift and go to state 58
    ciclo                          shift and go to state 38
    empty                          shift and go to state 44
    condicion                      shift and go to state 45
    asignacion                     shift and go to state 46
    while                          shift and go to state 41
    print                          shift and go to state 47
    vars                           shift and go to state 49
    estatuto                       shift and go to state 42
    escritura                      shift and go to state 50

state 43

    (11) while -> WHILE .

    LPAREN          reduce using rule 11 (while -> WHILE .)


state 44

    (60) masestatuto -> empty .
    (62) vars -> empty .

  ! reduce/reduce conflict for RBRACKET resolved using rule 60 (masestatuto -> empty .)
    RBRACKET        reduce using rule 60 (masestatuto -> empty .)
    ID              reduce using rule 62 (vars -> empty .)
    IF              reduce using rule 62 (vars -> empty .)
    VAR             reduce using rule 62 (vars -> empty .)
    WHILE           reduce using rule 62 (vars -> empty .)
    PRINT           reduce using rule 62 (vars -> empty .)

  ! RBRACKET        [ reduce using rule 62 (vars -> empty .) ]


state 45

    (55) estatuto -> condicion .

    ID              reduce using rule 55 (estatuto -> condicion .)
    IF              reduce using rule 55 (estatuto -> condicion .)
    VAR             reduce using rule 55 (estatuto -> condicion .)
    WHILE           reduce using rule 55 (estatuto -> condicion .)
    PRINT           reduce using rule 55 (estatuto -> condicion .)
    RBRACKET        reduce using rule 55 (estatuto -> condicion .)


state 46

    (54) estatuto -> asignacion .

    ID              reduce using rule 54 (estatuto -> asignacion .)
    IF              reduce using rule 54 (estatuto -> asignacion .)
    VAR             reduce using rule 54 (estatuto -> asignacion .)
    WHILE           reduce using rule 54 (estatuto -> asignacion .)
    PRINT           reduce using rule 54 (estatuto -> asignacion .)
    RBRACKET        reduce using rule 54 (estatuto -> asignacion .)


state 47

    (12) escritura -> print . LPAREN listaprint RPAREN SEMICOLON

    LPAREN          shift and go to state 59


state 48

    (13) print -> PRINT .

    LPAREN          reduce using rule 13 (print -> PRINT .)


state 49

    (58) estatuto -> vars .

    ID              reduce using rule 58 (estatuto -> vars .)
    IF              reduce using rule 58 (estatuto -> vars .)
    VAR             reduce using rule 58 (estatuto -> vars .)
    WHILE           reduce using rule 58 (estatuto -> vars .)
    PRINT           reduce using rule 58 (estatuto -> vars .)
    RBRACKET        reduce using rule 58 (estatuto -> vars .)


state 50

    (57) estatuto -> escritura .

    ID              reduce using rule 57 (estatuto -> escritura .)
    IF              reduce using rule 57 (estatuto -> escritura .)
    VAR             reduce using rule 57 (estatuto -> escritura .)
    WHILE           reduce using rule 57 (estatuto -> escritura .)
    PRINT           reduce using rule 57 (estatuto -> escritura .)
    RBRACKET        reduce using rule 57 (estatuto -> escritura .)


state 51

    (69) args -> tipo ID . masargs
    (71) masargs -> . COMMA args
    (72) masargs -> . empty
    (89) empty -> .

    COMMA           shift and go to state 62
    RPAREN          reduce using rule 89 (empty -> .)

    masargs                        shift and go to state 61
    empty                          shift and go to state 60

state 52

    (66) funcs -> FUNCTION funcaux LPAREN args RPAREN . bloque funcs
    (6) bloque -> . LBRACKET masestatuto RBRACKET

    LBRACKET        shift and go to state 30

    bloque                         shift and go to state 63

state 53

    (6) bloque -> LBRACKET masestatuto RBRACKET .

    ID              reduce using rule 6 (bloque -> LBRACKET masestatuto RBRACKET .)
    IF              reduce using rule 6 (bloque -> LBRACKET masestatuto RBRACKET .)
    VAR             reduce using rule 6 (bloque -> LBRACKET masestatuto RBRACKET .)
    WHILE           reduce using rule 6 (bloque -> LBRACKET masestatuto RBRACKET .)
    PRINT           reduce using rule 6 (bloque -> LBRACKET masestatuto RBRACKET .)
    RBRACKET        reduce using rule 6 (bloque -> LBRACKET masestatuto RBRACKET .)
    FUNCTION        reduce using rule 6 (bloque -> LBRACKET masestatuto RBRACKET .)
    MAIN            reduce using rule 6 (bloque -> LBRACKET masestatuto RBRACKET .)
    $end            reduce using rule 6 (bloque -> LBRACKET masestatuto RBRACKET .)
    ELSE            reduce using rule 6 (bloque -> LBRACKET masestatuto RBRACKET .)


state 54

    (18) asignacion -> ID EQUALS . expresion SEMICOLON
    (35) expresion -> . expcomp masexpresion addQPAO
    (45) expcomp -> . exp expcompcontinuo addQPComp
    (28) exp -> . termino masexp addQPPM
    (40) termino -> . factor masterminos addQTD
    (20) factor -> . leftparen expresion rightparen
    (21) factor -> . varcte
    (22) factor -> . varid
    (23) leftparen -> . LPAREN
    (78) varcte -> . cteint
    (79) varcte -> . ctefloat
    (80) varcte -> . ctechar
    (81) varcte -> . ctestring
    (82) varcte -> . ctebool
    (25) varid -> . ID arr
    (83) cteint -> . CTEINT
    (84) ctefloat -> . CTEFLOAT
    (85) ctechar -> . CTECHAR
    (86) ctestring -> . CTESTRING
    (87) ctebool -> . TRUE
    (88) ctebool -> . FALSE

    LPAREN          shift and go to state 70
    ID              shift and go to state 66
    CTEINT          shift and go to state 76
    CTEFLOAT        shift and go to state 81
    CTECHAR         shift and go to state 72
    CTESTRING       shift and go to state 83
    TRUE            shift and go to state 67
    FALSE           shift and go to state 77

    expresion                      shift and go to state 64
    factor                         shift and go to state 68
    ctebool                        shift and go to state 82
    ctestring                      shift and go to state 75
    leftparen                      shift and go to state 71
    exp                            shift and go to state 73
    termino                        shift and go to state 74
    expcomp                        shift and go to state 65
    varid                          shift and go to state 84
    varcte                         shift and go to state 79
    ctefloat                       shift and go to state 80
    ctechar                        shift and go to state 78
    cteint                         shift and go to state 69

state 55

    (19) asignacion -> ID LSQBRACKET . RSQBRACKET EQUALS LSQBRACKET expresion comaexpresion RSQBRACKET SEMICOLON

    RSQBRACKET      shift and go to state 85


state 56

    (4) condicion -> IF LPAREN . expresion RPAREN gotoF bloque masbloque
    (35) expresion -> . expcomp masexpresion addQPAO
    (45) expcomp -> . exp expcompcontinuo addQPComp
    (28) exp -> . termino masexp addQPPM
    (40) termino -> . factor masterminos addQTD
    (20) factor -> . leftparen expresion rightparen
    (21) factor -> . varcte
    (22) factor -> . varid
    (23) leftparen -> . LPAREN
    (78) varcte -> . cteint
    (79) varcte -> . ctefloat
    (80) varcte -> . ctechar
    (81) varcte -> . ctestring
    (82) varcte -> . ctebool
    (25) varid -> . ID arr
    (83) cteint -> . CTEINT
    (84) ctefloat -> . CTEFLOAT
    (85) ctechar -> . CTECHAR
    (86) ctestring -> . CTESTRING
    (87) ctebool -> . TRUE
    (88) ctebool -> . FALSE

    LPAREN          shift and go to state 70
    ID              shift and go to state 66
    CTEINT          shift and go to state 76
    CTEFLOAT        shift and go to state 81
    CTECHAR         shift and go to state 72
    CTESTRING       shift and go to state 83
    TRUE            shift and go to state 67
    FALSE           shift and go to state 77

    expresion                      shift and go to state 86
    expcomp                        shift and go to state 65
    factor                         shift and go to state 68
    ctebool                        shift and go to state 82
    ctestring                      shift and go to state 75
    leftparen                      shift and go to state 71
    termino                        shift and go to state 74
    ctechar                        shift and go to state 78
    varcte                         shift and go to state 79
    ctefloat                       shift and go to state 80
    varid                          shift and go to state 84
    cteint                         shift and go to state 69
    exp                            shift and go to state 73

state 57

    (10) ciclo -> while LPAREN . expresion RPAREN gotoF bloque goto
    (35) expresion -> . expcomp masexpresion addQPAO
    (45) expcomp -> . exp expcompcontinuo addQPComp
    (28) exp -> . termino masexp addQPPM
    (40) termino -> . factor masterminos addQTD
    (20) factor -> . leftparen expresion rightparen
    (21) factor -> . varcte
    (22) factor -> . varid
    (23) leftparen -> . LPAREN
    (78) varcte -> . cteint
    (79) varcte -> . ctefloat
    (80) varcte -> . ctechar
    (81) varcte -> . ctestring
    (82) varcte -> . ctebool
    (25) varid -> . ID arr
    (83) cteint -> . CTEINT
    (84) ctefloat -> . CTEFLOAT
    (85) ctechar -> . CTECHAR
    (86) ctestring -> . CTESTRING
    (87) ctebool -> . TRUE
    (88) ctebool -> . FALSE

    LPAREN          shift and go to state 70
    ID              shift and go to state 66
    CTEINT          shift and go to state 76
    CTEFLOAT        shift and go to state 81
    CTECHAR         shift and go to state 72
    CTESTRING       shift and go to state 83
    TRUE            shift and go to state 67
    FALSE           shift and go to state 77

    expresion                      shift and go to state 87
    expcomp                        shift and go to state 65
    factor                         shift and go to state 68
    cteint                         shift and go to state 69
    ctestring                      shift and go to state 75
    leftparen                      shift and go to state 71
    termino                        shift and go to state 74
    ctechar                        shift and go to state 78
    varcte                         shift and go to state 79
    ctefloat                       shift and go to state 80
    ctebool                        shift and go to state 82
    varid                          shift and go to state 84
    exp                            shift and go to state 73

state 58

    (59) masestatuto -> estatuto masestatuto .

    RBRACKET        reduce using rule 59 (masestatuto -> estatuto masestatuto .)


state 59

    (12) escritura -> print LPAREN . listaprint RPAREN SEMICOLON
    (14) listaprint -> . expresion masprint
    (15) listaprint -> . ctestring masprint
    (35) expresion -> . expcomp masexpresion addQPAO
    (86) ctestring -> . CTESTRING
    (45) expcomp -> . exp expcompcontinuo addQPComp
    (28) exp -> . termino masexp addQPPM
    (40) termino -> . factor masterminos addQTD
    (20) factor -> . leftparen expresion rightparen
    (21) factor -> . varcte
    (22) factor -> . varid
    (23) leftparen -> . LPAREN
    (78) varcte -> . cteint
    (79) varcte -> . ctefloat
    (80) varcte -> . ctechar
    (81) varcte -> . ctestring
    (82) varcte -> . ctebool
    (25) varid -> . ID arr
    (83) cteint -> . CTEINT
    (84) ctefloat -> . CTEFLOAT
    (85) ctechar -> . CTECHAR
    (87) ctebool -> . TRUE
    (88) ctebool -> . FALSE

    CTESTRING       shift and go to state 83
    LPAREN          shift and go to state 70
    ID              shift and go to state 66
    CTEINT          shift and go to state 76
    CTEFLOAT        shift and go to state 81
    CTECHAR         shift and go to state 72
    TRUE            shift and go to state 67
    FALSE           shift and go to state 77

    expresion                      shift and go to state 88
    expcomp                        shift and go to state 65
    factor                         shift and go to state 68
    cteint                         shift and go to state 69
    ctestring                      shift and go to state 89
    leftparen                      shift and go to state 71
    listaprint                     shift and go to state 90
    exp                            shift and go to state 73
    ctefloat                       shift and go to state 80
    termino                        shift and go to state 74
    ctechar                        shift and go to state 78
    varcte                         shift and go to state 79
    ctebool                        shift and go to state 82
    varid                          shift and go to state 84

state 60

    (72) masargs -> empty .

    RPAREN          reduce using rule 72 (masargs -> empty .)


state 61

    (69) args -> tipo ID masargs .

    RPAREN          reduce using rule 69 (args -> tipo ID masargs .)


state 62

    (71) masargs -> COMMA . args
    (69) args -> . tipo ID masargs
    (70) args -> . empty
    (73) tipo -> . INT
    (74) tipo -> . FLOAT
    (75) tipo -> . CHAR
    (76) tipo -> . BOOL
    (77) tipo -> . STRING
    (89) empty -> .

    INT             shift and go to state 13
    FLOAT           shift and go to state 12
    CHAR            shift and go to state 11
    BOOL            shift and go to state 10
    STRING          shift and go to state 14
    RPAREN          reduce using rule 89 (empty -> .)

    tipo                           shift and go to state 34
    empty                          shift and go to state 35
    args                           shift and go to state 91

state 63

    (66) funcs -> FUNCTION funcaux LPAREN args RPAREN bloque . funcs
    (66) funcs -> . FUNCTION funcaux LPAREN args RPAREN bloque funcs
    (67) funcs -> . empty
    (89) empty -> .

    FUNCTION        shift and go to state 15
    MAIN            reduce using rule 89 (empty -> .)

    empty                          shift and go to state 16
    funcs                          shift and go to state 92

state 64

    (18) asignacion -> ID EQUALS expresion . SEMICOLON

    SEMICOLON       shift and go to state 93


state 65

    (35) expresion -> expcomp . masexpresion addQPAO
    (37) masexpresion -> . AND expresion
    (38) masexpresion -> . OR expresion
    (39) masexpresion -> . empty
    (89) empty -> .

    AND             shift and go to state 95
    OR              shift and go to state 96
    SEMICOLON       reduce using rule 89 (empty -> .)
    RPAREN          reduce using rule 89 (empty -> .)
    COMMA           reduce using rule 89 (empty -> .)
    RSQBRACKET      reduce using rule 89 (empty -> .)

    masexpresion                   shift and go to state 97
    empty                          shift and go to state 94

state 66

    (25) varid -> ID . arr
    (26) arr -> . LSQBRACKET RSQBRACKET
    (27) arr -> . empty
    (89) empty -> .

    LSQBRACKET      shift and go to state 100
    TIMES           reduce using rule 89 (empty -> .)
    DIVIDE          reduce using rule 89 (empty -> .)
    PLUS            reduce using rule 89 (empty -> .)
    MINUS           reduce using rule 89 (empty -> .)
    MORETHAN        reduce using rule 89 (empty -> .)
    LESSTHAN        reduce using rule 89 (empty -> .)
    NOTEQUAL        reduce using rule 89 (empty -> .)
    ISEQUALTO       reduce using rule 89 (empty -> .)
    MORETHANEQUAL   reduce using rule 89 (empty -> .)
    LESSTHANEQUAL   reduce using rule 89 (empty -> .)
    AND             reduce using rule 89 (empty -> .)
    OR              reduce using rule 89 (empty -> .)
    SEMICOLON       reduce using rule 89 (empty -> .)
    RPAREN          reduce using rule 89 (empty -> .)
    COMMA           reduce using rule 89 (empty -> .)
    RSQBRACKET      reduce using rule 89 (empty -> .)

    arr                            shift and go to state 99
    empty                          shift and go to state 98

state 67

    (87) ctebool -> TRUE .

    TIMES           reduce using rule 87 (ctebool -> TRUE .)
    DIVIDE          reduce using rule 87 (ctebool -> TRUE .)
    PLUS            reduce using rule 87 (ctebool -> TRUE .)
    MINUS           reduce using rule 87 (ctebool -> TRUE .)
    MORETHAN        reduce using rule 87 (ctebool -> TRUE .)
    LESSTHAN        reduce using rule 87 (ctebool -> TRUE .)
    NOTEQUAL        reduce using rule 87 (ctebool -> TRUE .)
    ISEQUALTO       reduce using rule 87 (ctebool -> TRUE .)
    MORETHANEQUAL   reduce using rule 87 (ctebool -> TRUE .)
    LESSTHANEQUAL   reduce using rule 87 (ctebool -> TRUE .)
    AND             reduce using rule 87 (ctebool -> TRUE .)
    OR              reduce using rule 87 (ctebool -> TRUE .)
    SEMICOLON       reduce using rule 87 (ctebool -> TRUE .)
    RPAREN          reduce using rule 87 (ctebool -> TRUE .)
    COMMA           reduce using rule 87 (ctebool -> TRUE .)
    RSQBRACKET      reduce using rule 87 (ctebool -> TRUE .)


state 68

    (40) termino -> factor . masterminos addQTD
    (42) masterminos -> . TIMES termino
    (43) masterminos -> . DIVIDE termino
    (44) masterminos -> . empty
    (89) empty -> .

    TIMES           shift and go to state 104
    DIVIDE          shift and go to state 103
    PLUS            reduce using rule 89 (empty -> .)
    MINUS           reduce using rule 89 (empty -> .)
    MORETHAN        reduce using rule 89 (empty -> .)
    LESSTHAN        reduce using rule 89 (empty -> .)
    NOTEQUAL        reduce using rule 89 (empty -> .)
    ISEQUALTO       reduce using rule 89 (empty -> .)
    MORETHANEQUAL   reduce using rule 89 (empty -> .)
    LESSTHANEQUAL   reduce using rule 89 (empty -> .)
    AND             reduce using rule 89 (empty -> .)
    OR              reduce using rule 89 (empty -> .)
    SEMICOLON       reduce using rule 89 (empty -> .)
    RPAREN          reduce using rule 89 (empty -> .)
    COMMA           reduce using rule 89 (empty -> .)
    RSQBRACKET      reduce using rule 89 (empty -> .)

    masterminos                    shift and go to state 101
    empty                          shift and go to state 102

state 69

    (78) varcte -> cteint .

    TIMES           reduce using rule 78 (varcte -> cteint .)
    DIVIDE          reduce using rule 78 (varcte -> cteint .)
    PLUS            reduce using rule 78 (varcte -> cteint .)
    MINUS           reduce using rule 78 (varcte -> cteint .)
    MORETHAN        reduce using rule 78 (varcte -> cteint .)
    LESSTHAN        reduce using rule 78 (varcte -> cteint .)
    NOTEQUAL        reduce using rule 78 (varcte -> cteint .)
    ISEQUALTO       reduce using rule 78 (varcte -> cteint .)
    MORETHANEQUAL   reduce using rule 78 (varcte -> cteint .)
    LESSTHANEQUAL   reduce using rule 78 (varcte -> cteint .)
    AND             reduce using rule 78 (varcte -> cteint .)
    OR              reduce using rule 78 (varcte -> cteint .)
    RPAREN          reduce using rule 78 (varcte -> cteint .)
    SEMICOLON       reduce using rule 78 (varcte -> cteint .)
    COMMA           reduce using rule 78 (varcte -> cteint .)
    RSQBRACKET      reduce using rule 78 (varcte -> cteint .)


state 70

    (23) leftparen -> LPAREN .

    LPAREN          reduce using rule 23 (leftparen -> LPAREN .)
    ID              reduce using rule 23 (leftparen -> LPAREN .)
    CTEINT          reduce using rule 23 (leftparen -> LPAREN .)
    CTEFLOAT        reduce using rule 23 (leftparen -> LPAREN .)
    CTECHAR         reduce using rule 23 (leftparen -> LPAREN .)
    CTESTRING       reduce using rule 23 (leftparen -> LPAREN .)
    TRUE            reduce using rule 23 (leftparen -> LPAREN .)
    FALSE           reduce using rule 23 (leftparen -> LPAREN .)


state 71

    (20) factor -> leftparen . expresion rightparen
    (35) expresion -> . expcomp masexpresion addQPAO
    (45) expcomp -> . exp expcompcontinuo addQPComp
    (28) exp -> . termino masexp addQPPM
    (40) termino -> . factor masterminos addQTD
    (20) factor -> . leftparen expresion rightparen
    (21) factor -> . varcte
    (22) factor -> . varid
    (23) leftparen -> . LPAREN
    (78) varcte -> . cteint
    (79) varcte -> . ctefloat
    (80) varcte -> . ctechar
    (81) varcte -> . ctestring
    (82) varcte -> . ctebool
    (25) varid -> . ID arr
    (83) cteint -> . CTEINT
    (84) ctefloat -> . CTEFLOAT
    (85) ctechar -> . CTECHAR
    (86) ctestring -> . CTESTRING
    (87) ctebool -> . TRUE
    (88) ctebool -> . FALSE

    LPAREN          shift and go to state 70
    ID              shift and go to state 66
    CTEINT          shift and go to state 76
    CTEFLOAT        shift and go to state 81
    CTECHAR         shift and go to state 72
    CTESTRING       shift and go to state 83
    TRUE            shift and go to state 67
    FALSE           shift and go to state 77

    expresion                      shift and go to state 105
    expcomp                        shift and go to state 65
    factor                         shift and go to state 68
    ctebool                        shift and go to state 82
    ctestring                      shift and go to state 75
    leftparen                      shift and go to state 71
    exp                            shift and go to state 73
    termino                        shift and go to state 74
    varid                          shift and go to state 84
    varcte                         shift and go to state 79
    ctefloat                       shift and go to state 80
    ctechar                        shift and go to state 78
    cteint                         shift and go to state 69

state 72

    (85) ctechar -> CTECHAR .

    TIMES           reduce using rule 85 (ctechar -> CTECHAR .)
    DIVIDE          reduce using rule 85 (ctechar -> CTECHAR .)
    PLUS            reduce using rule 85 (ctechar -> CTECHAR .)
    MINUS           reduce using rule 85 (ctechar -> CTECHAR .)
    AND             reduce using rule 85 (ctechar -> CTECHAR .)
    OR              reduce using rule 85 (ctechar -> CTECHAR .)
    SEMICOLON       reduce using rule 85 (ctechar -> CTECHAR .)
    RPAREN          reduce using rule 85 (ctechar -> CTECHAR .)
    COMMA           reduce using rule 85 (ctechar -> CTECHAR .)
    RSQBRACKET      reduce using rule 85 (ctechar -> CTECHAR .)
    MORETHAN        reduce using rule 85 (ctechar -> CTECHAR .)
    LESSTHAN        reduce using rule 85 (ctechar -> CTECHAR .)
    NOTEQUAL        reduce using rule 85 (ctechar -> CTECHAR .)
    ISEQUALTO       reduce using rule 85 (ctechar -> CTECHAR .)
    MORETHANEQUAL   reduce using rule 85 (ctechar -> CTECHAR .)
    LESSTHANEQUAL   reduce using rule 85 (ctechar -> CTECHAR .)


state 73

    (45) expcomp -> exp . expcompcontinuo addQPComp
    (47) expcompcontinuo -> . MORETHAN exp
    (48) expcompcontinuo -> . LESSTHAN exp
    (49) expcompcontinuo -> . NOTEQUAL exp
    (50) expcompcontinuo -> . ISEQUALTO exp
    (51) expcompcontinuo -> . MORETHANEQUAL exp
    (52) expcompcontinuo -> . LESSTHANEQUAL exp
    (53) expcompcontinuo -> . empty
    (89) empty -> .

    MORETHAN        shift and go to state 112
    LESSTHAN        shift and go to state 108
    NOTEQUAL        shift and go to state 110
    ISEQUALTO       shift and go to state 106
    MORETHANEQUAL   shift and go to state 111
    LESSTHANEQUAL   shift and go to state 109
    AND             reduce using rule 89 (empty -> .)
    OR              reduce using rule 89 (empty -> .)
    SEMICOLON       reduce using rule 89 (empty -> .)
    RPAREN          reduce using rule 89 (empty -> .)
    COMMA           reduce using rule 89 (empty -> .)
    RSQBRACKET      reduce using rule 89 (empty -> .)

    empty                          shift and go to state 107
    expcompcontinuo                shift and go to state 113

state 74

    (28) exp -> termino . masexp addQPPM
    (30) masexp -> . PLUS exp
    (31) masexp -> . MINUS exp
    (32) masexp -> . empty
    (89) empty -> .

    PLUS            shift and go to state 115
    MINUS           shift and go to state 114
    MORETHAN        reduce using rule 89 (empty -> .)
    LESSTHAN        reduce using rule 89 (empty -> .)
    NOTEQUAL        reduce using rule 89 (empty -> .)
    ISEQUALTO       reduce using rule 89 (empty -> .)
    MORETHANEQUAL   reduce using rule 89 (empty -> .)
    LESSTHANEQUAL   reduce using rule 89 (empty -> .)
    AND             reduce using rule 89 (empty -> .)
    OR              reduce using rule 89 (empty -> .)
    SEMICOLON       reduce using rule 89 (empty -> .)
    RPAREN          reduce using rule 89 (empty -> .)
    COMMA           reduce using rule 89 (empty -> .)
    RSQBRACKET      reduce using rule 89 (empty -> .)

    masexp                         shift and go to state 116
    empty                          shift and go to state 117

state 75

    (81) varcte -> ctestring .

    TIMES           reduce using rule 81 (varcte -> ctestring .)
    DIVIDE          reduce using rule 81 (varcte -> ctestring .)
    PLUS            reduce using rule 81 (varcte -> ctestring .)
    MINUS           reduce using rule 81 (varcte -> ctestring .)
    MORETHAN        reduce using rule 81 (varcte -> ctestring .)
    LESSTHAN        reduce using rule 81 (varcte -> ctestring .)
    NOTEQUAL        reduce using rule 81 (varcte -> ctestring .)
    ISEQUALTO       reduce using rule 81 (varcte -> ctestring .)
    MORETHANEQUAL   reduce using rule 81 (varcte -> ctestring .)
    LESSTHANEQUAL   reduce using rule 81 (varcte -> ctestring .)
    AND             reduce using rule 81 (varcte -> ctestring .)
    OR              reduce using rule 81 (varcte -> ctestring .)
    RPAREN          reduce using rule 81 (varcte -> ctestring .)
    SEMICOLON       reduce using rule 81 (varcte -> ctestring .)
    COMMA           reduce using rule 81 (varcte -> ctestring .)
    RSQBRACKET      reduce using rule 81 (varcte -> ctestring .)


state 76

    (83) cteint -> CTEINT .

    TIMES           reduce using rule 83 (cteint -> CTEINT .)
    DIVIDE          reduce using rule 83 (cteint -> CTEINT .)
    PLUS            reduce using rule 83 (cteint -> CTEINT .)
    MINUS           reduce using rule 83 (cteint -> CTEINT .)
    MORETHAN        reduce using rule 83 (cteint -> CTEINT .)
    LESSTHAN        reduce using rule 83 (cteint -> CTEINT .)
    NOTEQUAL        reduce using rule 83 (cteint -> CTEINT .)
    ISEQUALTO       reduce using rule 83 (cteint -> CTEINT .)
    MORETHANEQUAL   reduce using rule 83 (cteint -> CTEINT .)
    LESSTHANEQUAL   reduce using rule 83 (cteint -> CTEINT .)
    AND             reduce using rule 83 (cteint -> CTEINT .)
    OR              reduce using rule 83 (cteint -> CTEINT .)
    COMMA           reduce using rule 83 (cteint -> CTEINT .)
    RPAREN          reduce using rule 83 (cteint -> CTEINT .)
    SEMICOLON       reduce using rule 83 (cteint -> CTEINT .)
    RSQBRACKET      reduce using rule 83 (cteint -> CTEINT .)


state 77

    (88) ctebool -> FALSE .

    TIMES           reduce using rule 88 (ctebool -> FALSE .)
    DIVIDE          reduce using rule 88 (ctebool -> FALSE .)
    PLUS            reduce using rule 88 (ctebool -> FALSE .)
    MINUS           reduce using rule 88 (ctebool -> FALSE .)
    MORETHAN        reduce using rule 88 (ctebool -> FALSE .)
    LESSTHAN        reduce using rule 88 (ctebool -> FALSE .)
    NOTEQUAL        reduce using rule 88 (ctebool -> FALSE .)
    ISEQUALTO       reduce using rule 88 (ctebool -> FALSE .)
    MORETHANEQUAL   reduce using rule 88 (ctebool -> FALSE .)
    LESSTHANEQUAL   reduce using rule 88 (ctebool -> FALSE .)
    AND             reduce using rule 88 (ctebool -> FALSE .)
    OR              reduce using rule 88 (ctebool -> FALSE .)
    SEMICOLON       reduce using rule 88 (ctebool -> FALSE .)
    RPAREN          reduce using rule 88 (ctebool -> FALSE .)
    COMMA           reduce using rule 88 (ctebool -> FALSE .)
    RSQBRACKET      reduce using rule 88 (ctebool -> FALSE .)


state 78

    (80) varcte -> ctechar .

    TIMES           reduce using rule 80 (varcte -> ctechar .)
    DIVIDE          reduce using rule 80 (varcte -> ctechar .)
    PLUS            reduce using rule 80 (varcte -> ctechar .)
    MINUS           reduce using rule 80 (varcte -> ctechar .)
    MORETHAN        reduce using rule 80 (varcte -> ctechar .)
    LESSTHAN        reduce using rule 80 (varcte -> ctechar .)
    NOTEQUAL        reduce using rule 80 (varcte -> ctechar .)
    ISEQUALTO       reduce using rule 80 (varcte -> ctechar .)
    MORETHANEQUAL   reduce using rule 80 (varcte -> ctechar .)
    LESSTHANEQUAL   reduce using rule 80 (varcte -> ctechar .)
    AND             reduce using rule 80 (varcte -> ctechar .)
    OR              reduce using rule 80 (varcte -> ctechar .)
    RPAREN          reduce using rule 80 (varcte -> ctechar .)
    SEMICOLON       reduce using rule 80 (varcte -> ctechar .)
    COMMA           reduce using rule 80 (varcte -> ctechar .)
    RSQBRACKET      reduce using rule 80 (varcte -> ctechar .)


state 79

    (21) factor -> varcte .

    TIMES           reduce using rule 21 (factor -> varcte .)
    DIVIDE          reduce using rule 21 (factor -> varcte .)
    PLUS            reduce using rule 21 (factor -> varcte .)
    MINUS           reduce using rule 21 (factor -> varcte .)
    AND             reduce using rule 21 (factor -> varcte .)
    OR              reduce using rule 21 (factor -> varcte .)
    SEMICOLON       reduce using rule 21 (factor -> varcte .)
    RPAREN          reduce using rule 21 (factor -> varcte .)
    COMMA           reduce using rule 21 (factor -> varcte .)
    RSQBRACKET      reduce using rule 21 (factor -> varcte .)
    MORETHAN        reduce using rule 21 (factor -> varcte .)
    LESSTHAN        reduce using rule 21 (factor -> varcte .)
    NOTEQUAL        reduce using rule 21 (factor -> varcte .)
    ISEQUALTO       reduce using rule 21 (factor -> varcte .)
    MORETHANEQUAL   reduce using rule 21 (factor -> varcte .)
    LESSTHANEQUAL   reduce using rule 21 (factor -> varcte .)


state 80

    (79) varcte -> ctefloat .

    TIMES           reduce using rule 79 (varcte -> ctefloat .)
    DIVIDE          reduce using rule 79 (varcte -> ctefloat .)
    PLUS            reduce using rule 79 (varcte -> ctefloat .)
    MINUS           reduce using rule 79 (varcte -> ctefloat .)
    MORETHAN        reduce using rule 79 (varcte -> ctefloat .)
    LESSTHAN        reduce using rule 79 (varcte -> ctefloat .)
    NOTEQUAL        reduce using rule 79 (varcte -> ctefloat .)
    ISEQUALTO       reduce using rule 79 (varcte -> ctefloat .)
    MORETHANEQUAL   reduce using rule 79 (varcte -> ctefloat .)
    LESSTHANEQUAL   reduce using rule 79 (varcte -> ctefloat .)
    AND             reduce using rule 79 (varcte -> ctefloat .)
    OR              reduce using rule 79 (varcte -> ctefloat .)
    RPAREN          reduce using rule 79 (varcte -> ctefloat .)
    SEMICOLON       reduce using rule 79 (varcte -> ctefloat .)
    COMMA           reduce using rule 79 (varcte -> ctefloat .)
    RSQBRACKET      reduce using rule 79 (varcte -> ctefloat .)


state 81

    (84) ctefloat -> CTEFLOAT .

    TIMES           reduce using rule 84 (ctefloat -> CTEFLOAT .)
    DIVIDE          reduce using rule 84 (ctefloat -> CTEFLOAT .)
    PLUS            reduce using rule 84 (ctefloat -> CTEFLOAT .)
    MINUS           reduce using rule 84 (ctefloat -> CTEFLOAT .)
    MORETHAN        reduce using rule 84 (ctefloat -> CTEFLOAT .)
    LESSTHAN        reduce using rule 84 (ctefloat -> CTEFLOAT .)
    NOTEQUAL        reduce using rule 84 (ctefloat -> CTEFLOAT .)
    ISEQUALTO       reduce using rule 84 (ctefloat -> CTEFLOAT .)
    MORETHANEQUAL   reduce using rule 84 (ctefloat -> CTEFLOAT .)
    LESSTHANEQUAL   reduce using rule 84 (ctefloat -> CTEFLOAT .)
    AND             reduce using rule 84 (ctefloat -> CTEFLOAT .)
    OR              reduce using rule 84 (ctefloat -> CTEFLOAT .)
    SEMICOLON       reduce using rule 84 (ctefloat -> CTEFLOAT .)
    RPAREN          reduce using rule 84 (ctefloat -> CTEFLOAT .)
    COMMA           reduce using rule 84 (ctefloat -> CTEFLOAT .)
    RSQBRACKET      reduce using rule 84 (ctefloat -> CTEFLOAT .)


state 82

    (82) varcte -> ctebool .

    TIMES           reduce using rule 82 (varcte -> ctebool .)
    DIVIDE          reduce using rule 82 (varcte -> ctebool .)
    PLUS            reduce using rule 82 (varcte -> ctebool .)
    MINUS           reduce using rule 82 (varcte -> ctebool .)
    MORETHAN        reduce using rule 82 (varcte -> ctebool .)
    LESSTHAN        reduce using rule 82 (varcte -> ctebool .)
    NOTEQUAL        reduce using rule 82 (varcte -> ctebool .)
    ISEQUALTO       reduce using rule 82 (varcte -> ctebool .)
    MORETHANEQUAL   reduce using rule 82 (varcte -> ctebool .)
    LESSTHANEQUAL   reduce using rule 82 (varcte -> ctebool .)
    AND             reduce using rule 82 (varcte -> ctebool .)
    OR              reduce using rule 82 (varcte -> ctebool .)
    RPAREN          reduce using rule 82 (varcte -> ctebool .)
    SEMICOLON       reduce using rule 82 (varcte -> ctebool .)
    COMMA           reduce using rule 82 (varcte -> ctebool .)
    RSQBRACKET      reduce using rule 82 (varcte -> ctebool .)


state 83

    (86) ctestring -> CTESTRING .

    TIMES           reduce using rule 86 (ctestring -> CTESTRING .)
    DIVIDE          reduce using rule 86 (ctestring -> CTESTRING .)
    PLUS            reduce using rule 86 (ctestring -> CTESTRING .)
    MINUS           reduce using rule 86 (ctestring -> CTESTRING .)
    AND             reduce using rule 86 (ctestring -> CTESTRING .)
    OR              reduce using rule 86 (ctestring -> CTESTRING .)
    SEMICOLON       reduce using rule 86 (ctestring -> CTESTRING .)
    RPAREN          reduce using rule 86 (ctestring -> CTESTRING .)
    COMMA           reduce using rule 86 (ctestring -> CTESTRING .)
    RSQBRACKET      reduce using rule 86 (ctestring -> CTESTRING .)
    MORETHAN        reduce using rule 86 (ctestring -> CTESTRING .)
    LESSTHAN        reduce using rule 86 (ctestring -> CTESTRING .)
    NOTEQUAL        reduce using rule 86 (ctestring -> CTESTRING .)
    ISEQUALTO       reduce using rule 86 (ctestring -> CTESTRING .)
    MORETHANEQUAL   reduce using rule 86 (ctestring -> CTESTRING .)
    LESSTHANEQUAL   reduce using rule 86 (ctestring -> CTESTRING .)


state 84

    (22) factor -> varid .

    TIMES           reduce using rule 22 (factor -> varid .)
    DIVIDE          reduce using rule 22 (factor -> varid .)
    PLUS            reduce using rule 22 (factor -> varid .)
    MINUS           reduce using rule 22 (factor -> varid .)
    AND             reduce using rule 22 (factor -> varid .)
    OR              reduce using rule 22 (factor -> varid .)
    SEMICOLON       reduce using rule 22 (factor -> varid .)
    RPAREN          reduce using rule 22 (factor -> varid .)
    COMMA           reduce using rule 22 (factor -> varid .)
    RSQBRACKET      reduce using rule 22 (factor -> varid .)
    MORETHAN        reduce using rule 22 (factor -> varid .)
    LESSTHAN        reduce using rule 22 (factor -> varid .)
    NOTEQUAL        reduce using rule 22 (factor -> varid .)
    ISEQUALTO       reduce using rule 22 (factor -> varid .)
    MORETHANEQUAL   reduce using rule 22 (factor -> varid .)
    LESSTHANEQUAL   reduce using rule 22 (factor -> varid .)


state 85

    (19) asignacion -> ID LSQBRACKET RSQBRACKET . EQUALS LSQBRACKET expresion comaexpresion RSQBRACKET SEMICOLON

    EQUALS          shift and go to state 118


state 86

    (4) condicion -> IF LPAREN expresion . RPAREN gotoF bloque masbloque

    RPAREN          shift and go to state 119


state 87

    (10) ciclo -> while LPAREN expresion . RPAREN gotoF bloque goto

    RPAREN          shift and go to state 120


state 88

    (14) listaprint -> expresion . masprint
    (16) masprint -> . COMMA listaprint
    (17) masprint -> . empty
    (89) empty -> .

    COMMA           shift and go to state 122
    RPAREN          reduce using rule 89 (empty -> .)

    masprint                       shift and go to state 121
    empty                          shift and go to state 123

state 89

    (15) listaprint -> ctestring . masprint
    (81) varcte -> ctestring .
    (16) masprint -> . COMMA listaprint
    (17) masprint -> . empty
    (89) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for RPAREN resolved using rule 81 (varcte -> ctestring .)
    TIMES           reduce using rule 81 (varcte -> ctestring .)
    DIVIDE          reduce using rule 81 (varcte -> ctestring .)
    PLUS            reduce using rule 81 (varcte -> ctestring .)
    MINUS           reduce using rule 81 (varcte -> ctestring .)
    MORETHAN        reduce using rule 81 (varcte -> ctestring .)
    LESSTHAN        reduce using rule 81 (varcte -> ctestring .)
    NOTEQUAL        reduce using rule 81 (varcte -> ctestring .)
    ISEQUALTO       reduce using rule 81 (varcte -> ctestring .)
    MORETHANEQUAL   reduce using rule 81 (varcte -> ctestring .)
    LESSTHANEQUAL   reduce using rule 81 (varcte -> ctestring .)
    AND             reduce using rule 81 (varcte -> ctestring .)
    OR              reduce using rule 81 (varcte -> ctestring .)
    RPAREN          reduce using rule 81 (varcte -> ctestring .)
    COMMA           shift and go to state 122

  ! COMMA           [ reduce using rule 81 (varcte -> ctestring .) ]
  ! RPAREN          [ reduce using rule 89 (empty -> .) ]

    masprint                       shift and go to state 124
    empty                          shift and go to state 123

state 90

    (12) escritura -> print LPAREN listaprint . RPAREN SEMICOLON

    RPAREN          shift and go to state 125


state 91

    (71) masargs -> COMMA args .

    RPAREN          reduce using rule 71 (masargs -> COMMA args .)


state 92

    (66) funcs -> FUNCTION funcaux LPAREN args RPAREN bloque funcs .

    MAIN            reduce using rule 66 (funcs -> FUNCTION funcaux LPAREN args RPAREN bloque funcs .)


state 93

    (18) asignacion -> ID EQUALS expresion SEMICOLON .

    ID              reduce using rule 18 (asignacion -> ID EQUALS expresion SEMICOLON .)
    IF              reduce using rule 18 (asignacion -> ID EQUALS expresion SEMICOLON .)
    VAR             reduce using rule 18 (asignacion -> ID EQUALS expresion SEMICOLON .)
    WHILE           reduce using rule 18 (asignacion -> ID EQUALS expresion SEMICOLON .)
    PRINT           reduce using rule 18 (asignacion -> ID EQUALS expresion SEMICOLON .)
    RBRACKET        reduce using rule 18 (asignacion -> ID EQUALS expresion SEMICOLON .)


state 94

    (39) masexpresion -> empty .

    SEMICOLON       reduce using rule 39 (masexpresion -> empty .)
    RPAREN          reduce using rule 39 (masexpresion -> empty .)
    COMMA           reduce using rule 39 (masexpresion -> empty .)
    RSQBRACKET      reduce using rule 39 (masexpresion -> empty .)


state 95

    (37) masexpresion -> AND . expresion
    (35) expresion -> . expcomp masexpresion addQPAO
    (45) expcomp -> . exp expcompcontinuo addQPComp
    (28) exp -> . termino masexp addQPPM
    (40) termino -> . factor masterminos addQTD
    (20) factor -> . leftparen expresion rightparen
    (21) factor -> . varcte
    (22) factor -> . varid
    (23) leftparen -> . LPAREN
    (78) varcte -> . cteint
    (79) varcte -> . ctefloat
    (80) varcte -> . ctechar
    (81) varcte -> . ctestring
    (82) varcte -> . ctebool
    (25) varid -> . ID arr
    (83) cteint -> . CTEINT
    (84) ctefloat -> . CTEFLOAT
    (85) ctechar -> . CTECHAR
    (86) ctestring -> . CTESTRING
    (87) ctebool -> . TRUE
    (88) ctebool -> . FALSE

    LPAREN          shift and go to state 70
    ID              shift and go to state 66
    CTEINT          shift and go to state 76
    CTEFLOAT        shift and go to state 81
    CTECHAR         shift and go to state 72
    CTESTRING       shift and go to state 83
    TRUE            shift and go to state 67
    FALSE           shift and go to state 77

    expresion                      shift and go to state 126
    factor                         shift and go to state 68
    ctebool                        shift and go to state 82
    ctestring                      shift and go to state 75
    leftparen                      shift and go to state 71
    exp                            shift and go to state 73
    termino                        shift and go to state 74
    expcomp                        shift and go to state 65
    varid                          shift and go to state 84
    varcte                         shift and go to state 79
    ctefloat                       shift and go to state 80
    ctechar                        shift and go to state 78
    cteint                         shift and go to state 69

state 96

    (38) masexpresion -> OR . expresion
    (35) expresion -> . expcomp masexpresion addQPAO
    (45) expcomp -> . exp expcompcontinuo addQPComp
    (28) exp -> . termino masexp addQPPM
    (40) termino -> . factor masterminos addQTD
    (20) factor -> . leftparen expresion rightparen
    (21) factor -> . varcte
    (22) factor -> . varid
    (23) leftparen -> . LPAREN
    (78) varcte -> . cteint
    (79) varcte -> . ctefloat
    (80) varcte -> . ctechar
    (81) varcte -> . ctestring
    (82) varcte -> . ctebool
    (25) varid -> . ID arr
    (83) cteint -> . CTEINT
    (84) ctefloat -> . CTEFLOAT
    (85) ctechar -> . CTECHAR
    (86) ctestring -> . CTESTRING
    (87) ctebool -> . TRUE
    (88) ctebool -> . FALSE

    LPAREN          shift and go to state 70
    ID              shift and go to state 66
    CTEINT          shift and go to state 76
    CTEFLOAT        shift and go to state 81
    CTECHAR         shift and go to state 72
    CTESTRING       shift and go to state 83
    TRUE            shift and go to state 67
    FALSE           shift and go to state 77

    expresion                      shift and go to state 127
    factor                         shift and go to state 68
    ctebool                        shift and go to state 82
    ctestring                      shift and go to state 75
    leftparen                      shift and go to state 71
    exp                            shift and go to state 73
    termino                        shift and go to state 74
    expcomp                        shift and go to state 65
    varid                          shift and go to state 84
    varcte                         shift and go to state 79
    ctefloat                       shift and go to state 80
    ctechar                        shift and go to state 78
    cteint                         shift and go to state 69

state 97

    (35) expresion -> expcomp masexpresion . addQPAO
    (36) addQPAO -> . empty
    (89) empty -> .

    SEMICOLON       reduce using rule 89 (empty -> .)
    RPAREN          reduce using rule 89 (empty -> .)
    COMMA           reduce using rule 89 (empty -> .)
    RSQBRACKET      reduce using rule 89 (empty -> .)

    addQPAO                        shift and go to state 128
    empty                          shift and go to state 129

state 98

    (27) arr -> empty .

    TIMES           reduce using rule 27 (arr -> empty .)
    DIVIDE          reduce using rule 27 (arr -> empty .)
    PLUS            reduce using rule 27 (arr -> empty .)
    MINUS           reduce using rule 27 (arr -> empty .)
    MORETHAN        reduce using rule 27 (arr -> empty .)
    LESSTHAN        reduce using rule 27 (arr -> empty .)
    NOTEQUAL        reduce using rule 27 (arr -> empty .)
    ISEQUALTO       reduce using rule 27 (arr -> empty .)
    MORETHANEQUAL   reduce using rule 27 (arr -> empty .)
    LESSTHANEQUAL   reduce using rule 27 (arr -> empty .)
    AND             reduce using rule 27 (arr -> empty .)
    OR              reduce using rule 27 (arr -> empty .)
    SEMICOLON       reduce using rule 27 (arr -> empty .)
    RPAREN          reduce using rule 27 (arr -> empty .)
    COMMA           reduce using rule 27 (arr -> empty .)
    RSQBRACKET      reduce using rule 27 (arr -> empty .)


state 99

    (25) varid -> ID arr .

    TIMES           reduce using rule 25 (varid -> ID arr .)
    DIVIDE          reduce using rule 25 (varid -> ID arr .)
    PLUS            reduce using rule 25 (varid -> ID arr .)
    MINUS           reduce using rule 25 (varid -> ID arr .)
    MORETHAN        reduce using rule 25 (varid -> ID arr .)
    LESSTHAN        reduce using rule 25 (varid -> ID arr .)
    NOTEQUAL        reduce using rule 25 (varid -> ID arr .)
    ISEQUALTO       reduce using rule 25 (varid -> ID arr .)
    MORETHANEQUAL   reduce using rule 25 (varid -> ID arr .)
    LESSTHANEQUAL   reduce using rule 25 (varid -> ID arr .)
    AND             reduce using rule 25 (varid -> ID arr .)
    OR              reduce using rule 25 (varid -> ID arr .)
    SEMICOLON       reduce using rule 25 (varid -> ID arr .)
    RPAREN          reduce using rule 25 (varid -> ID arr .)
    COMMA           reduce using rule 25 (varid -> ID arr .)
    RSQBRACKET      reduce using rule 25 (varid -> ID arr .)


state 100

    (26) arr -> LSQBRACKET . RSQBRACKET

    RSQBRACKET      shift and go to state 130


state 101

    (40) termino -> factor masterminos . addQTD
    (41) addQTD -> . empty
    (89) empty -> .

    PLUS            reduce using rule 89 (empty -> .)
    MINUS           reduce using rule 89 (empty -> .)
    MORETHAN        reduce using rule 89 (empty -> .)
    LESSTHAN        reduce using rule 89 (empty -> .)
    NOTEQUAL        reduce using rule 89 (empty -> .)
    ISEQUALTO       reduce using rule 89 (empty -> .)
    MORETHANEQUAL   reduce using rule 89 (empty -> .)
    LESSTHANEQUAL   reduce using rule 89 (empty -> .)
    AND             reduce using rule 89 (empty -> .)
    OR              reduce using rule 89 (empty -> .)
    SEMICOLON       reduce using rule 89 (empty -> .)
    RPAREN          reduce using rule 89 (empty -> .)
    COMMA           reduce using rule 89 (empty -> .)
    RSQBRACKET      reduce using rule 89 (empty -> .)

    empty                          shift and go to state 131
    addQTD                         shift and go to state 132

state 102

    (44) masterminos -> empty .

    PLUS            reduce using rule 44 (masterminos -> empty .)
    MINUS           reduce using rule 44 (masterminos -> empty .)
    MORETHAN        reduce using rule 44 (masterminos -> empty .)
    LESSTHAN        reduce using rule 44 (masterminos -> empty .)
    NOTEQUAL        reduce using rule 44 (masterminos -> empty .)
    ISEQUALTO       reduce using rule 44 (masterminos -> empty .)
    MORETHANEQUAL   reduce using rule 44 (masterminos -> empty .)
    LESSTHANEQUAL   reduce using rule 44 (masterminos -> empty .)
    AND             reduce using rule 44 (masterminos -> empty .)
    OR              reduce using rule 44 (masterminos -> empty .)
    SEMICOLON       reduce using rule 44 (masterminos -> empty .)
    RPAREN          reduce using rule 44 (masterminos -> empty .)
    COMMA           reduce using rule 44 (masterminos -> empty .)
    RSQBRACKET      reduce using rule 44 (masterminos -> empty .)


state 103

    (43) masterminos -> DIVIDE . termino
    (40) termino -> . factor masterminos addQTD
    (20) factor -> . leftparen expresion rightparen
    (21) factor -> . varcte
    (22) factor -> . varid
    (23) leftparen -> . LPAREN
    (78) varcte -> . cteint
    (79) varcte -> . ctefloat
    (80) varcte -> . ctechar
    (81) varcte -> . ctestring
    (82) varcte -> . ctebool
    (25) varid -> . ID arr
    (83) cteint -> . CTEINT
    (84) ctefloat -> . CTEFLOAT
    (85) ctechar -> . CTECHAR
    (86) ctestring -> . CTESTRING
    (87) ctebool -> . TRUE
    (88) ctebool -> . FALSE

    LPAREN          shift and go to state 70
    ID              shift and go to state 66
    CTEINT          shift and go to state 76
    CTEFLOAT        shift and go to state 81
    CTECHAR         shift and go to state 72
    CTESTRING       shift and go to state 83
    TRUE            shift and go to state 67
    FALSE           shift and go to state 77

    ctechar                        shift and go to state 78
    varcte                         shift and go to state 79
    ctestring                      shift and go to state 75
    cteint                         shift and go to state 69
    factor                         shift and go to state 68
    ctebool                        shift and go to state 82
    leftparen                      shift and go to state 71
    ctefloat                       shift and go to state 80
    termino                        shift and go to state 133
    varid                          shift and go to state 84

state 104

    (42) masterminos -> TIMES . termino
    (40) termino -> . factor masterminos addQTD
    (20) factor -> . leftparen expresion rightparen
    (21) factor -> . varcte
    (22) factor -> . varid
    (23) leftparen -> . LPAREN
    (78) varcte -> . cteint
    (79) varcte -> . ctefloat
    (80) varcte -> . ctechar
    (81) varcte -> . ctestring
    (82) varcte -> . ctebool
    (25) varid -> . ID arr
    (83) cteint -> . CTEINT
    (84) ctefloat -> . CTEFLOAT
    (85) ctechar -> . CTECHAR
    (86) ctestring -> . CTESTRING
    (87) ctebool -> . TRUE
    (88) ctebool -> . FALSE

    LPAREN          shift and go to state 70
    ID              shift and go to state 66
    CTEINT          shift and go to state 76
    CTEFLOAT        shift and go to state 81
    CTECHAR         shift and go to state 72
    CTESTRING       shift and go to state 83
    TRUE            shift and go to state 67
    FALSE           shift and go to state 77

    ctechar                        shift and go to state 78
    varcte                         shift and go to state 79
    ctestring                      shift and go to state 75
    cteint                         shift and go to state 69
    factor                         shift and go to state 68
    ctebool                        shift and go to state 82
    leftparen                      shift and go to state 71
    ctefloat                       shift and go to state 80
    termino                        shift and go to state 134
    varid                          shift and go to state 84

state 105

    (20) factor -> leftparen expresion . rightparen
    (24) rightparen -> . RPAREN

    RPAREN          shift and go to state 135

    rightparen                     shift and go to state 136

state 106

    (50) expcompcontinuo -> ISEQUALTO . exp
    (28) exp -> . termino masexp addQPPM
    (40) termino -> . factor masterminos addQTD
    (20) factor -> . leftparen expresion rightparen
    (21) factor -> . varcte
    (22) factor -> . varid
    (23) leftparen -> . LPAREN
    (78) varcte -> . cteint
    (79) varcte -> . ctefloat
    (80) varcte -> . ctechar
    (81) varcte -> . ctestring
    (82) varcte -> . ctebool
    (25) varid -> . ID arr
    (83) cteint -> . CTEINT
    (84) ctefloat -> . CTEFLOAT
    (85) ctechar -> . CTECHAR
    (86) ctestring -> . CTESTRING
    (87) ctebool -> . TRUE
    (88) ctebool -> . FALSE

    LPAREN          shift and go to state 70
    ID              shift and go to state 66
    CTEINT          shift and go to state 76
    CTEFLOAT        shift and go to state 81
    CTECHAR         shift and go to state 72
    CTESTRING       shift and go to state 83
    TRUE            shift and go to state 67
    FALSE           shift and go to state 77

    ctechar                        shift and go to state 78
    varcte                         shift and go to state 79
    ctestring                      shift and go to state 75
    cteint                         shift and go to state 69
    factor                         shift and go to state 68
    ctebool                        shift and go to state 82
    leftparen                      shift and go to state 71
    exp                            shift and go to state 137
    ctefloat                       shift and go to state 80
    termino                        shift and go to state 74
    varid                          shift and go to state 84

state 107

    (53) expcompcontinuo -> empty .

    AND             reduce using rule 53 (expcompcontinuo -> empty .)
    OR              reduce using rule 53 (expcompcontinuo -> empty .)
    SEMICOLON       reduce using rule 53 (expcompcontinuo -> empty .)
    RPAREN          reduce using rule 53 (expcompcontinuo -> empty .)
    COMMA           reduce using rule 53 (expcompcontinuo -> empty .)
    RSQBRACKET      reduce using rule 53 (expcompcontinuo -> empty .)


state 108

    (48) expcompcontinuo -> LESSTHAN . exp
    (28) exp -> . termino masexp addQPPM
    (40) termino -> . factor masterminos addQTD
    (20) factor -> . leftparen expresion rightparen
    (21) factor -> . varcte
    (22) factor -> . varid
    (23) leftparen -> . LPAREN
    (78) varcte -> . cteint
    (79) varcte -> . ctefloat
    (80) varcte -> . ctechar
    (81) varcte -> . ctestring
    (82) varcte -> . ctebool
    (25) varid -> . ID arr
    (83) cteint -> . CTEINT
    (84) ctefloat -> . CTEFLOAT
    (85) ctechar -> . CTECHAR
    (86) ctestring -> . CTESTRING
    (87) ctebool -> . TRUE
    (88) ctebool -> . FALSE

    LPAREN          shift and go to state 70
    ID              shift and go to state 66
    CTEINT          shift and go to state 76
    CTEFLOAT        shift and go to state 81
    CTECHAR         shift and go to state 72
    CTESTRING       shift and go to state 83
    TRUE            shift and go to state 67
    FALSE           shift and go to state 77

    ctechar                        shift and go to state 78
    varcte                         shift and go to state 79
    ctestring                      shift and go to state 75
    cteint                         shift and go to state 69
    factor                         shift and go to state 68
    ctebool                        shift and go to state 82
    leftparen                      shift and go to state 71
    exp                            shift and go to state 138
    ctefloat                       shift and go to state 80
    termino                        shift and go to state 74
    varid                          shift and go to state 84

state 109

    (52) expcompcontinuo -> LESSTHANEQUAL . exp
    (28) exp -> . termino masexp addQPPM
    (40) termino -> . factor masterminos addQTD
    (20) factor -> . leftparen expresion rightparen
    (21) factor -> . varcte
    (22) factor -> . varid
    (23) leftparen -> . LPAREN
    (78) varcte -> . cteint
    (79) varcte -> . ctefloat
    (80) varcte -> . ctechar
    (81) varcte -> . ctestring
    (82) varcte -> . ctebool
    (25) varid -> . ID arr
    (83) cteint -> . CTEINT
    (84) ctefloat -> . CTEFLOAT
    (85) ctechar -> . CTECHAR
    (86) ctestring -> . CTESTRING
    (87) ctebool -> . TRUE
    (88) ctebool -> . FALSE

    LPAREN          shift and go to state 70
    ID              shift and go to state 66
    CTEINT          shift and go to state 76
    CTEFLOAT        shift and go to state 81
    CTECHAR         shift and go to state 72
    CTESTRING       shift and go to state 83
    TRUE            shift and go to state 67
    FALSE           shift and go to state 77

    ctechar                        shift and go to state 78
    varcte                         shift and go to state 79
    ctestring                      shift and go to state 75
    cteint                         shift and go to state 69
    factor                         shift and go to state 68
    ctebool                        shift and go to state 82
    leftparen                      shift and go to state 71
    exp                            shift and go to state 139
    ctefloat                       shift and go to state 80
    termino                        shift and go to state 74
    varid                          shift and go to state 84

state 110

    (49) expcompcontinuo -> NOTEQUAL . exp
    (28) exp -> . termino masexp addQPPM
    (40) termino -> . factor masterminos addQTD
    (20) factor -> . leftparen expresion rightparen
    (21) factor -> . varcte
    (22) factor -> . varid
    (23) leftparen -> . LPAREN
    (78) varcte -> . cteint
    (79) varcte -> . ctefloat
    (80) varcte -> . ctechar
    (81) varcte -> . ctestring
    (82) varcte -> . ctebool
    (25) varid -> . ID arr
    (83) cteint -> . CTEINT
    (84) ctefloat -> . CTEFLOAT
    (85) ctechar -> . CTECHAR
    (86) ctestring -> . CTESTRING
    (87) ctebool -> . TRUE
    (88) ctebool -> . FALSE

    LPAREN          shift and go to state 70
    ID              shift and go to state 66
    CTEINT          shift and go to state 76
    CTEFLOAT        shift and go to state 81
    CTECHAR         shift and go to state 72
    CTESTRING       shift and go to state 83
    TRUE            shift and go to state 67
    FALSE           shift and go to state 77

    ctechar                        shift and go to state 78
    varcte                         shift and go to state 79
    ctestring                      shift and go to state 75
    cteint                         shift and go to state 69
    factor                         shift and go to state 68
    ctebool                        shift and go to state 82
    leftparen                      shift and go to state 71
    exp                            shift and go to state 140
    ctefloat                       shift and go to state 80
    termino                        shift and go to state 74
    varid                          shift and go to state 84

state 111

    (51) expcompcontinuo -> MORETHANEQUAL . exp
    (28) exp -> . termino masexp addQPPM
    (40) termino -> . factor masterminos addQTD
    (20) factor -> . leftparen expresion rightparen
    (21) factor -> . varcte
    (22) factor -> . varid
    (23) leftparen -> . LPAREN
    (78) varcte -> . cteint
    (79) varcte -> . ctefloat
    (80) varcte -> . ctechar
    (81) varcte -> . ctestring
    (82) varcte -> . ctebool
    (25) varid -> . ID arr
    (83) cteint -> . CTEINT
    (84) ctefloat -> . CTEFLOAT
    (85) ctechar -> . CTECHAR
    (86) ctestring -> . CTESTRING
    (87) ctebool -> . TRUE
    (88) ctebool -> . FALSE

    LPAREN          shift and go to state 70
    ID              shift and go to state 66
    CTEINT          shift and go to state 76
    CTEFLOAT        shift and go to state 81
    CTECHAR         shift and go to state 72
    CTESTRING       shift and go to state 83
    TRUE            shift and go to state 67
    FALSE           shift and go to state 77

    ctechar                        shift and go to state 78
    varcte                         shift and go to state 79
    ctestring                      shift and go to state 75
    cteint                         shift and go to state 69
    factor                         shift and go to state 68
    ctebool                        shift and go to state 82
    leftparen                      shift and go to state 71
    exp                            shift and go to state 141
    ctefloat                       shift and go to state 80
    termino                        shift and go to state 74
    varid                          shift and go to state 84

state 112

    (47) expcompcontinuo -> MORETHAN . exp
    (28) exp -> . termino masexp addQPPM
    (40) termino -> . factor masterminos addQTD
    (20) factor -> . leftparen expresion rightparen
    (21) factor -> . varcte
    (22) factor -> . varid
    (23) leftparen -> . LPAREN
    (78) varcte -> . cteint
    (79) varcte -> . ctefloat
    (80) varcte -> . ctechar
    (81) varcte -> . ctestring
    (82) varcte -> . ctebool
    (25) varid -> . ID arr
    (83) cteint -> . CTEINT
    (84) ctefloat -> . CTEFLOAT
    (85) ctechar -> . CTECHAR
    (86) ctestring -> . CTESTRING
    (87) ctebool -> . TRUE
    (88) ctebool -> . FALSE

    LPAREN          shift and go to state 70
    ID              shift and go to state 66
    CTEINT          shift and go to state 76
    CTEFLOAT        shift and go to state 81
    CTECHAR         shift and go to state 72
    CTESTRING       shift and go to state 83
    TRUE            shift and go to state 67
    FALSE           shift and go to state 77

    ctechar                        shift and go to state 78
    varcte                         shift and go to state 79
    ctestring                      shift and go to state 75
    cteint                         shift and go to state 69
    factor                         shift and go to state 68
    ctebool                        shift and go to state 82
    leftparen                      shift and go to state 71
    exp                            shift and go to state 142
    ctefloat                       shift and go to state 80
    termino                        shift and go to state 74
    varid                          shift and go to state 84

state 113

    (45) expcomp -> exp expcompcontinuo . addQPComp
    (46) addQPComp -> . empty
    (89) empty -> .

    AND             reduce using rule 89 (empty -> .)
    OR              reduce using rule 89 (empty -> .)
    SEMICOLON       reduce using rule 89 (empty -> .)
    RPAREN          reduce using rule 89 (empty -> .)
    COMMA           reduce using rule 89 (empty -> .)
    RSQBRACKET      reduce using rule 89 (empty -> .)

    addQPComp                      shift and go to state 143
    empty                          shift and go to state 144

state 114

    (31) masexp -> MINUS . exp
    (28) exp -> . termino masexp addQPPM
    (40) termino -> . factor masterminos addQTD
    (20) factor -> . leftparen expresion rightparen
    (21) factor -> . varcte
    (22) factor -> . varid
    (23) leftparen -> . LPAREN
    (78) varcte -> . cteint
    (79) varcte -> . ctefloat
    (80) varcte -> . ctechar
    (81) varcte -> . ctestring
    (82) varcte -> . ctebool
    (25) varid -> . ID arr
    (83) cteint -> . CTEINT
    (84) ctefloat -> . CTEFLOAT
    (85) ctechar -> . CTECHAR
    (86) ctestring -> . CTESTRING
    (87) ctebool -> . TRUE
    (88) ctebool -> . FALSE

    LPAREN          shift and go to state 70
    ID              shift and go to state 66
    CTEINT          shift and go to state 76
    CTEFLOAT        shift and go to state 81
    CTECHAR         shift and go to state 72
    CTESTRING       shift and go to state 83
    TRUE            shift and go to state 67
    FALSE           shift and go to state 77

    ctechar                        shift and go to state 78
    varcte                         shift and go to state 79
    ctestring                      shift and go to state 75
    cteint                         shift and go to state 69
    factor                         shift and go to state 68
    ctebool                        shift and go to state 82
    leftparen                      shift and go to state 71
    exp                            shift and go to state 145
    ctefloat                       shift and go to state 80
    termino                        shift and go to state 74
    varid                          shift and go to state 84

state 115

    (30) masexp -> PLUS . exp
    (28) exp -> . termino masexp addQPPM
    (40) termino -> . factor masterminos addQTD
    (20) factor -> . leftparen expresion rightparen
    (21) factor -> . varcte
    (22) factor -> . varid
    (23) leftparen -> . LPAREN
    (78) varcte -> . cteint
    (79) varcte -> . ctefloat
    (80) varcte -> . ctechar
    (81) varcte -> . ctestring
    (82) varcte -> . ctebool
    (25) varid -> . ID arr
    (83) cteint -> . CTEINT
    (84) ctefloat -> . CTEFLOAT
    (85) ctechar -> . CTECHAR
    (86) ctestring -> . CTESTRING
    (87) ctebool -> . TRUE
    (88) ctebool -> . FALSE

    LPAREN          shift and go to state 70
    ID              shift and go to state 66
    CTEINT          shift and go to state 76
    CTEFLOAT        shift and go to state 81
    CTECHAR         shift and go to state 72
    CTESTRING       shift and go to state 83
    TRUE            shift and go to state 67
    FALSE           shift and go to state 77

    ctechar                        shift and go to state 78
    varcte                         shift and go to state 79
    ctestring                      shift and go to state 75
    cteint                         shift and go to state 69
    factor                         shift and go to state 68
    ctebool                        shift and go to state 82
    leftparen                      shift and go to state 71
    exp                            shift and go to state 146
    ctefloat                       shift and go to state 80
    termino                        shift and go to state 74
    varid                          shift and go to state 84

state 116

    (28) exp -> termino masexp . addQPPM
    (29) addQPPM -> . empty
    (89) empty -> .

    MORETHAN        reduce using rule 89 (empty -> .)
    LESSTHAN        reduce using rule 89 (empty -> .)
    NOTEQUAL        reduce using rule 89 (empty -> .)
    ISEQUALTO       reduce using rule 89 (empty -> .)
    MORETHANEQUAL   reduce using rule 89 (empty -> .)
    LESSTHANEQUAL   reduce using rule 89 (empty -> .)
    AND             reduce using rule 89 (empty -> .)
    OR              reduce using rule 89 (empty -> .)
    SEMICOLON       reduce using rule 89 (empty -> .)
    RPAREN          reduce using rule 89 (empty -> .)
    COMMA           reduce using rule 89 (empty -> .)
    RSQBRACKET      reduce using rule 89 (empty -> .)

    addQPPM                        shift and go to state 147
    empty                          shift and go to state 148

state 117

    (32) masexp -> empty .

    MORETHAN        reduce using rule 32 (masexp -> empty .)
    LESSTHAN        reduce using rule 32 (masexp -> empty .)
    NOTEQUAL        reduce using rule 32 (masexp -> empty .)
    ISEQUALTO       reduce using rule 32 (masexp -> empty .)
    MORETHANEQUAL   reduce using rule 32 (masexp -> empty .)
    LESSTHANEQUAL   reduce using rule 32 (masexp -> empty .)
    AND             reduce using rule 32 (masexp -> empty .)
    OR              reduce using rule 32 (masexp -> empty .)
    SEMICOLON       reduce using rule 32 (masexp -> empty .)
    RPAREN          reduce using rule 32 (masexp -> empty .)
    COMMA           reduce using rule 32 (masexp -> empty .)
    RSQBRACKET      reduce using rule 32 (masexp -> empty .)


state 118

    (19) asignacion -> ID LSQBRACKET RSQBRACKET EQUALS . LSQBRACKET expresion comaexpresion RSQBRACKET SEMICOLON

    LSQBRACKET      shift and go to state 149


state 119

    (4) condicion -> IF LPAREN expresion RPAREN . gotoF bloque masbloque
    (5) gotoF -> . empty
    (89) empty -> .

    LBRACKET        reduce using rule 89 (empty -> .)

    empty                          shift and go to state 150
    gotoF                          shift and go to state 151

state 120

    (10) ciclo -> while LPAREN expresion RPAREN . gotoF bloque goto
    (5) gotoF -> . empty
    (89) empty -> .

    LBRACKET        reduce using rule 89 (empty -> .)

    empty                          shift and go to state 150
    gotoF                          shift and go to state 152

state 121

    (14) listaprint -> expresion masprint .

    RPAREN          reduce using rule 14 (listaprint -> expresion masprint .)


state 122

    (16) masprint -> COMMA . listaprint
    (14) listaprint -> . expresion masprint
    (15) listaprint -> . ctestring masprint
    (35) expresion -> . expcomp masexpresion addQPAO
    (86) ctestring -> . CTESTRING
    (45) expcomp -> . exp expcompcontinuo addQPComp
    (28) exp -> . termino masexp addQPPM
    (40) termino -> . factor masterminos addQTD
    (20) factor -> . leftparen expresion rightparen
    (21) factor -> . varcte
    (22) factor -> . varid
    (23) leftparen -> . LPAREN
    (78) varcte -> . cteint
    (79) varcte -> . ctefloat
    (80) varcte -> . ctechar
    (81) varcte -> . ctestring
    (82) varcte -> . ctebool
    (25) varid -> . ID arr
    (83) cteint -> . CTEINT
    (84) ctefloat -> . CTEFLOAT
    (85) ctechar -> . CTECHAR
    (87) ctebool -> . TRUE
    (88) ctebool -> . FALSE

    CTESTRING       shift and go to state 83
    LPAREN          shift and go to state 70
    ID              shift and go to state 66
    CTEINT          shift and go to state 76
    CTEFLOAT        shift and go to state 81
    CTECHAR         shift and go to state 72
    TRUE            shift and go to state 67
    FALSE           shift and go to state 77

    expresion                      shift and go to state 88
    expcomp                        shift and go to state 65
    factor                         shift and go to state 68
    ctebool                        shift and go to state 82
    ctestring                      shift and go to state 89
    leftparen                      shift and go to state 71
    listaprint                     shift and go to state 153
    exp                            shift and go to state 73
    ctefloat                       shift and go to state 80
    termino                        shift and go to state 74
    ctechar                        shift and go to state 78
    varcte                         shift and go to state 79
    varid                          shift and go to state 84
    cteint                         shift and go to state 69

state 123

    (17) masprint -> empty .

    RPAREN          reduce using rule 17 (masprint -> empty .)


state 124

    (15) listaprint -> ctestring masprint .

    RPAREN          reduce using rule 15 (listaprint -> ctestring masprint .)


state 125

    (12) escritura -> print LPAREN listaprint RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 154


state 126

    (37) masexpresion -> AND expresion .

    SEMICOLON       reduce using rule 37 (masexpresion -> AND expresion .)
    RPAREN          reduce using rule 37 (masexpresion -> AND expresion .)
    COMMA           reduce using rule 37 (masexpresion -> AND expresion .)
    RSQBRACKET      reduce using rule 37 (masexpresion -> AND expresion .)


state 127

    (38) masexpresion -> OR expresion .

    SEMICOLON       reduce using rule 38 (masexpresion -> OR expresion .)
    RPAREN          reduce using rule 38 (masexpresion -> OR expresion .)
    COMMA           reduce using rule 38 (masexpresion -> OR expresion .)
    RSQBRACKET      reduce using rule 38 (masexpresion -> OR expresion .)


state 128

    (35) expresion -> expcomp masexpresion addQPAO .

    RPAREN          reduce using rule 35 (expresion -> expcomp masexpresion addQPAO .)
    SEMICOLON       reduce using rule 35 (expresion -> expcomp masexpresion addQPAO .)
    COMMA           reduce using rule 35 (expresion -> expcomp masexpresion addQPAO .)
    RSQBRACKET      reduce using rule 35 (expresion -> expcomp masexpresion addQPAO .)


state 129

    (36) addQPAO -> empty .

    SEMICOLON       reduce using rule 36 (addQPAO -> empty .)
    RPAREN          reduce using rule 36 (addQPAO -> empty .)
    COMMA           reduce using rule 36 (addQPAO -> empty .)
    RSQBRACKET      reduce using rule 36 (addQPAO -> empty .)


state 130

    (26) arr -> LSQBRACKET RSQBRACKET .

    TIMES           reduce using rule 26 (arr -> LSQBRACKET RSQBRACKET .)
    DIVIDE          reduce using rule 26 (arr -> LSQBRACKET RSQBRACKET .)
    PLUS            reduce using rule 26 (arr -> LSQBRACKET RSQBRACKET .)
    MINUS           reduce using rule 26 (arr -> LSQBRACKET RSQBRACKET .)
    MORETHAN        reduce using rule 26 (arr -> LSQBRACKET RSQBRACKET .)
    LESSTHAN        reduce using rule 26 (arr -> LSQBRACKET RSQBRACKET .)
    NOTEQUAL        reduce using rule 26 (arr -> LSQBRACKET RSQBRACKET .)
    ISEQUALTO       reduce using rule 26 (arr -> LSQBRACKET RSQBRACKET .)
    MORETHANEQUAL   reduce using rule 26 (arr -> LSQBRACKET RSQBRACKET .)
    LESSTHANEQUAL   reduce using rule 26 (arr -> LSQBRACKET RSQBRACKET .)
    AND             reduce using rule 26 (arr -> LSQBRACKET RSQBRACKET .)
    OR              reduce using rule 26 (arr -> LSQBRACKET RSQBRACKET .)
    SEMICOLON       reduce using rule 26 (arr -> LSQBRACKET RSQBRACKET .)
    RPAREN          reduce using rule 26 (arr -> LSQBRACKET RSQBRACKET .)
    COMMA           reduce using rule 26 (arr -> LSQBRACKET RSQBRACKET .)
    RSQBRACKET      reduce using rule 26 (arr -> LSQBRACKET RSQBRACKET .)


state 131

    (41) addQTD -> empty .

    PLUS            reduce using rule 41 (addQTD -> empty .)
    MINUS           reduce using rule 41 (addQTD -> empty .)
    MORETHAN        reduce using rule 41 (addQTD -> empty .)
    LESSTHAN        reduce using rule 41 (addQTD -> empty .)
    NOTEQUAL        reduce using rule 41 (addQTD -> empty .)
    ISEQUALTO       reduce using rule 41 (addQTD -> empty .)
    MORETHANEQUAL   reduce using rule 41 (addQTD -> empty .)
    LESSTHANEQUAL   reduce using rule 41 (addQTD -> empty .)
    AND             reduce using rule 41 (addQTD -> empty .)
    OR              reduce using rule 41 (addQTD -> empty .)
    SEMICOLON       reduce using rule 41 (addQTD -> empty .)
    RPAREN          reduce using rule 41 (addQTD -> empty .)
    COMMA           reduce using rule 41 (addQTD -> empty .)
    RSQBRACKET      reduce using rule 41 (addQTD -> empty .)


state 132

    (40) termino -> factor masterminos addQTD .

    PLUS            reduce using rule 40 (termino -> factor masterminos addQTD .)
    MINUS           reduce using rule 40 (termino -> factor masterminos addQTD .)
    MORETHAN        reduce using rule 40 (termino -> factor masterminos addQTD .)
    LESSTHAN        reduce using rule 40 (termino -> factor masterminos addQTD .)
    NOTEQUAL        reduce using rule 40 (termino -> factor masterminos addQTD .)
    ISEQUALTO       reduce using rule 40 (termino -> factor masterminos addQTD .)
    MORETHANEQUAL   reduce using rule 40 (termino -> factor masterminos addQTD .)
    LESSTHANEQUAL   reduce using rule 40 (termino -> factor masterminos addQTD .)
    AND             reduce using rule 40 (termino -> factor masterminos addQTD .)
    OR              reduce using rule 40 (termino -> factor masterminos addQTD .)
    SEMICOLON       reduce using rule 40 (termino -> factor masterminos addQTD .)
    RPAREN          reduce using rule 40 (termino -> factor masterminos addQTD .)
    COMMA           reduce using rule 40 (termino -> factor masterminos addQTD .)
    RSQBRACKET      reduce using rule 40 (termino -> factor masterminos addQTD .)


state 133

    (43) masterminos -> DIVIDE termino .

    PLUS            reduce using rule 43 (masterminos -> DIVIDE termino .)
    MINUS           reduce using rule 43 (masterminos -> DIVIDE termino .)
    MORETHAN        reduce using rule 43 (masterminos -> DIVIDE termino .)
    LESSTHAN        reduce using rule 43 (masterminos -> DIVIDE termino .)
    NOTEQUAL        reduce using rule 43 (masterminos -> DIVIDE termino .)
    ISEQUALTO       reduce using rule 43 (masterminos -> DIVIDE termino .)
    MORETHANEQUAL   reduce using rule 43 (masterminos -> DIVIDE termino .)
    LESSTHANEQUAL   reduce using rule 43 (masterminos -> DIVIDE termino .)
    AND             reduce using rule 43 (masterminos -> DIVIDE termino .)
    OR              reduce using rule 43 (masterminos -> DIVIDE termino .)
    SEMICOLON       reduce using rule 43 (masterminos -> DIVIDE termino .)
    RPAREN          reduce using rule 43 (masterminos -> DIVIDE termino .)
    COMMA           reduce using rule 43 (masterminos -> DIVIDE termino .)
    RSQBRACKET      reduce using rule 43 (masterminos -> DIVIDE termino .)


state 134

    (42) masterminos -> TIMES termino .

    PLUS            reduce using rule 42 (masterminos -> TIMES termino .)
    MINUS           reduce using rule 42 (masterminos -> TIMES termino .)
    MORETHAN        reduce using rule 42 (masterminos -> TIMES termino .)
    LESSTHAN        reduce using rule 42 (masterminos -> TIMES termino .)
    NOTEQUAL        reduce using rule 42 (masterminos -> TIMES termino .)
    ISEQUALTO       reduce using rule 42 (masterminos -> TIMES termino .)
    MORETHANEQUAL   reduce using rule 42 (masterminos -> TIMES termino .)
    LESSTHANEQUAL   reduce using rule 42 (masterminos -> TIMES termino .)
    AND             reduce using rule 42 (masterminos -> TIMES termino .)
    OR              reduce using rule 42 (masterminos -> TIMES termino .)
    SEMICOLON       reduce using rule 42 (masterminos -> TIMES termino .)
    RPAREN          reduce using rule 42 (masterminos -> TIMES termino .)
    COMMA           reduce using rule 42 (masterminos -> TIMES termino .)
    RSQBRACKET      reduce using rule 42 (masterminos -> TIMES termino .)


state 135

    (24) rightparen -> RPAREN .

    TIMES           reduce using rule 24 (rightparen -> RPAREN .)
    DIVIDE          reduce using rule 24 (rightparen -> RPAREN .)
    PLUS            reduce using rule 24 (rightparen -> RPAREN .)
    MINUS           reduce using rule 24 (rightparen -> RPAREN .)
    MORETHAN        reduce using rule 24 (rightparen -> RPAREN .)
    LESSTHAN        reduce using rule 24 (rightparen -> RPAREN .)
    NOTEQUAL        reduce using rule 24 (rightparen -> RPAREN .)
    ISEQUALTO       reduce using rule 24 (rightparen -> RPAREN .)
    MORETHANEQUAL   reduce using rule 24 (rightparen -> RPAREN .)
    LESSTHANEQUAL   reduce using rule 24 (rightparen -> RPAREN .)
    AND             reduce using rule 24 (rightparen -> RPAREN .)
    OR              reduce using rule 24 (rightparen -> RPAREN .)
    SEMICOLON       reduce using rule 24 (rightparen -> RPAREN .)
    RPAREN          reduce using rule 24 (rightparen -> RPAREN .)
    COMMA           reduce using rule 24 (rightparen -> RPAREN .)
    RSQBRACKET      reduce using rule 24 (rightparen -> RPAREN .)


state 136

    (20) factor -> leftparen expresion rightparen .

    TIMES           reduce using rule 20 (factor -> leftparen expresion rightparen .)
    DIVIDE          reduce using rule 20 (factor -> leftparen expresion rightparen .)
    PLUS            reduce using rule 20 (factor -> leftparen expresion rightparen .)
    MINUS           reduce using rule 20 (factor -> leftparen expresion rightparen .)
    AND             reduce using rule 20 (factor -> leftparen expresion rightparen .)
    OR              reduce using rule 20 (factor -> leftparen expresion rightparen .)
    SEMICOLON       reduce using rule 20 (factor -> leftparen expresion rightparen .)
    RPAREN          reduce using rule 20 (factor -> leftparen expresion rightparen .)
    COMMA           reduce using rule 20 (factor -> leftparen expresion rightparen .)
    RSQBRACKET      reduce using rule 20 (factor -> leftparen expresion rightparen .)
    MORETHAN        reduce using rule 20 (factor -> leftparen expresion rightparen .)
    LESSTHAN        reduce using rule 20 (factor -> leftparen expresion rightparen .)
    NOTEQUAL        reduce using rule 20 (factor -> leftparen expresion rightparen .)
    ISEQUALTO       reduce using rule 20 (factor -> leftparen expresion rightparen .)
    MORETHANEQUAL   reduce using rule 20 (factor -> leftparen expresion rightparen .)
    LESSTHANEQUAL   reduce using rule 20 (factor -> leftparen expresion rightparen .)


state 137

    (50) expcompcontinuo -> ISEQUALTO exp .

    AND             reduce using rule 50 (expcompcontinuo -> ISEQUALTO exp .)
    OR              reduce using rule 50 (expcompcontinuo -> ISEQUALTO exp .)
    SEMICOLON       reduce using rule 50 (expcompcontinuo -> ISEQUALTO exp .)
    RPAREN          reduce using rule 50 (expcompcontinuo -> ISEQUALTO exp .)
    COMMA           reduce using rule 50 (expcompcontinuo -> ISEQUALTO exp .)
    RSQBRACKET      reduce using rule 50 (expcompcontinuo -> ISEQUALTO exp .)


state 138

    (48) expcompcontinuo -> LESSTHAN exp .

    AND             reduce using rule 48 (expcompcontinuo -> LESSTHAN exp .)
    OR              reduce using rule 48 (expcompcontinuo -> LESSTHAN exp .)
    SEMICOLON       reduce using rule 48 (expcompcontinuo -> LESSTHAN exp .)
    RPAREN          reduce using rule 48 (expcompcontinuo -> LESSTHAN exp .)
    COMMA           reduce using rule 48 (expcompcontinuo -> LESSTHAN exp .)
    RSQBRACKET      reduce using rule 48 (expcompcontinuo -> LESSTHAN exp .)


state 139

    (52) expcompcontinuo -> LESSTHANEQUAL exp .

    AND             reduce using rule 52 (expcompcontinuo -> LESSTHANEQUAL exp .)
    OR              reduce using rule 52 (expcompcontinuo -> LESSTHANEQUAL exp .)
    SEMICOLON       reduce using rule 52 (expcompcontinuo -> LESSTHANEQUAL exp .)
    RPAREN          reduce using rule 52 (expcompcontinuo -> LESSTHANEQUAL exp .)
    COMMA           reduce using rule 52 (expcompcontinuo -> LESSTHANEQUAL exp .)
    RSQBRACKET      reduce using rule 52 (expcompcontinuo -> LESSTHANEQUAL exp .)


state 140

    (49) expcompcontinuo -> NOTEQUAL exp .

    AND             reduce using rule 49 (expcompcontinuo -> NOTEQUAL exp .)
    OR              reduce using rule 49 (expcompcontinuo -> NOTEQUAL exp .)
    SEMICOLON       reduce using rule 49 (expcompcontinuo -> NOTEQUAL exp .)
    RPAREN          reduce using rule 49 (expcompcontinuo -> NOTEQUAL exp .)
    COMMA           reduce using rule 49 (expcompcontinuo -> NOTEQUAL exp .)
    RSQBRACKET      reduce using rule 49 (expcompcontinuo -> NOTEQUAL exp .)


state 141

    (51) expcompcontinuo -> MORETHANEQUAL exp .

    AND             reduce using rule 51 (expcompcontinuo -> MORETHANEQUAL exp .)
    OR              reduce using rule 51 (expcompcontinuo -> MORETHANEQUAL exp .)
    SEMICOLON       reduce using rule 51 (expcompcontinuo -> MORETHANEQUAL exp .)
    RPAREN          reduce using rule 51 (expcompcontinuo -> MORETHANEQUAL exp .)
    COMMA           reduce using rule 51 (expcompcontinuo -> MORETHANEQUAL exp .)
    RSQBRACKET      reduce using rule 51 (expcompcontinuo -> MORETHANEQUAL exp .)


state 142

    (47) expcompcontinuo -> MORETHAN exp .

    AND             reduce using rule 47 (expcompcontinuo -> MORETHAN exp .)
    OR              reduce using rule 47 (expcompcontinuo -> MORETHAN exp .)
    SEMICOLON       reduce using rule 47 (expcompcontinuo -> MORETHAN exp .)
    RPAREN          reduce using rule 47 (expcompcontinuo -> MORETHAN exp .)
    COMMA           reduce using rule 47 (expcompcontinuo -> MORETHAN exp .)
    RSQBRACKET      reduce using rule 47 (expcompcontinuo -> MORETHAN exp .)


state 143

    (45) expcomp -> exp expcompcontinuo addQPComp .

    AND             reduce using rule 45 (expcomp -> exp expcompcontinuo addQPComp .)
    OR              reduce using rule 45 (expcomp -> exp expcompcontinuo addQPComp .)
    RPAREN          reduce using rule 45 (expcomp -> exp expcompcontinuo addQPComp .)
    SEMICOLON       reduce using rule 45 (expcomp -> exp expcompcontinuo addQPComp .)
    COMMA           reduce using rule 45 (expcomp -> exp expcompcontinuo addQPComp .)
    RSQBRACKET      reduce using rule 45 (expcomp -> exp expcompcontinuo addQPComp .)


state 144

    (46) addQPComp -> empty .

    AND             reduce using rule 46 (addQPComp -> empty .)
    OR              reduce using rule 46 (addQPComp -> empty .)
    SEMICOLON       reduce using rule 46 (addQPComp -> empty .)
    RPAREN          reduce using rule 46 (addQPComp -> empty .)
    COMMA           reduce using rule 46 (addQPComp -> empty .)
    RSQBRACKET      reduce using rule 46 (addQPComp -> empty .)


state 145

    (31) masexp -> MINUS exp .

    MORETHAN        reduce using rule 31 (masexp -> MINUS exp .)
    LESSTHAN        reduce using rule 31 (masexp -> MINUS exp .)
    NOTEQUAL        reduce using rule 31 (masexp -> MINUS exp .)
    ISEQUALTO       reduce using rule 31 (masexp -> MINUS exp .)
    MORETHANEQUAL   reduce using rule 31 (masexp -> MINUS exp .)
    LESSTHANEQUAL   reduce using rule 31 (masexp -> MINUS exp .)
    AND             reduce using rule 31 (masexp -> MINUS exp .)
    OR              reduce using rule 31 (masexp -> MINUS exp .)
    SEMICOLON       reduce using rule 31 (masexp -> MINUS exp .)
    RPAREN          reduce using rule 31 (masexp -> MINUS exp .)
    COMMA           reduce using rule 31 (masexp -> MINUS exp .)
    RSQBRACKET      reduce using rule 31 (masexp -> MINUS exp .)


state 146

    (30) masexp -> PLUS exp .

    MORETHAN        reduce using rule 30 (masexp -> PLUS exp .)
    LESSTHAN        reduce using rule 30 (masexp -> PLUS exp .)
    NOTEQUAL        reduce using rule 30 (masexp -> PLUS exp .)
    ISEQUALTO       reduce using rule 30 (masexp -> PLUS exp .)
    MORETHANEQUAL   reduce using rule 30 (masexp -> PLUS exp .)
    LESSTHANEQUAL   reduce using rule 30 (masexp -> PLUS exp .)
    AND             reduce using rule 30 (masexp -> PLUS exp .)
    OR              reduce using rule 30 (masexp -> PLUS exp .)
    SEMICOLON       reduce using rule 30 (masexp -> PLUS exp .)
    RPAREN          reduce using rule 30 (masexp -> PLUS exp .)
    COMMA           reduce using rule 30 (masexp -> PLUS exp .)
    RSQBRACKET      reduce using rule 30 (masexp -> PLUS exp .)


state 147

    (28) exp -> termino masexp addQPPM .

    MORETHAN        reduce using rule 28 (exp -> termino masexp addQPPM .)
    LESSTHAN        reduce using rule 28 (exp -> termino masexp addQPPM .)
    NOTEQUAL        reduce using rule 28 (exp -> termino masexp addQPPM .)
    ISEQUALTO       reduce using rule 28 (exp -> termino masexp addQPPM .)
    MORETHANEQUAL   reduce using rule 28 (exp -> termino masexp addQPPM .)
    LESSTHANEQUAL   reduce using rule 28 (exp -> termino masexp addQPPM .)
    AND             reduce using rule 28 (exp -> termino masexp addQPPM .)
    OR              reduce using rule 28 (exp -> termino masexp addQPPM .)
    SEMICOLON       reduce using rule 28 (exp -> termino masexp addQPPM .)
    RPAREN          reduce using rule 28 (exp -> termino masexp addQPPM .)
    COMMA           reduce using rule 28 (exp -> termino masexp addQPPM .)
    RSQBRACKET      reduce using rule 28 (exp -> termino masexp addQPPM .)


state 148

    (29) addQPPM -> empty .

    MORETHAN        reduce using rule 29 (addQPPM -> empty .)
    LESSTHAN        reduce using rule 29 (addQPPM -> empty .)
    NOTEQUAL        reduce using rule 29 (addQPPM -> empty .)
    ISEQUALTO       reduce using rule 29 (addQPPM -> empty .)
    MORETHANEQUAL   reduce using rule 29 (addQPPM -> empty .)
    LESSTHANEQUAL   reduce using rule 29 (addQPPM -> empty .)
    AND             reduce using rule 29 (addQPPM -> empty .)
    OR              reduce using rule 29 (addQPPM -> empty .)
    SEMICOLON       reduce using rule 29 (addQPPM -> empty .)
    RPAREN          reduce using rule 29 (addQPPM -> empty .)
    COMMA           reduce using rule 29 (addQPPM -> empty .)
    RSQBRACKET      reduce using rule 29 (addQPPM -> empty .)


state 149

    (19) asignacion -> ID LSQBRACKET RSQBRACKET EQUALS LSQBRACKET . expresion comaexpresion RSQBRACKET SEMICOLON
    (35) expresion -> . expcomp masexpresion addQPAO
    (45) expcomp -> . exp expcompcontinuo addQPComp
    (28) exp -> . termino masexp addQPPM
    (40) termino -> . factor masterminos addQTD
    (20) factor -> . leftparen expresion rightparen
    (21) factor -> . varcte
    (22) factor -> . varid
    (23) leftparen -> . LPAREN
    (78) varcte -> . cteint
    (79) varcte -> . ctefloat
    (80) varcte -> . ctechar
    (81) varcte -> . ctestring
    (82) varcte -> . ctebool
    (25) varid -> . ID arr
    (83) cteint -> . CTEINT
    (84) ctefloat -> . CTEFLOAT
    (85) ctechar -> . CTECHAR
    (86) ctestring -> . CTESTRING
    (87) ctebool -> . TRUE
    (88) ctebool -> . FALSE

    LPAREN          shift and go to state 70
    ID              shift and go to state 66
    CTEINT          shift and go to state 76
    CTEFLOAT        shift and go to state 81
    CTECHAR         shift and go to state 72
    CTESTRING       shift and go to state 83
    TRUE            shift and go to state 67
    FALSE           shift and go to state 77

    expresion                      shift and go to state 155
    factor                         shift and go to state 68
    ctebool                        shift and go to state 82
    ctestring                      shift and go to state 75
    leftparen                      shift and go to state 71
    exp                            shift and go to state 73
    termino                        shift and go to state 74
    expcomp                        shift and go to state 65
    varid                          shift and go to state 84
    varcte                         shift and go to state 79
    ctefloat                       shift and go to state 80
    ctechar                        shift and go to state 78
    cteint                         shift and go to state 69

state 150

    (5) gotoF -> empty .

    LBRACKET        reduce using rule 5 (gotoF -> empty .)


state 151

    (4) condicion -> IF LPAREN expresion RPAREN gotoF . bloque masbloque
    (6) bloque -> . LBRACKET masestatuto RBRACKET

    LBRACKET        shift and go to state 30

    bloque                         shift and go to state 156

state 152

    (10) ciclo -> while LPAREN expresion RPAREN gotoF . bloque goto
    (6) bloque -> . LBRACKET masestatuto RBRACKET

    LBRACKET        shift and go to state 30

    bloque                         shift and go to state 157

state 153

    (16) masprint -> COMMA listaprint .

    RPAREN          reduce using rule 16 (masprint -> COMMA listaprint .)


state 154

    (12) escritura -> print LPAREN listaprint RPAREN SEMICOLON .

    ID              reduce using rule 12 (escritura -> print LPAREN listaprint RPAREN SEMICOLON .)
    IF              reduce using rule 12 (escritura -> print LPAREN listaprint RPAREN SEMICOLON .)
    VAR             reduce using rule 12 (escritura -> print LPAREN listaprint RPAREN SEMICOLON .)
    WHILE           reduce using rule 12 (escritura -> print LPAREN listaprint RPAREN SEMICOLON .)
    PRINT           reduce using rule 12 (escritura -> print LPAREN listaprint RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 12 (escritura -> print LPAREN listaprint RPAREN SEMICOLON .)


state 155

    (19) asignacion -> ID LSQBRACKET RSQBRACKET EQUALS LSQBRACKET expresion . comaexpresion RSQBRACKET SEMICOLON
    (33) comaexpresion -> . COMMA expresion comaexpresion
    (34) comaexpresion -> . empty
    (89) empty -> .

    COMMA           shift and go to state 160
    RSQBRACKET      reduce using rule 89 (empty -> .)

    empty                          shift and go to state 158
    comaexpresion                  shift and go to state 159

state 156

    (4) condicion -> IF LPAREN expresion RPAREN gotoF bloque . masbloque
    (7) masbloque -> . ELSE goto bloque
    (8) masbloque -> . empty
    (89) empty -> .

    ELSE            shift and go to state 163
    ID              reduce using rule 89 (empty -> .)
    IF              reduce using rule 89 (empty -> .)
    VAR             reduce using rule 89 (empty -> .)
    WHILE           reduce using rule 89 (empty -> .)
    PRINT           reduce using rule 89 (empty -> .)
    RBRACKET        reduce using rule 89 (empty -> .)

    masbloque                      shift and go to state 161
    empty                          shift and go to state 162

state 157

    (10) ciclo -> while LPAREN expresion RPAREN gotoF bloque . goto
    (9) goto -> . empty
    (89) empty -> .

    ID              reduce using rule 89 (empty -> .)
    IF              reduce using rule 89 (empty -> .)
    VAR             reduce using rule 89 (empty -> .)
    WHILE           reduce using rule 89 (empty -> .)
    PRINT           reduce using rule 89 (empty -> .)
    RBRACKET        reduce using rule 89 (empty -> .)

    empty                          shift and go to state 164
    goto                           shift and go to state 165

state 158

    (34) comaexpresion -> empty .

    RSQBRACKET      reduce using rule 34 (comaexpresion -> empty .)


state 159

    (19) asignacion -> ID LSQBRACKET RSQBRACKET EQUALS LSQBRACKET expresion comaexpresion . RSQBRACKET SEMICOLON

    RSQBRACKET      shift and go to state 166


state 160

    (33) comaexpresion -> COMMA . expresion comaexpresion
    (35) expresion -> . expcomp masexpresion addQPAO
    (45) expcomp -> . exp expcompcontinuo addQPComp
    (28) exp -> . termino masexp addQPPM
    (40) termino -> . factor masterminos addQTD
    (20) factor -> . leftparen expresion rightparen
    (21) factor -> . varcte
    (22) factor -> . varid
    (23) leftparen -> . LPAREN
    (78) varcte -> . cteint
    (79) varcte -> . ctefloat
    (80) varcte -> . ctechar
    (81) varcte -> . ctestring
    (82) varcte -> . ctebool
    (25) varid -> . ID arr
    (83) cteint -> . CTEINT
    (84) ctefloat -> . CTEFLOAT
    (85) ctechar -> . CTECHAR
    (86) ctestring -> . CTESTRING
    (87) ctebool -> . TRUE
    (88) ctebool -> . FALSE

    LPAREN          shift and go to state 70
    ID              shift and go to state 66
    CTEINT          shift and go to state 76
    CTEFLOAT        shift and go to state 81
    CTECHAR         shift and go to state 72
    CTESTRING       shift and go to state 83
    TRUE            shift and go to state 67
    FALSE           shift and go to state 77

    expresion                      shift and go to state 167
    factor                         shift and go to state 68
    ctebool                        shift and go to state 82
    ctestring                      shift and go to state 75
    leftparen                      shift and go to state 71
    exp                            shift and go to state 73
    termino                        shift and go to state 74
    expcomp                        shift and go to state 65
    varid                          shift and go to state 84
    varcte                         shift and go to state 79
    ctefloat                       shift and go to state 80
    ctechar                        shift and go to state 78
    cteint                         shift and go to state 69

state 161

    (4) condicion -> IF LPAREN expresion RPAREN gotoF bloque masbloque .

    ID              reduce using rule 4 (condicion -> IF LPAREN expresion RPAREN gotoF bloque masbloque .)
    IF              reduce using rule 4 (condicion -> IF LPAREN expresion RPAREN gotoF bloque masbloque .)
    VAR             reduce using rule 4 (condicion -> IF LPAREN expresion RPAREN gotoF bloque masbloque .)
    WHILE           reduce using rule 4 (condicion -> IF LPAREN expresion RPAREN gotoF bloque masbloque .)
    PRINT           reduce using rule 4 (condicion -> IF LPAREN expresion RPAREN gotoF bloque masbloque .)
    RBRACKET        reduce using rule 4 (condicion -> IF LPAREN expresion RPAREN gotoF bloque masbloque .)


state 162

    (8) masbloque -> empty .

    ID              reduce using rule 8 (masbloque -> empty .)
    IF              reduce using rule 8 (masbloque -> empty .)
    VAR             reduce using rule 8 (masbloque -> empty .)
    WHILE           reduce using rule 8 (masbloque -> empty .)
    PRINT           reduce using rule 8 (masbloque -> empty .)
    RBRACKET        reduce using rule 8 (masbloque -> empty .)


state 163

    (7) masbloque -> ELSE . goto bloque
    (9) goto -> . empty
    (89) empty -> .

    LBRACKET        reduce using rule 89 (empty -> .)

    goto                           shift and go to state 168
    empty                          shift and go to state 164

state 164

    (9) goto -> empty .

    ID              reduce using rule 9 (goto -> empty .)
    IF              reduce using rule 9 (goto -> empty .)
    VAR             reduce using rule 9 (goto -> empty .)
    WHILE           reduce using rule 9 (goto -> empty .)
    PRINT           reduce using rule 9 (goto -> empty .)
    RBRACKET        reduce using rule 9 (goto -> empty .)
    LBRACKET        reduce using rule 9 (goto -> empty .)


state 165

    (10) ciclo -> while LPAREN expresion RPAREN gotoF bloque goto .

    ID              reduce using rule 10 (ciclo -> while LPAREN expresion RPAREN gotoF bloque goto .)
    IF              reduce using rule 10 (ciclo -> while LPAREN expresion RPAREN gotoF bloque goto .)
    VAR             reduce using rule 10 (ciclo -> while LPAREN expresion RPAREN gotoF bloque goto .)
    WHILE           reduce using rule 10 (ciclo -> while LPAREN expresion RPAREN gotoF bloque goto .)
    PRINT           reduce using rule 10 (ciclo -> while LPAREN expresion RPAREN gotoF bloque goto .)
    RBRACKET        reduce using rule 10 (ciclo -> while LPAREN expresion RPAREN gotoF bloque goto .)


state 166

    (19) asignacion -> ID LSQBRACKET RSQBRACKET EQUALS LSQBRACKET expresion comaexpresion RSQBRACKET . SEMICOLON

    SEMICOLON       shift and go to state 169


state 167

    (33) comaexpresion -> COMMA expresion . comaexpresion
    (33) comaexpresion -> . COMMA expresion comaexpresion
    (34) comaexpresion -> . empty
    (89) empty -> .

    COMMA           shift and go to state 160
    RSQBRACKET      reduce using rule 89 (empty -> .)

    empty                          shift and go to state 158
    comaexpresion                  shift and go to state 170

state 168

    (7) masbloque -> ELSE goto . bloque
    (6) bloque -> . LBRACKET masestatuto RBRACKET

    LBRACKET        shift and go to state 30

    bloque                         shift and go to state 171

state 169

    (19) asignacion -> ID LSQBRACKET RSQBRACKET EQUALS LSQBRACKET expresion comaexpresion RSQBRACKET SEMICOLON .

    ID              reduce using rule 19 (asignacion -> ID LSQBRACKET RSQBRACKET EQUALS LSQBRACKET expresion comaexpresion RSQBRACKET SEMICOLON .)
    IF              reduce using rule 19 (asignacion -> ID LSQBRACKET RSQBRACKET EQUALS LSQBRACKET expresion comaexpresion RSQBRACKET SEMICOLON .)
    VAR             reduce using rule 19 (asignacion -> ID LSQBRACKET RSQBRACKET EQUALS LSQBRACKET expresion comaexpresion RSQBRACKET SEMICOLON .)
    WHILE           reduce using rule 19 (asignacion -> ID LSQBRACKET RSQBRACKET EQUALS LSQBRACKET expresion comaexpresion RSQBRACKET SEMICOLON .)
    PRINT           reduce using rule 19 (asignacion -> ID LSQBRACKET RSQBRACKET EQUALS LSQBRACKET expresion comaexpresion RSQBRACKET SEMICOLON .)
    RBRACKET        reduce using rule 19 (asignacion -> ID LSQBRACKET RSQBRACKET EQUALS LSQBRACKET expresion comaexpresion RSQBRACKET SEMICOLON .)


state 170

    (33) comaexpresion -> COMMA expresion comaexpresion .

    RSQBRACKET      reduce using rule 33 (comaexpresion -> COMMA expresion comaexpresion .)


state 171

    (7) masbloque -> ELSE goto bloque .

    ID              reduce using rule 7 (masbloque -> ELSE goto bloque .)
    IF              reduce using rule 7 (masbloque -> ELSE goto bloque .)
    VAR             reduce using rule 7 (masbloque -> ELSE goto bloque .)
    WHILE           reduce using rule 7 (masbloque -> ELSE goto bloque .)
    PRINT           reduce using rule 7 (masbloque -> ELSE goto bloque .)
    RBRACKET        reduce using rule 7 (masbloque -> ELSE goto bloque .)

