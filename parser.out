Created by PLY version 3.9 (http://www.dabeaz.com/ply)

Unused terminals:

    QUIT
    EXECUTE

Grammar

Rule 0     S' -> programa
Rule 1     programa -> prog ID SEMICOLON vars funcs main bloque
Rule 2     prog -> PROGRAM
Rule 3     main -> MAIN
Rule 4     condicion -> IF LPAREN expresion RPAREN bloque masbloque
Rule 5     bloque -> LBRACKET masestatuto RBRACKET
Rule 6     masbloque -> ELSE bloque
Rule 7     masbloque -> empty
Rule 8     ciclo -> WHILE LPAREN expresion RPAREN bloque
Rule 9     escritura -> PRINT LPAREN listaprint RPAREN SEMICOLON
Rule 10    listaprint -> expresion masprint
Rule 11    listaprint -> ctestring masprint
Rule 12    masprint -> COMMA listaprint
Rule 13    masprint -> empty
Rule 14    asignacion -> ID EQUALS expresion SEMICOLON
Rule 15    asignacion -> ID LSQBRACKET RSQBRACKET EQUALS LSQBRACKET expresion comaexpresion RSQBRACKET SEMICOLON
Rule 16    factor -> leftparen expresion rightparen
Rule 17    factor -> varcte
Rule 18    factor -> varid
Rule 19    leftparen -> LPAREN
Rule 20    rightparen -> RPAREN
Rule 21    varid -> ID arr
Rule 22    arr -> LSQBRACKET RSQBRACKET
Rule 23    arr -> empty
Rule 24    exp -> termino masexp addQPPM
Rule 25    addQPPM -> empty
Rule 26    masexp -> PLUS exp
Rule 27    masexp -> MINUS exp
Rule 28    masexp -> empty
Rule 29    comaexpresion -> COMMA expresion comaexpresion
Rule 30    comaexpresion -> empty
Rule 31    expresion -> expcomp masexpresion addQPAO
Rule 32    addQPAO -> empty
Rule 33    masexpresion -> AND expresion
Rule 34    masexpresion -> OR expresion
Rule 35    masexpresion -> empty
Rule 36    termino -> factor masterminos addQTD
Rule 37    addQTD -> empty
Rule 38    masterminos -> TIMES termino
Rule 39    masterminos -> DIVIDE termino
Rule 40    masterminos -> empty
Rule 41    expcomp -> exp expcompcontinuo addQPComp
Rule 42    addQPComp -> empty
Rule 43    expcompcontinuo -> MORETHAN expcomp
Rule 44    expcompcontinuo -> LESSTHAN expcomp
Rule 45    expcompcontinuo -> NOTEQUAL expcomp
Rule 46    expcompcontinuo -> ISEQUALTO expcomp
Rule 47    expcompcontinuo -> MORETHANEQUAL expcomp
Rule 48    expcompcontinuo -> LESSTHANEQUAL expcomp
Rule 49    expcompcontinuo -> empty
Rule 50    estatuto -> asignacion
Rule 51    estatuto -> condicion
Rule 52    estatuto -> ciclo
Rule 53    estatuto -> escritura
Rule 54    estatuto -> vars
Rule 55    masestatuto -> estatuto masestatuto
Rule 56    masestatuto -> empty
Rule 57    vars -> VAR tipo listaid SEMICOLON vars
Rule 58    vars -> empty
Rule 59    listaid -> ID masid
Rule 60    masid -> COMMA listaid
Rule 61    masid -> empty
Rule 62    funcs -> FUNCTION funcaux LPAREN args RPAREN bloque funcs
Rule 63    funcs -> empty
Rule 64    funcaux -> tipo ID
Rule 65    args -> tipo ID masargs
Rule 66    args -> empty
Rule 67    masargs -> COMMA args
Rule 68    masargs -> empty
Rule 69    tipo -> INT
Rule 70    tipo -> FLOAT
Rule 71    tipo -> CHAR
Rule 72    tipo -> BOOL
Rule 73    tipo -> STRING
Rule 74    varcte -> cteint
Rule 75    varcte -> ctefloat
Rule 76    varcte -> ctechar
Rule 77    varcte -> ctestring
Rule 78    varcte -> ctebool
Rule 79    cteint -> CTEINT
Rule 80    ctefloat -> CTEFLOAT
Rule 81    ctechar -> CTECHAR
Rule 82    ctestring -> CTESTRING
Rule 83    ctebool -> TRUE
Rule 84    ctebool -> FALSE
Rule 85    empty -> <empty>

Terminals, with rules where they appear

AND                  : 33
BOOL                 : 72
CHAR                 : 71
COMMA                : 12 29 60 67
CTECHAR              : 81
CTEFLOAT             : 80
CTEINT               : 79
CTESTRING            : 82
DIVIDE               : 39
ELSE                 : 6
EQUALS               : 14 15
EXECUTE              : 
FALSE                : 84
FLOAT                : 70
FUNCTION             : 62
ID                   : 1 14 15 21 59 64 65
IF                   : 4
INT                  : 69
ISEQUALTO            : 46
LBRACKET             : 5
LESSTHAN             : 44
LESSTHANEQUAL        : 48
LPAREN               : 4 8 9 19 62
LSQBRACKET           : 15 15 22
MAIN                 : 3
MINUS                : 27
MORETHAN             : 43
MORETHANEQUAL        : 47
NOTEQUAL             : 45
OR                   : 34
PLUS                 : 26
PRINT                : 9
PROGRAM              : 2
QUIT                 : 
RBRACKET             : 5
RPAREN               : 4 8 9 20 62
RSQBRACKET           : 15 15 22
SEMICOLON            : 1 9 14 15 57
STRING               : 73
TIMES                : 38
TRUE                 : 83
VAR                  : 57
WHILE                : 8
error                : 

Nonterminals, with rules where they appear

addQPAO              : 31
addQPComp            : 41
addQPPM              : 24
addQTD               : 36
args                 : 62 67
arr                  : 21
asignacion           : 50
bloque               : 1 4 6 8 62
ciclo                : 52
comaexpresion        : 15 29
condicion            : 51
ctebool              : 78
ctechar              : 76
ctefloat             : 75
cteint               : 74
ctestring            : 11 77
empty                : 7 13 23 25 28 30 32 35 37 40 42 49 56 58 61 63 66 68
escritura            : 53
estatuto             : 55
exp                  : 26 27 41
expcomp              : 31 43 44 45 46 47 48
expcompcontinuo      : 41
expresion            : 4 8 10 14 15 16 29 33 34
factor               : 36
funcaux              : 62
funcs                : 1 62
leftparen            : 16
listaid              : 57 60
listaprint           : 9 12
main                 : 1
masargs              : 65
masbloque            : 4
masestatuto          : 5 55
masexp               : 24
masexpresion         : 31
masid                : 59
masprint             : 10 11
masterminos          : 36
prog                 : 1
programa             : 0
rightparen           : 16
termino              : 24 38 39
tipo                 : 57 64 65
varcte               : 17
varid                : 18
vars                 : 1 54 57

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . prog ID SEMICOLON vars funcs main bloque
    (2) prog -> . PROGRAM

    PROGRAM         shift and go to state 2

    programa                       shift and go to state 1
    prog                           shift and go to state 3

state 1

    (0) S' -> programa .



state 2

    (2) prog -> PROGRAM .

    ID              reduce using rule 2 (prog -> PROGRAM .)


state 3

    (1) programa -> prog . ID SEMICOLON vars funcs main bloque

    ID              shift and go to state 4


state 4

    (1) programa -> prog ID . SEMICOLON vars funcs main bloque

    SEMICOLON       shift and go to state 5


state 5

    (1) programa -> prog ID SEMICOLON . vars funcs main bloque
    (57) vars -> . VAR tipo listaid SEMICOLON vars
    (58) vars -> . empty
    (85) empty -> .

    VAR             shift and go to state 6
    FUNCTION        reduce using rule 85 (empty -> .)
    MAIN            reduce using rule 85 (empty -> .)

    vars                           shift and go to state 7
    empty                          shift and go to state 8

state 6

    (57) vars -> VAR . tipo listaid SEMICOLON vars
    (69) tipo -> . INT
    (70) tipo -> . FLOAT
    (71) tipo -> . CHAR
    (72) tipo -> . BOOL
    (73) tipo -> . STRING

    INT             shift and go to state 13
    FLOAT           shift and go to state 10
    CHAR            shift and go to state 12
    BOOL            shift and go to state 14
    STRING          shift and go to state 9

    tipo                           shift and go to state 11

state 7

    (1) programa -> prog ID SEMICOLON vars . funcs main bloque
    (62) funcs -> . FUNCTION funcaux LPAREN args RPAREN bloque funcs
    (63) funcs -> . empty
    (85) empty -> .

    FUNCTION        shift and go to state 15
    MAIN            reduce using rule 85 (empty -> .)

    funcs                          shift and go to state 16
    empty                          shift and go to state 17

state 8

    (58) vars -> empty .

    FUNCTION        reduce using rule 58 (vars -> empty .)
    MAIN            reduce using rule 58 (vars -> empty .)
    ID              reduce using rule 58 (vars -> empty .)
    IF              reduce using rule 58 (vars -> empty .)
    WHILE           reduce using rule 58 (vars -> empty .)
    PRINT           reduce using rule 58 (vars -> empty .)
    VAR             reduce using rule 58 (vars -> empty .)
    RBRACKET        reduce using rule 58 (vars -> empty .)


state 9

    (73) tipo -> STRING .

    ID              reduce using rule 73 (tipo -> STRING .)


state 10

    (70) tipo -> FLOAT .

    ID              reduce using rule 70 (tipo -> FLOAT .)


state 11

    (57) vars -> VAR tipo . listaid SEMICOLON vars
    (59) listaid -> . ID masid

    ID              shift and go to state 19

    listaid                        shift and go to state 18

state 12

    (71) tipo -> CHAR .

    ID              reduce using rule 71 (tipo -> CHAR .)


state 13

    (69) tipo -> INT .

    ID              reduce using rule 69 (tipo -> INT .)


state 14

    (72) tipo -> BOOL .

    ID              reduce using rule 72 (tipo -> BOOL .)


state 15

    (62) funcs -> FUNCTION . funcaux LPAREN args RPAREN bloque funcs
    (64) funcaux -> . tipo ID
    (69) tipo -> . INT
    (70) tipo -> . FLOAT
    (71) tipo -> . CHAR
    (72) tipo -> . BOOL
    (73) tipo -> . STRING

    INT             shift and go to state 13
    FLOAT           shift and go to state 10
    CHAR            shift and go to state 12
    BOOL            shift and go to state 14
    STRING          shift and go to state 9

    funcaux                        shift and go to state 20
    tipo                           shift and go to state 21

state 16

    (1) programa -> prog ID SEMICOLON vars funcs . main bloque
    (3) main -> . MAIN

    MAIN            shift and go to state 22

    main                           shift and go to state 23

state 17

    (63) funcs -> empty .

    MAIN            reduce using rule 63 (funcs -> empty .)


state 18

    (57) vars -> VAR tipo listaid . SEMICOLON vars

    SEMICOLON       shift and go to state 24


state 19

    (59) listaid -> ID . masid
    (60) masid -> . COMMA listaid
    (61) masid -> . empty
    (85) empty -> .

    COMMA           shift and go to state 25
    SEMICOLON       reduce using rule 85 (empty -> .)

    masid                          shift and go to state 26
    empty                          shift and go to state 27

state 20

    (62) funcs -> FUNCTION funcaux . LPAREN args RPAREN bloque funcs

    LPAREN          shift and go to state 28


state 21

    (64) funcaux -> tipo . ID

    ID              shift and go to state 29


state 22

    (3) main -> MAIN .

    LBRACKET        reduce using rule 3 (main -> MAIN .)


state 23

    (1) programa -> prog ID SEMICOLON vars funcs main . bloque
    (5) bloque -> . LBRACKET masestatuto RBRACKET

    LBRACKET        shift and go to state 31

    bloque                         shift and go to state 30

state 24

    (57) vars -> VAR tipo listaid SEMICOLON . vars
    (57) vars -> . VAR tipo listaid SEMICOLON vars
    (58) vars -> . empty
    (85) empty -> .

  ! shift/reduce conflict for VAR resolved as shift
    VAR             shift and go to state 6
    FUNCTION        reduce using rule 85 (empty -> .)
    MAIN            reduce using rule 85 (empty -> .)
    ID              reduce using rule 85 (empty -> .)
    IF              reduce using rule 85 (empty -> .)
    WHILE           reduce using rule 85 (empty -> .)
    PRINT           reduce using rule 85 (empty -> .)
    RBRACKET        reduce using rule 85 (empty -> .)

  ! VAR             [ reduce using rule 85 (empty -> .) ]

    vars                           shift and go to state 32
    empty                          shift and go to state 8

state 25

    (60) masid -> COMMA . listaid
    (59) listaid -> . ID masid

    ID              shift and go to state 19

    listaid                        shift and go to state 33

state 26

    (59) listaid -> ID masid .

    SEMICOLON       reduce using rule 59 (listaid -> ID masid .)


state 27

    (61) masid -> empty .

    SEMICOLON       reduce using rule 61 (masid -> empty .)


state 28

    (62) funcs -> FUNCTION funcaux LPAREN . args RPAREN bloque funcs
    (65) args -> . tipo ID masargs
    (66) args -> . empty
    (69) tipo -> . INT
    (70) tipo -> . FLOAT
    (71) tipo -> . CHAR
    (72) tipo -> . BOOL
    (73) tipo -> . STRING
    (85) empty -> .

    INT             shift and go to state 13
    FLOAT           shift and go to state 10
    CHAR            shift and go to state 12
    BOOL            shift and go to state 14
    STRING          shift and go to state 9
    RPAREN          reduce using rule 85 (empty -> .)

    tipo                           shift and go to state 36
    empty                          shift and go to state 35
    args                           shift and go to state 34

state 29

    (64) funcaux -> tipo ID .

    LPAREN          reduce using rule 64 (funcaux -> tipo ID .)


state 30

    (1) programa -> prog ID SEMICOLON vars funcs main bloque .

    $end            reduce using rule 1 (programa -> prog ID SEMICOLON vars funcs main bloque .)


state 31

    (5) bloque -> LBRACKET . masestatuto RBRACKET
    (55) masestatuto -> . estatuto masestatuto
    (56) masestatuto -> . empty
    (50) estatuto -> . asignacion
    (51) estatuto -> . condicion
    (52) estatuto -> . ciclo
    (53) estatuto -> . escritura
    (54) estatuto -> . vars
    (85) empty -> .
    (14) asignacion -> . ID EQUALS expresion SEMICOLON
    (15) asignacion -> . ID LSQBRACKET RSQBRACKET EQUALS LSQBRACKET expresion comaexpresion RSQBRACKET SEMICOLON
    (4) condicion -> . IF LPAREN expresion RPAREN bloque masbloque
    (8) ciclo -> . WHILE LPAREN expresion RPAREN bloque
    (9) escritura -> . PRINT LPAREN listaprint RPAREN SEMICOLON
    (57) vars -> . VAR tipo listaid SEMICOLON vars
    (58) vars -> . empty

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
    RBRACKET        reduce using rule 85 (empty -> .)
    ID              shift and go to state 44
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    PRINT           shift and go to state 38
    VAR             shift and go to state 6

  ! ID              [ reduce using rule 85 (empty -> .) ]
  ! IF              [ reduce using rule 85 (empty -> .) ]
  ! WHILE           [ reduce using rule 85 (empty -> .) ]
  ! PRINT           [ reduce using rule 85 (empty -> .) ]
  ! VAR             [ reduce using rule 85 (empty -> .) ]

    condicion                      shift and go to state 37
    vars                           shift and go to state 43
    masestatuto                    shift and go to state 41
    asignacion                     shift and go to state 45
    estatuto                       shift and go to state 46
    escritura                      shift and go to state 47
    empty                          shift and go to state 42
    ciclo                          shift and go to state 48

state 32

    (57) vars -> VAR tipo listaid SEMICOLON vars .

    FUNCTION        reduce using rule 57 (vars -> VAR tipo listaid SEMICOLON vars .)
    MAIN            reduce using rule 57 (vars -> VAR tipo listaid SEMICOLON vars .)
    ID              reduce using rule 57 (vars -> VAR tipo listaid SEMICOLON vars .)
    IF              reduce using rule 57 (vars -> VAR tipo listaid SEMICOLON vars .)
    WHILE           reduce using rule 57 (vars -> VAR tipo listaid SEMICOLON vars .)
    PRINT           reduce using rule 57 (vars -> VAR tipo listaid SEMICOLON vars .)
    VAR             reduce using rule 57 (vars -> VAR tipo listaid SEMICOLON vars .)
    RBRACKET        reduce using rule 57 (vars -> VAR tipo listaid SEMICOLON vars .)


state 33

    (60) masid -> COMMA listaid .

    SEMICOLON       reduce using rule 60 (masid -> COMMA listaid .)


state 34

    (62) funcs -> FUNCTION funcaux LPAREN args . RPAREN bloque funcs

    RPAREN          shift and go to state 49


state 35

    (66) args -> empty .

    RPAREN          reduce using rule 66 (args -> empty .)


state 36

    (65) args -> tipo . ID masargs

    ID              shift and go to state 50


state 37

    (51) estatuto -> condicion .

    ID              reduce using rule 51 (estatuto -> condicion .)
    IF              reduce using rule 51 (estatuto -> condicion .)
    WHILE           reduce using rule 51 (estatuto -> condicion .)
    PRINT           reduce using rule 51 (estatuto -> condicion .)
    VAR             reduce using rule 51 (estatuto -> condicion .)
    RBRACKET        reduce using rule 51 (estatuto -> condicion .)


state 38

    (9) escritura -> PRINT . LPAREN listaprint RPAREN SEMICOLON

    LPAREN          shift and go to state 51


state 39

    (4) condicion -> IF . LPAREN expresion RPAREN bloque masbloque

    LPAREN          shift and go to state 52


state 40

    (8) ciclo -> WHILE . LPAREN expresion RPAREN bloque

    LPAREN          shift and go to state 53


state 41

    (5) bloque -> LBRACKET masestatuto . RBRACKET

    RBRACKET        shift and go to state 54


state 42

    (56) masestatuto -> empty .
    (58) vars -> empty .

  ! reduce/reduce conflict for RBRACKET resolved using rule 56 (masestatuto -> empty .)
    RBRACKET        reduce using rule 56 (masestatuto -> empty .)
    ID              reduce using rule 58 (vars -> empty .)
    IF              reduce using rule 58 (vars -> empty .)
    WHILE           reduce using rule 58 (vars -> empty .)
    PRINT           reduce using rule 58 (vars -> empty .)
    VAR             reduce using rule 58 (vars -> empty .)

  ! RBRACKET        [ reduce using rule 58 (vars -> empty .) ]


state 43

    (54) estatuto -> vars .

    ID              reduce using rule 54 (estatuto -> vars .)
    IF              reduce using rule 54 (estatuto -> vars .)
    WHILE           reduce using rule 54 (estatuto -> vars .)
    PRINT           reduce using rule 54 (estatuto -> vars .)
    VAR             reduce using rule 54 (estatuto -> vars .)
    RBRACKET        reduce using rule 54 (estatuto -> vars .)


state 44

    (14) asignacion -> ID . EQUALS expresion SEMICOLON
    (15) asignacion -> ID . LSQBRACKET RSQBRACKET EQUALS LSQBRACKET expresion comaexpresion RSQBRACKET SEMICOLON

    EQUALS          shift and go to state 55
    LSQBRACKET      shift and go to state 56


state 45

    (50) estatuto -> asignacion .

    ID              reduce using rule 50 (estatuto -> asignacion .)
    IF              reduce using rule 50 (estatuto -> asignacion .)
    WHILE           reduce using rule 50 (estatuto -> asignacion .)
    PRINT           reduce using rule 50 (estatuto -> asignacion .)
    VAR             reduce using rule 50 (estatuto -> asignacion .)
    RBRACKET        reduce using rule 50 (estatuto -> asignacion .)


state 46

    (55) masestatuto -> estatuto . masestatuto
    (55) masestatuto -> . estatuto masestatuto
    (56) masestatuto -> . empty
    (50) estatuto -> . asignacion
    (51) estatuto -> . condicion
    (52) estatuto -> . ciclo
    (53) estatuto -> . escritura
    (54) estatuto -> . vars
    (85) empty -> .
    (14) asignacion -> . ID EQUALS expresion SEMICOLON
    (15) asignacion -> . ID LSQBRACKET RSQBRACKET EQUALS LSQBRACKET expresion comaexpresion RSQBRACKET SEMICOLON
    (4) condicion -> . IF LPAREN expresion RPAREN bloque masbloque
    (8) ciclo -> . WHILE LPAREN expresion RPAREN bloque
    (9) escritura -> . PRINT LPAREN listaprint RPAREN SEMICOLON
    (57) vars -> . VAR tipo listaid SEMICOLON vars
    (58) vars -> . empty

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
    RBRACKET        reduce using rule 85 (empty -> .)
    ID              shift and go to state 44
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    PRINT           shift and go to state 38
    VAR             shift and go to state 6

  ! ID              [ reduce using rule 85 (empty -> .) ]
  ! IF              [ reduce using rule 85 (empty -> .) ]
  ! WHILE           [ reduce using rule 85 (empty -> .) ]
  ! PRINT           [ reduce using rule 85 (empty -> .) ]
  ! VAR             [ reduce using rule 85 (empty -> .) ]

    condicion                      shift and go to state 37
    vars                           shift and go to state 43
    masestatuto                    shift and go to state 57
    asignacion                     shift and go to state 45
    estatuto                       shift and go to state 46
    escritura                      shift and go to state 47
    empty                          shift and go to state 42
    ciclo                          shift and go to state 48

state 47

    (53) estatuto -> escritura .

    ID              reduce using rule 53 (estatuto -> escritura .)
    IF              reduce using rule 53 (estatuto -> escritura .)
    WHILE           reduce using rule 53 (estatuto -> escritura .)
    PRINT           reduce using rule 53 (estatuto -> escritura .)
    VAR             reduce using rule 53 (estatuto -> escritura .)
    RBRACKET        reduce using rule 53 (estatuto -> escritura .)


state 48

    (52) estatuto -> ciclo .

    ID              reduce using rule 52 (estatuto -> ciclo .)
    IF              reduce using rule 52 (estatuto -> ciclo .)
    WHILE           reduce using rule 52 (estatuto -> ciclo .)
    PRINT           reduce using rule 52 (estatuto -> ciclo .)
    VAR             reduce using rule 52 (estatuto -> ciclo .)
    RBRACKET        reduce using rule 52 (estatuto -> ciclo .)


state 49

    (62) funcs -> FUNCTION funcaux LPAREN args RPAREN . bloque funcs
    (5) bloque -> . LBRACKET masestatuto RBRACKET

    LBRACKET        shift and go to state 31

    bloque                         shift and go to state 58

state 50

    (65) args -> tipo ID . masargs
    (67) masargs -> . COMMA args
    (68) masargs -> . empty
    (85) empty -> .

    COMMA           shift and go to state 59
    RPAREN          reduce using rule 85 (empty -> .)

    masargs                        shift and go to state 60
    empty                          shift and go to state 61

state 51

    (9) escritura -> PRINT LPAREN . listaprint RPAREN SEMICOLON
    (10) listaprint -> . expresion masprint
    (11) listaprint -> . ctestring masprint
    (31) expresion -> . expcomp masexpresion addQPAO
    (82) ctestring -> . CTESTRING
    (41) expcomp -> . exp expcompcontinuo addQPComp
    (24) exp -> . termino masexp addQPPM
    (36) termino -> . factor masterminos addQTD
    (16) factor -> . leftparen expresion rightparen
    (17) factor -> . varcte
    (18) factor -> . varid
    (19) leftparen -> . LPAREN
    (74) varcte -> . cteint
    (75) varcte -> . ctefloat
    (76) varcte -> . ctechar
    (77) varcte -> . ctestring
    (78) varcte -> . ctebool
    (21) varid -> . ID arr
    (79) cteint -> . CTEINT
    (80) ctefloat -> . CTEFLOAT
    (81) ctechar -> . CTECHAR
    (83) ctebool -> . TRUE
    (84) ctebool -> . FALSE

    CTESTRING       shift and go to state 63
    LPAREN          shift and go to state 82
    ID              shift and go to state 80
    CTEINT          shift and go to state 69
    CTEFLOAT        shift and go to state 79
    CTECHAR         shift and go to state 66
    TRUE            shift and go to state 62
    FALSE           shift and go to state 74

    factor                         shift and go to state 65
    ctebool                        shift and go to state 68
    leftparen                      shift and go to state 64
    varid                          shift and go to state 67
    varcte                         shift and go to state 70
    cteint                         shift and go to state 83
    ctechar                        shift and go to state 71
    ctefloat                       shift and go to state 75
    expcomp                        shift and go to state 73
    termino                        shift and go to state 76
    ctestring                      shift and go to state 77
    expresion                      shift and go to state 78
    exp                            shift and go to state 72
    listaprint                     shift and go to state 81

state 52

    (4) condicion -> IF LPAREN . expresion RPAREN bloque masbloque
    (31) expresion -> . expcomp masexpresion addQPAO
    (41) expcomp -> . exp expcompcontinuo addQPComp
    (24) exp -> . termino masexp addQPPM
    (36) termino -> . factor masterminos addQTD
    (16) factor -> . leftparen expresion rightparen
    (17) factor -> . varcte
    (18) factor -> . varid
    (19) leftparen -> . LPAREN
    (74) varcte -> . cteint
    (75) varcte -> . ctefloat
    (76) varcte -> . ctechar
    (77) varcte -> . ctestring
    (78) varcte -> . ctebool
    (21) varid -> . ID arr
    (79) cteint -> . CTEINT
    (80) ctefloat -> . CTEFLOAT
    (81) ctechar -> . CTECHAR
    (82) ctestring -> . CTESTRING
    (83) ctebool -> . TRUE
    (84) ctebool -> . FALSE

    LPAREN          shift and go to state 82
    ID              shift and go to state 80
    CTEINT          shift and go to state 69
    CTEFLOAT        shift and go to state 79
    CTECHAR         shift and go to state 66
    CTESTRING       shift and go to state 63
    TRUE            shift and go to state 62
    FALSE           shift and go to state 74

    factor                         shift and go to state 65
    ctebool                        shift and go to state 68
    leftparen                      shift and go to state 64
    varid                          shift and go to state 67
    varcte                         shift and go to state 70
    cteint                         shift and go to state 83
    ctechar                        shift and go to state 71
    exp                            shift and go to state 72
    expcomp                        shift and go to state 73
    termino                        shift and go to state 76
    ctestring                      shift and go to state 84
    expresion                      shift and go to state 85
    ctefloat                       shift and go to state 75

state 53

    (8) ciclo -> WHILE LPAREN . expresion RPAREN bloque
    (31) expresion -> . expcomp masexpresion addQPAO
    (41) expcomp -> . exp expcompcontinuo addQPComp
    (24) exp -> . termino masexp addQPPM
    (36) termino -> . factor masterminos addQTD
    (16) factor -> . leftparen expresion rightparen
    (17) factor -> . varcte
    (18) factor -> . varid
    (19) leftparen -> . LPAREN
    (74) varcte -> . cteint
    (75) varcte -> . ctefloat
    (76) varcte -> . ctechar
    (77) varcte -> . ctestring
    (78) varcte -> . ctebool
    (21) varid -> . ID arr
    (79) cteint -> . CTEINT
    (80) ctefloat -> . CTEFLOAT
    (81) ctechar -> . CTECHAR
    (82) ctestring -> . CTESTRING
    (83) ctebool -> . TRUE
    (84) ctebool -> . FALSE

    LPAREN          shift and go to state 82
    ID              shift and go to state 80
    CTEINT          shift and go to state 69
    CTEFLOAT        shift and go to state 79
    CTECHAR         shift and go to state 66
    CTESTRING       shift and go to state 63
    TRUE            shift and go to state 62
    FALSE           shift and go to state 74

    factor                         shift and go to state 65
    ctebool                        shift and go to state 68
    leftparen                      shift and go to state 64
    varid                          shift and go to state 67
    varcte                         shift and go to state 70
    cteint                         shift and go to state 83
    ctechar                        shift and go to state 71
    exp                            shift and go to state 72
    expcomp                        shift and go to state 73
    termino                        shift and go to state 76
    ctestring                      shift and go to state 84
    expresion                      shift and go to state 86
    ctefloat                       shift and go to state 75

state 54

    (5) bloque -> LBRACKET masestatuto RBRACKET .

    $end            reduce using rule 5 (bloque -> LBRACKET masestatuto RBRACKET .)
    ID              reduce using rule 5 (bloque -> LBRACKET masestatuto RBRACKET .)
    IF              reduce using rule 5 (bloque -> LBRACKET masestatuto RBRACKET .)
    WHILE           reduce using rule 5 (bloque -> LBRACKET masestatuto RBRACKET .)
    PRINT           reduce using rule 5 (bloque -> LBRACKET masestatuto RBRACKET .)
    VAR             reduce using rule 5 (bloque -> LBRACKET masestatuto RBRACKET .)
    RBRACKET        reduce using rule 5 (bloque -> LBRACKET masestatuto RBRACKET .)
    FUNCTION        reduce using rule 5 (bloque -> LBRACKET masestatuto RBRACKET .)
    MAIN            reduce using rule 5 (bloque -> LBRACKET masestatuto RBRACKET .)
    ELSE            reduce using rule 5 (bloque -> LBRACKET masestatuto RBRACKET .)


state 55

    (14) asignacion -> ID EQUALS . expresion SEMICOLON
    (31) expresion -> . expcomp masexpresion addQPAO
    (41) expcomp -> . exp expcompcontinuo addQPComp
    (24) exp -> . termino masexp addQPPM
    (36) termino -> . factor masterminos addQTD
    (16) factor -> . leftparen expresion rightparen
    (17) factor -> . varcte
    (18) factor -> . varid
    (19) leftparen -> . LPAREN
    (74) varcte -> . cteint
    (75) varcte -> . ctefloat
    (76) varcte -> . ctechar
    (77) varcte -> . ctestring
    (78) varcte -> . ctebool
    (21) varid -> . ID arr
    (79) cteint -> . CTEINT
    (80) ctefloat -> . CTEFLOAT
    (81) ctechar -> . CTECHAR
    (82) ctestring -> . CTESTRING
    (83) ctebool -> . TRUE
    (84) ctebool -> . FALSE

    LPAREN          shift and go to state 82
    ID              shift and go to state 80
    CTEINT          shift and go to state 69
    CTEFLOAT        shift and go to state 79
    CTECHAR         shift and go to state 66
    CTESTRING       shift and go to state 63
    TRUE            shift and go to state 62
    FALSE           shift and go to state 74

    factor                         shift and go to state 65
    ctebool                        shift and go to state 68
    leftparen                      shift and go to state 64
    varid                          shift and go to state 67
    varcte                         shift and go to state 70
    cteint                         shift and go to state 83
    ctechar                        shift and go to state 71
    exp                            shift and go to state 72
    expcomp                        shift and go to state 73
    termino                        shift and go to state 76
    ctestring                      shift and go to state 84
    expresion                      shift and go to state 87
    ctefloat                       shift and go to state 75

state 56

    (15) asignacion -> ID LSQBRACKET . RSQBRACKET EQUALS LSQBRACKET expresion comaexpresion RSQBRACKET SEMICOLON

    RSQBRACKET      shift and go to state 88


state 57

    (55) masestatuto -> estatuto masestatuto .

    RBRACKET        reduce using rule 55 (masestatuto -> estatuto masestatuto .)


state 58

    (62) funcs -> FUNCTION funcaux LPAREN args RPAREN bloque . funcs
    (62) funcs -> . FUNCTION funcaux LPAREN args RPAREN bloque funcs
    (63) funcs -> . empty
    (85) empty -> .

    FUNCTION        shift and go to state 15
    MAIN            reduce using rule 85 (empty -> .)

    funcs                          shift and go to state 89
    empty                          shift and go to state 17

state 59

    (67) masargs -> COMMA . args
    (65) args -> . tipo ID masargs
    (66) args -> . empty
    (69) tipo -> . INT
    (70) tipo -> . FLOAT
    (71) tipo -> . CHAR
    (72) tipo -> . BOOL
    (73) tipo -> . STRING
    (85) empty -> .

    INT             shift and go to state 13
    FLOAT           shift and go to state 10
    CHAR            shift and go to state 12
    BOOL            shift and go to state 14
    STRING          shift and go to state 9
    RPAREN          reduce using rule 85 (empty -> .)

    tipo                           shift and go to state 36
    empty                          shift and go to state 35
    args                           shift and go to state 90

state 60

    (65) args -> tipo ID masargs .

    RPAREN          reduce using rule 65 (args -> tipo ID masargs .)


state 61

    (68) masargs -> empty .

    RPAREN          reduce using rule 68 (masargs -> empty .)


state 62

    (83) ctebool -> TRUE .

    TIMES           reduce using rule 83 (ctebool -> TRUE .)
    DIVIDE          reduce using rule 83 (ctebool -> TRUE .)
    PLUS            reduce using rule 83 (ctebool -> TRUE .)
    MINUS           reduce using rule 83 (ctebool -> TRUE .)
    MORETHAN        reduce using rule 83 (ctebool -> TRUE .)
    LESSTHAN        reduce using rule 83 (ctebool -> TRUE .)
    NOTEQUAL        reduce using rule 83 (ctebool -> TRUE .)
    ISEQUALTO       reduce using rule 83 (ctebool -> TRUE .)
    MORETHANEQUAL   reduce using rule 83 (ctebool -> TRUE .)
    LESSTHANEQUAL   reduce using rule 83 (ctebool -> TRUE .)
    AND             reduce using rule 83 (ctebool -> TRUE .)
    OR              reduce using rule 83 (ctebool -> TRUE .)
    COMMA           reduce using rule 83 (ctebool -> TRUE .)
    RSQBRACKET      reduce using rule 83 (ctebool -> TRUE .)
    RPAREN          reduce using rule 83 (ctebool -> TRUE .)
    SEMICOLON       reduce using rule 83 (ctebool -> TRUE .)


state 63

    (82) ctestring -> CTESTRING .

    TIMES           reduce using rule 82 (ctestring -> CTESTRING .)
    DIVIDE          reduce using rule 82 (ctestring -> CTESTRING .)
    PLUS            reduce using rule 82 (ctestring -> CTESTRING .)
    MINUS           reduce using rule 82 (ctestring -> CTESTRING .)
    MORETHAN        reduce using rule 82 (ctestring -> CTESTRING .)
    LESSTHAN        reduce using rule 82 (ctestring -> CTESTRING .)
    NOTEQUAL        reduce using rule 82 (ctestring -> CTESTRING .)
    ISEQUALTO       reduce using rule 82 (ctestring -> CTESTRING .)
    MORETHANEQUAL   reduce using rule 82 (ctestring -> CTESTRING .)
    LESSTHANEQUAL   reduce using rule 82 (ctestring -> CTESTRING .)
    AND             reduce using rule 82 (ctestring -> CTESTRING .)
    OR              reduce using rule 82 (ctestring -> CTESTRING .)
    RPAREN          reduce using rule 82 (ctestring -> CTESTRING .)
    COMMA           reduce using rule 82 (ctestring -> CTESTRING .)
    SEMICOLON       reduce using rule 82 (ctestring -> CTESTRING .)
    RSQBRACKET      reduce using rule 82 (ctestring -> CTESTRING .)


state 64

    (16) factor -> leftparen . expresion rightparen
    (31) expresion -> . expcomp masexpresion addQPAO
    (41) expcomp -> . exp expcompcontinuo addQPComp
    (24) exp -> . termino masexp addQPPM
    (36) termino -> . factor masterminos addQTD
    (16) factor -> . leftparen expresion rightparen
    (17) factor -> . varcte
    (18) factor -> . varid
    (19) leftparen -> . LPAREN
    (74) varcte -> . cteint
    (75) varcte -> . ctefloat
    (76) varcte -> . ctechar
    (77) varcte -> . ctestring
    (78) varcte -> . ctebool
    (21) varid -> . ID arr
    (79) cteint -> . CTEINT
    (80) ctefloat -> . CTEFLOAT
    (81) ctechar -> . CTECHAR
    (82) ctestring -> . CTESTRING
    (83) ctebool -> . TRUE
    (84) ctebool -> . FALSE

    LPAREN          shift and go to state 82
    ID              shift and go to state 80
    CTEINT          shift and go to state 69
    CTEFLOAT        shift and go to state 79
    CTECHAR         shift and go to state 66
    CTESTRING       shift and go to state 63
    TRUE            shift and go to state 62
    FALSE           shift and go to state 74

    factor                         shift and go to state 65
    ctebool                        shift and go to state 68
    leftparen                      shift and go to state 64
    varid                          shift and go to state 67
    varcte                         shift and go to state 70
    cteint                         shift and go to state 83
    ctechar                        shift and go to state 71
    exp                            shift and go to state 72
    expcomp                        shift and go to state 73
    termino                        shift and go to state 76
    ctestring                      shift and go to state 84
    expresion                      shift and go to state 91
    ctefloat                       shift and go to state 75

state 65

    (36) termino -> factor . masterminos addQTD
    (38) masterminos -> . TIMES termino
    (39) masterminos -> . DIVIDE termino
    (40) masterminos -> . empty
    (85) empty -> .

    TIMES           shift and go to state 93
    DIVIDE          shift and go to state 94
    PLUS            reduce using rule 85 (empty -> .)
    MINUS           reduce using rule 85 (empty -> .)
    MORETHAN        reduce using rule 85 (empty -> .)
    LESSTHAN        reduce using rule 85 (empty -> .)
    NOTEQUAL        reduce using rule 85 (empty -> .)
    ISEQUALTO       reduce using rule 85 (empty -> .)
    MORETHANEQUAL   reduce using rule 85 (empty -> .)
    LESSTHANEQUAL   reduce using rule 85 (empty -> .)
    AND             reduce using rule 85 (empty -> .)
    OR              reduce using rule 85 (empty -> .)
    COMMA           reduce using rule 85 (empty -> .)
    RPAREN          reduce using rule 85 (empty -> .)
    SEMICOLON       reduce using rule 85 (empty -> .)
    RSQBRACKET      reduce using rule 85 (empty -> .)

    masterminos                    shift and go to state 92
    empty                          shift and go to state 95

state 66

    (81) ctechar -> CTECHAR .

    TIMES           reduce using rule 81 (ctechar -> CTECHAR .)
    DIVIDE          reduce using rule 81 (ctechar -> CTECHAR .)
    PLUS            reduce using rule 81 (ctechar -> CTECHAR .)
    MINUS           reduce using rule 81 (ctechar -> CTECHAR .)
    MORETHAN        reduce using rule 81 (ctechar -> CTECHAR .)
    LESSTHAN        reduce using rule 81 (ctechar -> CTECHAR .)
    NOTEQUAL        reduce using rule 81 (ctechar -> CTECHAR .)
    ISEQUALTO       reduce using rule 81 (ctechar -> CTECHAR .)
    MORETHANEQUAL   reduce using rule 81 (ctechar -> CTECHAR .)
    LESSTHANEQUAL   reduce using rule 81 (ctechar -> CTECHAR .)
    AND             reduce using rule 81 (ctechar -> CTECHAR .)
    OR              reduce using rule 81 (ctechar -> CTECHAR .)
    COMMA           reduce using rule 81 (ctechar -> CTECHAR .)
    RPAREN          reduce using rule 81 (ctechar -> CTECHAR .)
    SEMICOLON       reduce using rule 81 (ctechar -> CTECHAR .)
    RSQBRACKET      reduce using rule 81 (ctechar -> CTECHAR .)


state 67

    (18) factor -> varid .

    TIMES           reduce using rule 18 (factor -> varid .)
    DIVIDE          reduce using rule 18 (factor -> varid .)
    PLUS            reduce using rule 18 (factor -> varid .)
    MINUS           reduce using rule 18 (factor -> varid .)
    MORETHAN        reduce using rule 18 (factor -> varid .)
    LESSTHAN        reduce using rule 18 (factor -> varid .)
    NOTEQUAL        reduce using rule 18 (factor -> varid .)
    ISEQUALTO       reduce using rule 18 (factor -> varid .)
    MORETHANEQUAL   reduce using rule 18 (factor -> varid .)
    LESSTHANEQUAL   reduce using rule 18 (factor -> varid .)
    AND             reduce using rule 18 (factor -> varid .)
    OR              reduce using rule 18 (factor -> varid .)
    RPAREN          reduce using rule 18 (factor -> varid .)
    COMMA           reduce using rule 18 (factor -> varid .)
    SEMICOLON       reduce using rule 18 (factor -> varid .)
    RSQBRACKET      reduce using rule 18 (factor -> varid .)


state 68

    (78) varcte -> ctebool .

    TIMES           reduce using rule 78 (varcte -> ctebool .)
    DIVIDE          reduce using rule 78 (varcte -> ctebool .)
    PLUS            reduce using rule 78 (varcte -> ctebool .)
    MINUS           reduce using rule 78 (varcte -> ctebool .)
    MORETHAN        reduce using rule 78 (varcte -> ctebool .)
    LESSTHAN        reduce using rule 78 (varcte -> ctebool .)
    NOTEQUAL        reduce using rule 78 (varcte -> ctebool .)
    ISEQUALTO       reduce using rule 78 (varcte -> ctebool .)
    MORETHANEQUAL   reduce using rule 78 (varcte -> ctebool .)
    LESSTHANEQUAL   reduce using rule 78 (varcte -> ctebool .)
    AND             reduce using rule 78 (varcte -> ctebool .)
    OR              reduce using rule 78 (varcte -> ctebool .)
    COMMA           reduce using rule 78 (varcte -> ctebool .)
    RPAREN          reduce using rule 78 (varcte -> ctebool .)
    SEMICOLON       reduce using rule 78 (varcte -> ctebool .)
    RSQBRACKET      reduce using rule 78 (varcte -> ctebool .)


state 69

    (79) cteint -> CTEINT .

    TIMES           reduce using rule 79 (cteint -> CTEINT .)
    DIVIDE          reduce using rule 79 (cteint -> CTEINT .)
    PLUS            reduce using rule 79 (cteint -> CTEINT .)
    MINUS           reduce using rule 79 (cteint -> CTEINT .)
    MORETHAN        reduce using rule 79 (cteint -> CTEINT .)
    LESSTHAN        reduce using rule 79 (cteint -> CTEINT .)
    NOTEQUAL        reduce using rule 79 (cteint -> CTEINT .)
    ISEQUALTO       reduce using rule 79 (cteint -> CTEINT .)
    MORETHANEQUAL   reduce using rule 79 (cteint -> CTEINT .)
    LESSTHANEQUAL   reduce using rule 79 (cteint -> CTEINT .)
    AND             reduce using rule 79 (cteint -> CTEINT .)
    OR              reduce using rule 79 (cteint -> CTEINT .)
    COMMA           reduce using rule 79 (cteint -> CTEINT .)
    RPAREN          reduce using rule 79 (cteint -> CTEINT .)
    SEMICOLON       reduce using rule 79 (cteint -> CTEINT .)
    RSQBRACKET      reduce using rule 79 (cteint -> CTEINT .)


state 70

    (17) factor -> varcte .

    TIMES           reduce using rule 17 (factor -> varcte .)
    DIVIDE          reduce using rule 17 (factor -> varcte .)
    PLUS            reduce using rule 17 (factor -> varcte .)
    MINUS           reduce using rule 17 (factor -> varcte .)
    MORETHAN        reduce using rule 17 (factor -> varcte .)
    LESSTHAN        reduce using rule 17 (factor -> varcte .)
    NOTEQUAL        reduce using rule 17 (factor -> varcte .)
    ISEQUALTO       reduce using rule 17 (factor -> varcte .)
    MORETHANEQUAL   reduce using rule 17 (factor -> varcte .)
    LESSTHANEQUAL   reduce using rule 17 (factor -> varcte .)
    AND             reduce using rule 17 (factor -> varcte .)
    OR              reduce using rule 17 (factor -> varcte .)
    RPAREN          reduce using rule 17 (factor -> varcte .)
    COMMA           reduce using rule 17 (factor -> varcte .)
    SEMICOLON       reduce using rule 17 (factor -> varcte .)
    RSQBRACKET      reduce using rule 17 (factor -> varcte .)


state 71

    (76) varcte -> ctechar .

    TIMES           reduce using rule 76 (varcte -> ctechar .)
    DIVIDE          reduce using rule 76 (varcte -> ctechar .)
    PLUS            reduce using rule 76 (varcte -> ctechar .)
    MINUS           reduce using rule 76 (varcte -> ctechar .)
    MORETHAN        reduce using rule 76 (varcte -> ctechar .)
    LESSTHAN        reduce using rule 76 (varcte -> ctechar .)
    NOTEQUAL        reduce using rule 76 (varcte -> ctechar .)
    ISEQUALTO       reduce using rule 76 (varcte -> ctechar .)
    MORETHANEQUAL   reduce using rule 76 (varcte -> ctechar .)
    LESSTHANEQUAL   reduce using rule 76 (varcte -> ctechar .)
    AND             reduce using rule 76 (varcte -> ctechar .)
    OR              reduce using rule 76 (varcte -> ctechar .)
    COMMA           reduce using rule 76 (varcte -> ctechar .)
    RPAREN          reduce using rule 76 (varcte -> ctechar .)
    SEMICOLON       reduce using rule 76 (varcte -> ctechar .)
    RSQBRACKET      reduce using rule 76 (varcte -> ctechar .)


state 72

    (41) expcomp -> exp . expcompcontinuo addQPComp
    (43) expcompcontinuo -> . MORETHAN expcomp
    (44) expcompcontinuo -> . LESSTHAN expcomp
    (45) expcompcontinuo -> . NOTEQUAL expcomp
    (46) expcompcontinuo -> . ISEQUALTO expcomp
    (47) expcompcontinuo -> . MORETHANEQUAL expcomp
    (48) expcompcontinuo -> . LESSTHANEQUAL expcomp
    (49) expcompcontinuo -> . empty
    (85) empty -> .

    MORETHAN        shift and go to state 103
    LESSTHAN        shift and go to state 99
    NOTEQUAL        shift and go to state 96
    ISEQUALTO       shift and go to state 97
    MORETHANEQUAL   shift and go to state 102
    LESSTHANEQUAL   shift and go to state 101
    AND             reduce using rule 85 (empty -> .)
    OR              reduce using rule 85 (empty -> .)
    COMMA           reduce using rule 85 (empty -> .)
    RPAREN          reduce using rule 85 (empty -> .)
    SEMICOLON       reduce using rule 85 (empty -> .)
    RSQBRACKET      reduce using rule 85 (empty -> .)

    expcompcontinuo                shift and go to state 100
    empty                          shift and go to state 98

state 73

    (31) expresion -> expcomp . masexpresion addQPAO
    (33) masexpresion -> . AND expresion
    (34) masexpresion -> . OR expresion
    (35) masexpresion -> . empty
    (85) empty -> .

    AND             shift and go to state 106
    OR              shift and go to state 104
    COMMA           reduce using rule 85 (empty -> .)
    RPAREN          reduce using rule 85 (empty -> .)
    SEMICOLON       reduce using rule 85 (empty -> .)
    RSQBRACKET      reduce using rule 85 (empty -> .)

    masexpresion                   shift and go to state 105
    empty                          shift and go to state 107

state 74

    (84) ctebool -> FALSE .

    TIMES           reduce using rule 84 (ctebool -> FALSE .)
    DIVIDE          reduce using rule 84 (ctebool -> FALSE .)
    PLUS            reduce using rule 84 (ctebool -> FALSE .)
    MINUS           reduce using rule 84 (ctebool -> FALSE .)
    MORETHAN        reduce using rule 84 (ctebool -> FALSE .)
    LESSTHAN        reduce using rule 84 (ctebool -> FALSE .)
    NOTEQUAL        reduce using rule 84 (ctebool -> FALSE .)
    ISEQUALTO       reduce using rule 84 (ctebool -> FALSE .)
    MORETHANEQUAL   reduce using rule 84 (ctebool -> FALSE .)
    LESSTHANEQUAL   reduce using rule 84 (ctebool -> FALSE .)
    AND             reduce using rule 84 (ctebool -> FALSE .)
    OR              reduce using rule 84 (ctebool -> FALSE .)
    COMMA           reduce using rule 84 (ctebool -> FALSE .)
    RSQBRACKET      reduce using rule 84 (ctebool -> FALSE .)
    RPAREN          reduce using rule 84 (ctebool -> FALSE .)
    SEMICOLON       reduce using rule 84 (ctebool -> FALSE .)


state 75

    (75) varcte -> ctefloat .

    TIMES           reduce using rule 75 (varcte -> ctefloat .)
    DIVIDE          reduce using rule 75 (varcte -> ctefloat .)
    PLUS            reduce using rule 75 (varcte -> ctefloat .)
    MINUS           reduce using rule 75 (varcte -> ctefloat .)
    MORETHAN        reduce using rule 75 (varcte -> ctefloat .)
    LESSTHAN        reduce using rule 75 (varcte -> ctefloat .)
    NOTEQUAL        reduce using rule 75 (varcte -> ctefloat .)
    ISEQUALTO       reduce using rule 75 (varcte -> ctefloat .)
    MORETHANEQUAL   reduce using rule 75 (varcte -> ctefloat .)
    LESSTHANEQUAL   reduce using rule 75 (varcte -> ctefloat .)
    AND             reduce using rule 75 (varcte -> ctefloat .)
    OR              reduce using rule 75 (varcte -> ctefloat .)
    COMMA           reduce using rule 75 (varcte -> ctefloat .)
    RPAREN          reduce using rule 75 (varcte -> ctefloat .)
    SEMICOLON       reduce using rule 75 (varcte -> ctefloat .)
    RSQBRACKET      reduce using rule 75 (varcte -> ctefloat .)


state 76

    (24) exp -> termino . masexp addQPPM
    (26) masexp -> . PLUS exp
    (27) masexp -> . MINUS exp
    (28) masexp -> . empty
    (85) empty -> .

    PLUS            shift and go to state 109
    MINUS           shift and go to state 110
    MORETHAN        reduce using rule 85 (empty -> .)
    LESSTHAN        reduce using rule 85 (empty -> .)
    NOTEQUAL        reduce using rule 85 (empty -> .)
    ISEQUALTO       reduce using rule 85 (empty -> .)
    MORETHANEQUAL   reduce using rule 85 (empty -> .)
    LESSTHANEQUAL   reduce using rule 85 (empty -> .)
    AND             reduce using rule 85 (empty -> .)
    OR              reduce using rule 85 (empty -> .)
    COMMA           reduce using rule 85 (empty -> .)
    RPAREN          reduce using rule 85 (empty -> .)
    SEMICOLON       reduce using rule 85 (empty -> .)
    RSQBRACKET      reduce using rule 85 (empty -> .)

    masexp                         shift and go to state 108
    empty                          shift and go to state 111

state 77

    (11) listaprint -> ctestring . masprint
    (77) varcte -> ctestring .
    (12) masprint -> . COMMA listaprint
    (13) masprint -> . empty
    (85) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for RPAREN resolved using rule 77 (varcte -> ctestring .)
    TIMES           reduce using rule 77 (varcte -> ctestring .)
    DIVIDE          reduce using rule 77 (varcte -> ctestring .)
    PLUS            reduce using rule 77 (varcte -> ctestring .)
    MINUS           reduce using rule 77 (varcte -> ctestring .)
    MORETHAN        reduce using rule 77 (varcte -> ctestring .)
    LESSTHAN        reduce using rule 77 (varcte -> ctestring .)
    NOTEQUAL        reduce using rule 77 (varcte -> ctestring .)
    ISEQUALTO       reduce using rule 77 (varcte -> ctestring .)
    MORETHANEQUAL   reduce using rule 77 (varcte -> ctestring .)
    LESSTHANEQUAL   reduce using rule 77 (varcte -> ctestring .)
    AND             reduce using rule 77 (varcte -> ctestring .)
    OR              reduce using rule 77 (varcte -> ctestring .)
    RPAREN          reduce using rule 77 (varcte -> ctestring .)
    COMMA           shift and go to state 112

  ! COMMA           [ reduce using rule 77 (varcte -> ctestring .) ]
  ! RPAREN          [ reduce using rule 85 (empty -> .) ]

    empty                          shift and go to state 113
    masprint                       shift and go to state 114

state 78

    (10) listaprint -> expresion . masprint
    (12) masprint -> . COMMA listaprint
    (13) masprint -> . empty
    (85) empty -> .

    COMMA           shift and go to state 112
    RPAREN          reduce using rule 85 (empty -> .)

    empty                          shift and go to state 113
    masprint                       shift and go to state 115

state 79

    (80) ctefloat -> CTEFLOAT .

    TIMES           reduce using rule 80 (ctefloat -> CTEFLOAT .)
    DIVIDE          reduce using rule 80 (ctefloat -> CTEFLOAT .)
    PLUS            reduce using rule 80 (ctefloat -> CTEFLOAT .)
    MINUS           reduce using rule 80 (ctefloat -> CTEFLOAT .)
    MORETHAN        reduce using rule 80 (ctefloat -> CTEFLOAT .)
    LESSTHAN        reduce using rule 80 (ctefloat -> CTEFLOAT .)
    NOTEQUAL        reduce using rule 80 (ctefloat -> CTEFLOAT .)
    ISEQUALTO       reduce using rule 80 (ctefloat -> CTEFLOAT .)
    MORETHANEQUAL   reduce using rule 80 (ctefloat -> CTEFLOAT .)
    LESSTHANEQUAL   reduce using rule 80 (ctefloat -> CTEFLOAT .)
    AND             reduce using rule 80 (ctefloat -> CTEFLOAT .)
    OR              reduce using rule 80 (ctefloat -> CTEFLOAT .)
    COMMA           reduce using rule 80 (ctefloat -> CTEFLOAT .)
    RPAREN          reduce using rule 80 (ctefloat -> CTEFLOAT .)
    SEMICOLON       reduce using rule 80 (ctefloat -> CTEFLOAT .)
    RSQBRACKET      reduce using rule 80 (ctefloat -> CTEFLOAT .)


state 80

    (21) varid -> ID . arr
    (22) arr -> . LSQBRACKET RSQBRACKET
    (23) arr -> . empty
    (85) empty -> .

    LSQBRACKET      shift and go to state 118
    TIMES           reduce using rule 85 (empty -> .)
    DIVIDE          reduce using rule 85 (empty -> .)
    PLUS            reduce using rule 85 (empty -> .)
    MINUS           reduce using rule 85 (empty -> .)
    MORETHAN        reduce using rule 85 (empty -> .)
    LESSTHAN        reduce using rule 85 (empty -> .)
    NOTEQUAL        reduce using rule 85 (empty -> .)
    ISEQUALTO       reduce using rule 85 (empty -> .)
    MORETHANEQUAL   reduce using rule 85 (empty -> .)
    LESSTHANEQUAL   reduce using rule 85 (empty -> .)
    AND             reduce using rule 85 (empty -> .)
    OR              reduce using rule 85 (empty -> .)
    COMMA           reduce using rule 85 (empty -> .)
    RPAREN          reduce using rule 85 (empty -> .)
    SEMICOLON       reduce using rule 85 (empty -> .)
    RSQBRACKET      reduce using rule 85 (empty -> .)

    empty                          shift and go to state 116
    arr                            shift and go to state 117

state 81

    (9) escritura -> PRINT LPAREN listaprint . RPAREN SEMICOLON

    RPAREN          shift and go to state 119


state 82

    (19) leftparen -> LPAREN .

    LPAREN          reduce using rule 19 (leftparen -> LPAREN .)
    ID              reduce using rule 19 (leftparen -> LPAREN .)
    CTEINT          reduce using rule 19 (leftparen -> LPAREN .)
    CTEFLOAT        reduce using rule 19 (leftparen -> LPAREN .)
    CTECHAR         reduce using rule 19 (leftparen -> LPAREN .)
    CTESTRING       reduce using rule 19 (leftparen -> LPAREN .)
    TRUE            reduce using rule 19 (leftparen -> LPAREN .)
    FALSE           reduce using rule 19 (leftparen -> LPAREN .)


state 83

    (74) varcte -> cteint .

    TIMES           reduce using rule 74 (varcte -> cteint .)
    DIVIDE          reduce using rule 74 (varcte -> cteint .)
    PLUS            reduce using rule 74 (varcte -> cteint .)
    MINUS           reduce using rule 74 (varcte -> cteint .)
    MORETHAN        reduce using rule 74 (varcte -> cteint .)
    LESSTHAN        reduce using rule 74 (varcte -> cteint .)
    NOTEQUAL        reduce using rule 74 (varcte -> cteint .)
    ISEQUALTO       reduce using rule 74 (varcte -> cteint .)
    MORETHANEQUAL   reduce using rule 74 (varcte -> cteint .)
    LESSTHANEQUAL   reduce using rule 74 (varcte -> cteint .)
    AND             reduce using rule 74 (varcte -> cteint .)
    OR              reduce using rule 74 (varcte -> cteint .)
    COMMA           reduce using rule 74 (varcte -> cteint .)
    RPAREN          reduce using rule 74 (varcte -> cteint .)
    SEMICOLON       reduce using rule 74 (varcte -> cteint .)
    RSQBRACKET      reduce using rule 74 (varcte -> cteint .)


state 84

    (77) varcte -> ctestring .

    TIMES           reduce using rule 77 (varcte -> ctestring .)
    DIVIDE          reduce using rule 77 (varcte -> ctestring .)
    PLUS            reduce using rule 77 (varcte -> ctestring .)
    MINUS           reduce using rule 77 (varcte -> ctestring .)
    MORETHAN        reduce using rule 77 (varcte -> ctestring .)
    LESSTHAN        reduce using rule 77 (varcte -> ctestring .)
    NOTEQUAL        reduce using rule 77 (varcte -> ctestring .)
    ISEQUALTO       reduce using rule 77 (varcte -> ctestring .)
    MORETHANEQUAL   reduce using rule 77 (varcte -> ctestring .)
    LESSTHANEQUAL   reduce using rule 77 (varcte -> ctestring .)
    AND             reduce using rule 77 (varcte -> ctestring .)
    OR              reduce using rule 77 (varcte -> ctestring .)
    COMMA           reduce using rule 77 (varcte -> ctestring .)
    RPAREN          reduce using rule 77 (varcte -> ctestring .)
    SEMICOLON       reduce using rule 77 (varcte -> ctestring .)
    RSQBRACKET      reduce using rule 77 (varcte -> ctestring .)


state 85

    (4) condicion -> IF LPAREN expresion . RPAREN bloque masbloque

    RPAREN          shift and go to state 120


state 86

    (8) ciclo -> WHILE LPAREN expresion . RPAREN bloque

    RPAREN          shift and go to state 121


state 87

    (14) asignacion -> ID EQUALS expresion . SEMICOLON

    SEMICOLON       shift and go to state 122


state 88

    (15) asignacion -> ID LSQBRACKET RSQBRACKET . EQUALS LSQBRACKET expresion comaexpresion RSQBRACKET SEMICOLON

    EQUALS          shift and go to state 123


state 89

    (62) funcs -> FUNCTION funcaux LPAREN args RPAREN bloque funcs .

    MAIN            reduce using rule 62 (funcs -> FUNCTION funcaux LPAREN args RPAREN bloque funcs .)


state 90

    (67) masargs -> COMMA args .

    RPAREN          reduce using rule 67 (masargs -> COMMA args .)


state 91

    (16) factor -> leftparen expresion . rightparen
    (20) rightparen -> . RPAREN

    RPAREN          shift and go to state 124

    rightparen                     shift and go to state 125

state 92

    (36) termino -> factor masterminos . addQTD
    (37) addQTD -> . empty
    (85) empty -> .

    PLUS            reduce using rule 85 (empty -> .)
    MINUS           reduce using rule 85 (empty -> .)
    MORETHAN        reduce using rule 85 (empty -> .)
    LESSTHAN        reduce using rule 85 (empty -> .)
    NOTEQUAL        reduce using rule 85 (empty -> .)
    ISEQUALTO       reduce using rule 85 (empty -> .)
    MORETHANEQUAL   reduce using rule 85 (empty -> .)
    LESSTHANEQUAL   reduce using rule 85 (empty -> .)
    AND             reduce using rule 85 (empty -> .)
    OR              reduce using rule 85 (empty -> .)
    COMMA           reduce using rule 85 (empty -> .)
    RPAREN          reduce using rule 85 (empty -> .)
    SEMICOLON       reduce using rule 85 (empty -> .)
    RSQBRACKET      reduce using rule 85 (empty -> .)

    addQTD                         shift and go to state 126
    empty                          shift and go to state 127

state 93

    (38) masterminos -> TIMES . termino
    (36) termino -> . factor masterminos addQTD
    (16) factor -> . leftparen expresion rightparen
    (17) factor -> . varcte
    (18) factor -> . varid
    (19) leftparen -> . LPAREN
    (74) varcte -> . cteint
    (75) varcte -> . ctefloat
    (76) varcte -> . ctechar
    (77) varcte -> . ctestring
    (78) varcte -> . ctebool
    (21) varid -> . ID arr
    (79) cteint -> . CTEINT
    (80) ctefloat -> . CTEFLOAT
    (81) ctechar -> . CTECHAR
    (82) ctestring -> . CTESTRING
    (83) ctebool -> . TRUE
    (84) ctebool -> . FALSE

    LPAREN          shift and go to state 82
    ID              shift and go to state 80
    CTEINT          shift and go to state 69
    CTEFLOAT        shift and go to state 79
    CTECHAR         shift and go to state 66
    CTESTRING       shift and go to state 63
    TRUE            shift and go to state 62
    FALSE           shift and go to state 74

    termino                        shift and go to state 128
    ctestring                      shift and go to state 84
    factor                         shift and go to state 65
    ctebool                        shift and go to state 68
    leftparen                      shift and go to state 64
    varid                          shift and go to state 67
    ctefloat                       shift and go to state 75
    cteint                         shift and go to state 83
    varcte                         shift and go to state 70
    ctechar                        shift and go to state 71

state 94

    (39) masterminos -> DIVIDE . termino
    (36) termino -> . factor masterminos addQTD
    (16) factor -> . leftparen expresion rightparen
    (17) factor -> . varcte
    (18) factor -> . varid
    (19) leftparen -> . LPAREN
    (74) varcte -> . cteint
    (75) varcte -> . ctefloat
    (76) varcte -> . ctechar
    (77) varcte -> . ctestring
    (78) varcte -> . ctebool
    (21) varid -> . ID arr
    (79) cteint -> . CTEINT
    (80) ctefloat -> . CTEFLOAT
    (81) ctechar -> . CTECHAR
    (82) ctestring -> . CTESTRING
    (83) ctebool -> . TRUE
    (84) ctebool -> . FALSE

    LPAREN          shift and go to state 82
    ID              shift and go to state 80
    CTEINT          shift and go to state 69
    CTEFLOAT        shift and go to state 79
    CTECHAR         shift and go to state 66
    CTESTRING       shift and go to state 63
    TRUE            shift and go to state 62
    FALSE           shift and go to state 74

    termino                        shift and go to state 129
    ctestring                      shift and go to state 84
    factor                         shift and go to state 65
    ctebool                        shift and go to state 68
    leftparen                      shift and go to state 64
    varid                          shift and go to state 67
    ctefloat                       shift and go to state 75
    cteint                         shift and go to state 83
    varcte                         shift and go to state 70
    ctechar                        shift and go to state 71

state 95

    (40) masterminos -> empty .

    PLUS            reduce using rule 40 (masterminos -> empty .)
    MINUS           reduce using rule 40 (masterminos -> empty .)
    MORETHAN        reduce using rule 40 (masterminos -> empty .)
    LESSTHAN        reduce using rule 40 (masterminos -> empty .)
    NOTEQUAL        reduce using rule 40 (masterminos -> empty .)
    ISEQUALTO       reduce using rule 40 (masterminos -> empty .)
    MORETHANEQUAL   reduce using rule 40 (masterminos -> empty .)
    LESSTHANEQUAL   reduce using rule 40 (masterminos -> empty .)
    AND             reduce using rule 40 (masterminos -> empty .)
    OR              reduce using rule 40 (masterminos -> empty .)
    COMMA           reduce using rule 40 (masterminos -> empty .)
    RPAREN          reduce using rule 40 (masterminos -> empty .)
    SEMICOLON       reduce using rule 40 (masterminos -> empty .)
    RSQBRACKET      reduce using rule 40 (masterminos -> empty .)


state 96

    (45) expcompcontinuo -> NOTEQUAL . expcomp
    (41) expcomp -> . exp expcompcontinuo addQPComp
    (24) exp -> . termino masexp addQPPM
    (36) termino -> . factor masterminos addQTD
    (16) factor -> . leftparen expresion rightparen
    (17) factor -> . varcte
    (18) factor -> . varid
    (19) leftparen -> . LPAREN
    (74) varcte -> . cteint
    (75) varcte -> . ctefloat
    (76) varcte -> . ctechar
    (77) varcte -> . ctestring
    (78) varcte -> . ctebool
    (21) varid -> . ID arr
    (79) cteint -> . CTEINT
    (80) ctefloat -> . CTEFLOAT
    (81) ctechar -> . CTECHAR
    (82) ctestring -> . CTESTRING
    (83) ctebool -> . TRUE
    (84) ctebool -> . FALSE

    LPAREN          shift and go to state 82
    ID              shift and go to state 80
    CTEINT          shift and go to state 69
    CTEFLOAT        shift and go to state 79
    CTECHAR         shift and go to state 66
    CTESTRING       shift and go to state 63
    TRUE            shift and go to state 62
    FALSE           shift and go to state 74

    termino                        shift and go to state 76
    ctefloat                       shift and go to state 75
    factor                         shift and go to state 65
    varid                          shift and go to state 67
    leftparen                      shift and go to state 64
    exp                            shift and go to state 72
    varcte                         shift and go to state 70
    cteint                         shift and go to state 83
    ctechar                        shift and go to state 71
    ctebool                        shift and go to state 68
    expcomp                        shift and go to state 130
    ctestring                      shift and go to state 84

state 97

    (46) expcompcontinuo -> ISEQUALTO . expcomp
    (41) expcomp -> . exp expcompcontinuo addQPComp
    (24) exp -> . termino masexp addQPPM
    (36) termino -> . factor masterminos addQTD
    (16) factor -> . leftparen expresion rightparen
    (17) factor -> . varcte
    (18) factor -> . varid
    (19) leftparen -> . LPAREN
    (74) varcte -> . cteint
    (75) varcte -> . ctefloat
    (76) varcte -> . ctechar
    (77) varcte -> . ctestring
    (78) varcte -> . ctebool
    (21) varid -> . ID arr
    (79) cteint -> . CTEINT
    (80) ctefloat -> . CTEFLOAT
    (81) ctechar -> . CTECHAR
    (82) ctestring -> . CTESTRING
    (83) ctebool -> . TRUE
    (84) ctebool -> . FALSE

    LPAREN          shift and go to state 82
    ID              shift and go to state 80
    CTEINT          shift and go to state 69
    CTEFLOAT        shift and go to state 79
    CTECHAR         shift and go to state 66
    CTESTRING       shift and go to state 63
    TRUE            shift and go to state 62
    FALSE           shift and go to state 74

    termino                        shift and go to state 76
    ctefloat                       shift and go to state 75
    factor                         shift and go to state 65
    varid                          shift and go to state 67
    leftparen                      shift and go to state 64
    exp                            shift and go to state 72
    varcte                         shift and go to state 70
    cteint                         shift and go to state 83
    ctechar                        shift and go to state 71
    ctebool                        shift and go to state 68
    expcomp                        shift and go to state 131
    ctestring                      shift and go to state 84

state 98

    (49) expcompcontinuo -> empty .

    AND             reduce using rule 49 (expcompcontinuo -> empty .)
    OR              reduce using rule 49 (expcompcontinuo -> empty .)
    COMMA           reduce using rule 49 (expcompcontinuo -> empty .)
    RPAREN          reduce using rule 49 (expcompcontinuo -> empty .)
    SEMICOLON       reduce using rule 49 (expcompcontinuo -> empty .)
    RSQBRACKET      reduce using rule 49 (expcompcontinuo -> empty .)


state 99

    (44) expcompcontinuo -> LESSTHAN . expcomp
    (41) expcomp -> . exp expcompcontinuo addQPComp
    (24) exp -> . termino masexp addQPPM
    (36) termino -> . factor masterminos addQTD
    (16) factor -> . leftparen expresion rightparen
    (17) factor -> . varcte
    (18) factor -> . varid
    (19) leftparen -> . LPAREN
    (74) varcte -> . cteint
    (75) varcte -> . ctefloat
    (76) varcte -> . ctechar
    (77) varcte -> . ctestring
    (78) varcte -> . ctebool
    (21) varid -> . ID arr
    (79) cteint -> . CTEINT
    (80) ctefloat -> . CTEFLOAT
    (81) ctechar -> . CTECHAR
    (82) ctestring -> . CTESTRING
    (83) ctebool -> . TRUE
    (84) ctebool -> . FALSE

    LPAREN          shift and go to state 82
    ID              shift and go to state 80
    CTEINT          shift and go to state 69
    CTEFLOAT        shift and go to state 79
    CTECHAR         shift and go to state 66
    CTESTRING       shift and go to state 63
    TRUE            shift and go to state 62
    FALSE           shift and go to state 74

    termino                        shift and go to state 76
    ctefloat                       shift and go to state 75
    factor                         shift and go to state 65
    varid                          shift and go to state 67
    leftparen                      shift and go to state 64
    exp                            shift and go to state 72
    varcte                         shift and go to state 70
    cteint                         shift and go to state 83
    ctechar                        shift and go to state 71
    ctebool                        shift and go to state 68
    expcomp                        shift and go to state 132
    ctestring                      shift and go to state 84

state 100

    (41) expcomp -> exp expcompcontinuo . addQPComp
    (42) addQPComp -> . empty
    (85) empty -> .

    AND             reduce using rule 85 (empty -> .)
    OR              reduce using rule 85 (empty -> .)
    COMMA           reduce using rule 85 (empty -> .)
    RPAREN          reduce using rule 85 (empty -> .)
    SEMICOLON       reduce using rule 85 (empty -> .)
    RSQBRACKET      reduce using rule 85 (empty -> .)

    addQPComp                      shift and go to state 133
    empty                          shift and go to state 134

state 101

    (48) expcompcontinuo -> LESSTHANEQUAL . expcomp
    (41) expcomp -> . exp expcompcontinuo addQPComp
    (24) exp -> . termino masexp addQPPM
    (36) termino -> . factor masterminos addQTD
    (16) factor -> . leftparen expresion rightparen
    (17) factor -> . varcte
    (18) factor -> . varid
    (19) leftparen -> . LPAREN
    (74) varcte -> . cteint
    (75) varcte -> . ctefloat
    (76) varcte -> . ctechar
    (77) varcte -> . ctestring
    (78) varcte -> . ctebool
    (21) varid -> . ID arr
    (79) cteint -> . CTEINT
    (80) ctefloat -> . CTEFLOAT
    (81) ctechar -> . CTECHAR
    (82) ctestring -> . CTESTRING
    (83) ctebool -> . TRUE
    (84) ctebool -> . FALSE

    LPAREN          shift and go to state 82
    ID              shift and go to state 80
    CTEINT          shift and go to state 69
    CTEFLOAT        shift and go to state 79
    CTECHAR         shift and go to state 66
    CTESTRING       shift and go to state 63
    TRUE            shift and go to state 62
    FALSE           shift and go to state 74

    termino                        shift and go to state 76
    ctefloat                       shift and go to state 75
    factor                         shift and go to state 65
    varid                          shift and go to state 67
    leftparen                      shift and go to state 64
    exp                            shift and go to state 72
    varcte                         shift and go to state 70
    cteint                         shift and go to state 83
    ctechar                        shift and go to state 71
    ctebool                        shift and go to state 68
    expcomp                        shift and go to state 135
    ctestring                      shift and go to state 84

state 102

    (47) expcompcontinuo -> MORETHANEQUAL . expcomp
    (41) expcomp -> . exp expcompcontinuo addQPComp
    (24) exp -> . termino masexp addQPPM
    (36) termino -> . factor masterminos addQTD
    (16) factor -> . leftparen expresion rightparen
    (17) factor -> . varcte
    (18) factor -> . varid
    (19) leftparen -> . LPAREN
    (74) varcte -> . cteint
    (75) varcte -> . ctefloat
    (76) varcte -> . ctechar
    (77) varcte -> . ctestring
    (78) varcte -> . ctebool
    (21) varid -> . ID arr
    (79) cteint -> . CTEINT
    (80) ctefloat -> . CTEFLOAT
    (81) ctechar -> . CTECHAR
    (82) ctestring -> . CTESTRING
    (83) ctebool -> . TRUE
    (84) ctebool -> . FALSE

    LPAREN          shift and go to state 82
    ID              shift and go to state 80
    CTEINT          shift and go to state 69
    CTEFLOAT        shift and go to state 79
    CTECHAR         shift and go to state 66
    CTESTRING       shift and go to state 63
    TRUE            shift and go to state 62
    FALSE           shift and go to state 74

    termino                        shift and go to state 76
    ctefloat                       shift and go to state 75
    factor                         shift and go to state 65
    varid                          shift and go to state 67
    leftparen                      shift and go to state 64
    exp                            shift and go to state 72
    varcte                         shift and go to state 70
    cteint                         shift and go to state 83
    ctechar                        shift and go to state 71
    ctebool                        shift and go to state 68
    expcomp                        shift and go to state 136
    ctestring                      shift and go to state 84

state 103

    (43) expcompcontinuo -> MORETHAN . expcomp
    (41) expcomp -> . exp expcompcontinuo addQPComp
    (24) exp -> . termino masexp addQPPM
    (36) termino -> . factor masterminos addQTD
    (16) factor -> . leftparen expresion rightparen
    (17) factor -> . varcte
    (18) factor -> . varid
    (19) leftparen -> . LPAREN
    (74) varcte -> . cteint
    (75) varcte -> . ctefloat
    (76) varcte -> . ctechar
    (77) varcte -> . ctestring
    (78) varcte -> . ctebool
    (21) varid -> . ID arr
    (79) cteint -> . CTEINT
    (80) ctefloat -> . CTEFLOAT
    (81) ctechar -> . CTECHAR
    (82) ctestring -> . CTESTRING
    (83) ctebool -> . TRUE
    (84) ctebool -> . FALSE

    LPAREN          shift and go to state 82
    ID              shift and go to state 80
    CTEINT          shift and go to state 69
    CTEFLOAT        shift and go to state 79
    CTECHAR         shift and go to state 66
    CTESTRING       shift and go to state 63
    TRUE            shift and go to state 62
    FALSE           shift and go to state 74

    termino                        shift and go to state 76
    ctefloat                       shift and go to state 75
    factor                         shift and go to state 65
    varid                          shift and go to state 67
    leftparen                      shift and go to state 64
    exp                            shift and go to state 72
    varcte                         shift and go to state 70
    cteint                         shift and go to state 83
    ctechar                        shift and go to state 71
    ctebool                        shift and go to state 68
    expcomp                        shift and go to state 137
    ctestring                      shift and go to state 84

state 104

    (34) masexpresion -> OR . expresion
    (31) expresion -> . expcomp masexpresion addQPAO
    (41) expcomp -> . exp expcompcontinuo addQPComp
    (24) exp -> . termino masexp addQPPM
    (36) termino -> . factor masterminos addQTD
    (16) factor -> . leftparen expresion rightparen
    (17) factor -> . varcte
    (18) factor -> . varid
    (19) leftparen -> . LPAREN
    (74) varcte -> . cteint
    (75) varcte -> . ctefloat
    (76) varcte -> . ctechar
    (77) varcte -> . ctestring
    (78) varcte -> . ctebool
    (21) varid -> . ID arr
    (79) cteint -> . CTEINT
    (80) ctefloat -> . CTEFLOAT
    (81) ctechar -> . CTECHAR
    (82) ctestring -> . CTESTRING
    (83) ctebool -> . TRUE
    (84) ctebool -> . FALSE

    LPAREN          shift and go to state 82
    ID              shift and go to state 80
    CTEINT          shift and go to state 69
    CTEFLOAT        shift and go to state 79
    CTECHAR         shift and go to state 66
    CTESTRING       shift and go to state 63
    TRUE            shift and go to state 62
    FALSE           shift and go to state 74

    factor                         shift and go to state 65
    ctebool                        shift and go to state 68
    leftparen                      shift and go to state 64
    varid                          shift and go to state 67
    varcte                         shift and go to state 70
    cteint                         shift and go to state 83
    ctechar                        shift and go to state 71
    exp                            shift and go to state 72
    expcomp                        shift and go to state 73
    termino                        shift and go to state 76
    ctestring                      shift and go to state 84
    expresion                      shift and go to state 138
    ctefloat                       shift and go to state 75

state 105

    (31) expresion -> expcomp masexpresion . addQPAO
    (32) addQPAO -> . empty
    (85) empty -> .

    COMMA           reduce using rule 85 (empty -> .)
    RPAREN          reduce using rule 85 (empty -> .)
    SEMICOLON       reduce using rule 85 (empty -> .)
    RSQBRACKET      reduce using rule 85 (empty -> .)

    empty                          shift and go to state 139
    addQPAO                        shift and go to state 140

state 106

    (33) masexpresion -> AND . expresion
    (31) expresion -> . expcomp masexpresion addQPAO
    (41) expcomp -> . exp expcompcontinuo addQPComp
    (24) exp -> . termino masexp addQPPM
    (36) termino -> . factor masterminos addQTD
    (16) factor -> . leftparen expresion rightparen
    (17) factor -> . varcte
    (18) factor -> . varid
    (19) leftparen -> . LPAREN
    (74) varcte -> . cteint
    (75) varcte -> . ctefloat
    (76) varcte -> . ctechar
    (77) varcte -> . ctestring
    (78) varcte -> . ctebool
    (21) varid -> . ID arr
    (79) cteint -> . CTEINT
    (80) ctefloat -> . CTEFLOAT
    (81) ctechar -> . CTECHAR
    (82) ctestring -> . CTESTRING
    (83) ctebool -> . TRUE
    (84) ctebool -> . FALSE

    LPAREN          shift and go to state 82
    ID              shift and go to state 80
    CTEINT          shift and go to state 69
    CTEFLOAT        shift and go to state 79
    CTECHAR         shift and go to state 66
    CTESTRING       shift and go to state 63
    TRUE            shift and go to state 62
    FALSE           shift and go to state 74

    factor                         shift and go to state 65
    ctebool                        shift and go to state 68
    leftparen                      shift and go to state 64
    varid                          shift and go to state 67
    varcte                         shift and go to state 70
    cteint                         shift and go to state 83
    ctechar                        shift and go to state 71
    exp                            shift and go to state 72
    expcomp                        shift and go to state 73
    termino                        shift and go to state 76
    ctestring                      shift and go to state 84
    expresion                      shift and go to state 141
    ctefloat                       shift and go to state 75

state 107

    (35) masexpresion -> empty .

    COMMA           reduce using rule 35 (masexpresion -> empty .)
    RPAREN          reduce using rule 35 (masexpresion -> empty .)
    SEMICOLON       reduce using rule 35 (masexpresion -> empty .)
    RSQBRACKET      reduce using rule 35 (masexpresion -> empty .)


state 108

    (24) exp -> termino masexp . addQPPM
    (25) addQPPM -> . empty
    (85) empty -> .

    MORETHAN        reduce using rule 85 (empty -> .)
    LESSTHAN        reduce using rule 85 (empty -> .)
    NOTEQUAL        reduce using rule 85 (empty -> .)
    ISEQUALTO       reduce using rule 85 (empty -> .)
    MORETHANEQUAL   reduce using rule 85 (empty -> .)
    LESSTHANEQUAL   reduce using rule 85 (empty -> .)
    AND             reduce using rule 85 (empty -> .)
    OR              reduce using rule 85 (empty -> .)
    COMMA           reduce using rule 85 (empty -> .)
    RPAREN          reduce using rule 85 (empty -> .)
    SEMICOLON       reduce using rule 85 (empty -> .)
    RSQBRACKET      reduce using rule 85 (empty -> .)

    addQPPM                        shift and go to state 142
    empty                          shift and go to state 143

state 109

    (26) masexp -> PLUS . exp
    (24) exp -> . termino masexp addQPPM
    (36) termino -> . factor masterminos addQTD
    (16) factor -> . leftparen expresion rightparen
    (17) factor -> . varcte
    (18) factor -> . varid
    (19) leftparen -> . LPAREN
    (74) varcte -> . cteint
    (75) varcte -> . ctefloat
    (76) varcte -> . ctechar
    (77) varcte -> . ctestring
    (78) varcte -> . ctebool
    (21) varid -> . ID arr
    (79) cteint -> . CTEINT
    (80) ctefloat -> . CTEFLOAT
    (81) ctechar -> . CTECHAR
    (82) ctestring -> . CTESTRING
    (83) ctebool -> . TRUE
    (84) ctebool -> . FALSE

    LPAREN          shift and go to state 82
    ID              shift and go to state 80
    CTEINT          shift and go to state 69
    CTEFLOAT        shift and go to state 79
    CTECHAR         shift and go to state 66
    CTESTRING       shift and go to state 63
    TRUE            shift and go to state 62
    FALSE           shift and go to state 74

    termino                        shift and go to state 76
    ctefloat                       shift and go to state 75
    factor                         shift and go to state 65
    varid                          shift and go to state 67
    leftparen                      shift and go to state 64
    varcte                         shift and go to state 70
    cteint                         shift and go to state 83
    ctechar                        shift and go to state 71
    exp                            shift and go to state 144
    ctebool                        shift and go to state 68
    ctestring                      shift and go to state 84

state 110

    (27) masexp -> MINUS . exp
    (24) exp -> . termino masexp addQPPM
    (36) termino -> . factor masterminos addQTD
    (16) factor -> . leftparen expresion rightparen
    (17) factor -> . varcte
    (18) factor -> . varid
    (19) leftparen -> . LPAREN
    (74) varcte -> . cteint
    (75) varcte -> . ctefloat
    (76) varcte -> . ctechar
    (77) varcte -> . ctestring
    (78) varcte -> . ctebool
    (21) varid -> . ID arr
    (79) cteint -> . CTEINT
    (80) ctefloat -> . CTEFLOAT
    (81) ctechar -> . CTECHAR
    (82) ctestring -> . CTESTRING
    (83) ctebool -> . TRUE
    (84) ctebool -> . FALSE

    LPAREN          shift and go to state 82
    ID              shift and go to state 80
    CTEINT          shift and go to state 69
    CTEFLOAT        shift and go to state 79
    CTECHAR         shift and go to state 66
    CTESTRING       shift and go to state 63
    TRUE            shift and go to state 62
    FALSE           shift and go to state 74

    termino                        shift and go to state 76
    ctefloat                       shift and go to state 75
    factor                         shift and go to state 65
    varid                          shift and go to state 67
    leftparen                      shift and go to state 64
    varcte                         shift and go to state 70
    cteint                         shift and go to state 83
    ctechar                        shift and go to state 71
    exp                            shift and go to state 145
    ctebool                        shift and go to state 68
    ctestring                      shift and go to state 84

state 111

    (28) masexp -> empty .

    MORETHAN        reduce using rule 28 (masexp -> empty .)
    LESSTHAN        reduce using rule 28 (masexp -> empty .)
    NOTEQUAL        reduce using rule 28 (masexp -> empty .)
    ISEQUALTO       reduce using rule 28 (masexp -> empty .)
    MORETHANEQUAL   reduce using rule 28 (masexp -> empty .)
    LESSTHANEQUAL   reduce using rule 28 (masexp -> empty .)
    AND             reduce using rule 28 (masexp -> empty .)
    OR              reduce using rule 28 (masexp -> empty .)
    COMMA           reduce using rule 28 (masexp -> empty .)
    RPAREN          reduce using rule 28 (masexp -> empty .)
    SEMICOLON       reduce using rule 28 (masexp -> empty .)
    RSQBRACKET      reduce using rule 28 (masexp -> empty .)


state 112

    (12) masprint -> COMMA . listaprint
    (10) listaprint -> . expresion masprint
    (11) listaprint -> . ctestring masprint
    (31) expresion -> . expcomp masexpresion addQPAO
    (82) ctestring -> . CTESTRING
    (41) expcomp -> . exp expcompcontinuo addQPComp
    (24) exp -> . termino masexp addQPPM
    (36) termino -> . factor masterminos addQTD
    (16) factor -> . leftparen expresion rightparen
    (17) factor -> . varcte
    (18) factor -> . varid
    (19) leftparen -> . LPAREN
    (74) varcte -> . cteint
    (75) varcte -> . ctefloat
    (76) varcte -> . ctechar
    (77) varcte -> . ctestring
    (78) varcte -> . ctebool
    (21) varid -> . ID arr
    (79) cteint -> . CTEINT
    (80) ctefloat -> . CTEFLOAT
    (81) ctechar -> . CTECHAR
    (83) ctebool -> . TRUE
    (84) ctebool -> . FALSE

    CTESTRING       shift and go to state 63
    LPAREN          shift and go to state 82
    ID              shift and go to state 80
    CTEINT          shift and go to state 69
    CTEFLOAT        shift and go to state 79
    CTECHAR         shift and go to state 66
    TRUE            shift and go to state 62
    FALSE           shift and go to state 74

    factor                         shift and go to state 65
    ctebool                        shift and go to state 68
    leftparen                      shift and go to state 64
    varid                          shift and go to state 67
    varcte                         shift and go to state 70
    cteint                         shift and go to state 83
    ctechar                        shift and go to state 71
    ctefloat                       shift and go to state 75
    expcomp                        shift and go to state 73
    termino                        shift and go to state 76
    ctestring                      shift and go to state 77
    expresion                      shift and go to state 78
    exp                            shift and go to state 72
    listaprint                     shift and go to state 146

state 113

    (13) masprint -> empty .

    RPAREN          reduce using rule 13 (masprint -> empty .)


state 114

    (11) listaprint -> ctestring masprint .

    RPAREN          reduce using rule 11 (listaprint -> ctestring masprint .)


state 115

    (10) listaprint -> expresion masprint .

    RPAREN          reduce using rule 10 (listaprint -> expresion masprint .)


state 116

    (23) arr -> empty .

    TIMES           reduce using rule 23 (arr -> empty .)
    DIVIDE          reduce using rule 23 (arr -> empty .)
    PLUS            reduce using rule 23 (arr -> empty .)
    MINUS           reduce using rule 23 (arr -> empty .)
    MORETHAN        reduce using rule 23 (arr -> empty .)
    LESSTHAN        reduce using rule 23 (arr -> empty .)
    NOTEQUAL        reduce using rule 23 (arr -> empty .)
    ISEQUALTO       reduce using rule 23 (arr -> empty .)
    MORETHANEQUAL   reduce using rule 23 (arr -> empty .)
    LESSTHANEQUAL   reduce using rule 23 (arr -> empty .)
    AND             reduce using rule 23 (arr -> empty .)
    OR              reduce using rule 23 (arr -> empty .)
    COMMA           reduce using rule 23 (arr -> empty .)
    RPAREN          reduce using rule 23 (arr -> empty .)
    SEMICOLON       reduce using rule 23 (arr -> empty .)
    RSQBRACKET      reduce using rule 23 (arr -> empty .)


state 117

    (21) varid -> ID arr .

    TIMES           reduce using rule 21 (varid -> ID arr .)
    DIVIDE          reduce using rule 21 (varid -> ID arr .)
    PLUS            reduce using rule 21 (varid -> ID arr .)
    MINUS           reduce using rule 21 (varid -> ID arr .)
    MORETHAN        reduce using rule 21 (varid -> ID arr .)
    LESSTHAN        reduce using rule 21 (varid -> ID arr .)
    NOTEQUAL        reduce using rule 21 (varid -> ID arr .)
    ISEQUALTO       reduce using rule 21 (varid -> ID arr .)
    MORETHANEQUAL   reduce using rule 21 (varid -> ID arr .)
    LESSTHANEQUAL   reduce using rule 21 (varid -> ID arr .)
    AND             reduce using rule 21 (varid -> ID arr .)
    OR              reduce using rule 21 (varid -> ID arr .)
    COMMA           reduce using rule 21 (varid -> ID arr .)
    RPAREN          reduce using rule 21 (varid -> ID arr .)
    SEMICOLON       reduce using rule 21 (varid -> ID arr .)
    RSQBRACKET      reduce using rule 21 (varid -> ID arr .)


state 118

    (22) arr -> LSQBRACKET . RSQBRACKET

    RSQBRACKET      shift and go to state 147


state 119

    (9) escritura -> PRINT LPAREN listaprint RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 148


state 120

    (4) condicion -> IF LPAREN expresion RPAREN . bloque masbloque
    (5) bloque -> . LBRACKET masestatuto RBRACKET

    LBRACKET        shift and go to state 31

    bloque                         shift and go to state 149

state 121

    (8) ciclo -> WHILE LPAREN expresion RPAREN . bloque
    (5) bloque -> . LBRACKET masestatuto RBRACKET

    LBRACKET        shift and go to state 31

    bloque                         shift and go to state 150

state 122

    (14) asignacion -> ID EQUALS expresion SEMICOLON .

    ID              reduce using rule 14 (asignacion -> ID EQUALS expresion SEMICOLON .)
    IF              reduce using rule 14 (asignacion -> ID EQUALS expresion SEMICOLON .)
    WHILE           reduce using rule 14 (asignacion -> ID EQUALS expresion SEMICOLON .)
    PRINT           reduce using rule 14 (asignacion -> ID EQUALS expresion SEMICOLON .)
    VAR             reduce using rule 14 (asignacion -> ID EQUALS expresion SEMICOLON .)
    RBRACKET        reduce using rule 14 (asignacion -> ID EQUALS expresion SEMICOLON .)


state 123

    (15) asignacion -> ID LSQBRACKET RSQBRACKET EQUALS . LSQBRACKET expresion comaexpresion RSQBRACKET SEMICOLON

    LSQBRACKET      shift and go to state 151


state 124

    (20) rightparen -> RPAREN .

    TIMES           reduce using rule 20 (rightparen -> RPAREN .)
    DIVIDE          reduce using rule 20 (rightparen -> RPAREN .)
    PLUS            reduce using rule 20 (rightparen -> RPAREN .)
    MINUS           reduce using rule 20 (rightparen -> RPAREN .)
    MORETHAN        reduce using rule 20 (rightparen -> RPAREN .)
    LESSTHAN        reduce using rule 20 (rightparen -> RPAREN .)
    NOTEQUAL        reduce using rule 20 (rightparen -> RPAREN .)
    ISEQUALTO       reduce using rule 20 (rightparen -> RPAREN .)
    MORETHANEQUAL   reduce using rule 20 (rightparen -> RPAREN .)
    LESSTHANEQUAL   reduce using rule 20 (rightparen -> RPAREN .)
    AND             reduce using rule 20 (rightparen -> RPAREN .)
    OR              reduce using rule 20 (rightparen -> RPAREN .)
    COMMA           reduce using rule 20 (rightparen -> RPAREN .)
    RPAREN          reduce using rule 20 (rightparen -> RPAREN .)
    SEMICOLON       reduce using rule 20 (rightparen -> RPAREN .)
    RSQBRACKET      reduce using rule 20 (rightparen -> RPAREN .)


state 125

    (16) factor -> leftparen expresion rightparen .

    TIMES           reduce using rule 16 (factor -> leftparen expresion rightparen .)
    DIVIDE          reduce using rule 16 (factor -> leftparen expresion rightparen .)
    PLUS            reduce using rule 16 (factor -> leftparen expresion rightparen .)
    MINUS           reduce using rule 16 (factor -> leftparen expresion rightparen .)
    MORETHAN        reduce using rule 16 (factor -> leftparen expresion rightparen .)
    LESSTHAN        reduce using rule 16 (factor -> leftparen expresion rightparen .)
    NOTEQUAL        reduce using rule 16 (factor -> leftparen expresion rightparen .)
    ISEQUALTO       reduce using rule 16 (factor -> leftparen expresion rightparen .)
    MORETHANEQUAL   reduce using rule 16 (factor -> leftparen expresion rightparen .)
    LESSTHANEQUAL   reduce using rule 16 (factor -> leftparen expresion rightparen .)
    AND             reduce using rule 16 (factor -> leftparen expresion rightparen .)
    OR              reduce using rule 16 (factor -> leftparen expresion rightparen .)
    RPAREN          reduce using rule 16 (factor -> leftparen expresion rightparen .)
    COMMA           reduce using rule 16 (factor -> leftparen expresion rightparen .)
    SEMICOLON       reduce using rule 16 (factor -> leftparen expresion rightparen .)
    RSQBRACKET      reduce using rule 16 (factor -> leftparen expresion rightparen .)


state 126

    (36) termino -> factor masterminos addQTD .

    PLUS            reduce using rule 36 (termino -> factor masterminos addQTD .)
    MINUS           reduce using rule 36 (termino -> factor masterminos addQTD .)
    MORETHAN        reduce using rule 36 (termino -> factor masterminos addQTD .)
    LESSTHAN        reduce using rule 36 (termino -> factor masterminos addQTD .)
    NOTEQUAL        reduce using rule 36 (termino -> factor masterminos addQTD .)
    ISEQUALTO       reduce using rule 36 (termino -> factor masterminos addQTD .)
    MORETHANEQUAL   reduce using rule 36 (termino -> factor masterminos addQTD .)
    LESSTHANEQUAL   reduce using rule 36 (termino -> factor masterminos addQTD .)
    AND             reduce using rule 36 (termino -> factor masterminos addQTD .)
    OR              reduce using rule 36 (termino -> factor masterminos addQTD .)
    RPAREN          reduce using rule 36 (termino -> factor masterminos addQTD .)
    COMMA           reduce using rule 36 (termino -> factor masterminos addQTD .)
    SEMICOLON       reduce using rule 36 (termino -> factor masterminos addQTD .)
    RSQBRACKET      reduce using rule 36 (termino -> factor masterminos addQTD .)


state 127

    (37) addQTD -> empty .

    PLUS            reduce using rule 37 (addQTD -> empty .)
    MINUS           reduce using rule 37 (addQTD -> empty .)
    MORETHAN        reduce using rule 37 (addQTD -> empty .)
    LESSTHAN        reduce using rule 37 (addQTD -> empty .)
    NOTEQUAL        reduce using rule 37 (addQTD -> empty .)
    ISEQUALTO       reduce using rule 37 (addQTD -> empty .)
    MORETHANEQUAL   reduce using rule 37 (addQTD -> empty .)
    LESSTHANEQUAL   reduce using rule 37 (addQTD -> empty .)
    AND             reduce using rule 37 (addQTD -> empty .)
    OR              reduce using rule 37 (addQTD -> empty .)
    COMMA           reduce using rule 37 (addQTD -> empty .)
    RPAREN          reduce using rule 37 (addQTD -> empty .)
    SEMICOLON       reduce using rule 37 (addQTD -> empty .)
    RSQBRACKET      reduce using rule 37 (addQTD -> empty .)


state 128

    (38) masterminos -> TIMES termino .

    PLUS            reduce using rule 38 (masterminos -> TIMES termino .)
    MINUS           reduce using rule 38 (masterminos -> TIMES termino .)
    MORETHAN        reduce using rule 38 (masterminos -> TIMES termino .)
    LESSTHAN        reduce using rule 38 (masterminos -> TIMES termino .)
    NOTEQUAL        reduce using rule 38 (masterminos -> TIMES termino .)
    ISEQUALTO       reduce using rule 38 (masterminos -> TIMES termino .)
    MORETHANEQUAL   reduce using rule 38 (masterminos -> TIMES termino .)
    LESSTHANEQUAL   reduce using rule 38 (masterminos -> TIMES termino .)
    AND             reduce using rule 38 (masterminos -> TIMES termino .)
    OR              reduce using rule 38 (masterminos -> TIMES termino .)
    COMMA           reduce using rule 38 (masterminos -> TIMES termino .)
    RPAREN          reduce using rule 38 (masterminos -> TIMES termino .)
    SEMICOLON       reduce using rule 38 (masterminos -> TIMES termino .)
    RSQBRACKET      reduce using rule 38 (masterminos -> TIMES termino .)


state 129

    (39) masterminos -> DIVIDE termino .

    PLUS            reduce using rule 39 (masterminos -> DIVIDE termino .)
    MINUS           reduce using rule 39 (masterminos -> DIVIDE termino .)
    MORETHAN        reduce using rule 39 (masterminos -> DIVIDE termino .)
    LESSTHAN        reduce using rule 39 (masterminos -> DIVIDE termino .)
    NOTEQUAL        reduce using rule 39 (masterminos -> DIVIDE termino .)
    ISEQUALTO       reduce using rule 39 (masterminos -> DIVIDE termino .)
    MORETHANEQUAL   reduce using rule 39 (masterminos -> DIVIDE termino .)
    LESSTHANEQUAL   reduce using rule 39 (masterminos -> DIVIDE termino .)
    AND             reduce using rule 39 (masterminos -> DIVIDE termino .)
    OR              reduce using rule 39 (masterminos -> DIVIDE termino .)
    COMMA           reduce using rule 39 (masterminos -> DIVIDE termino .)
    RPAREN          reduce using rule 39 (masterminos -> DIVIDE termino .)
    SEMICOLON       reduce using rule 39 (masterminos -> DIVIDE termino .)
    RSQBRACKET      reduce using rule 39 (masterminos -> DIVIDE termino .)


state 130

    (45) expcompcontinuo -> NOTEQUAL expcomp .

    AND             reduce using rule 45 (expcompcontinuo -> NOTEQUAL expcomp .)
    OR              reduce using rule 45 (expcompcontinuo -> NOTEQUAL expcomp .)
    COMMA           reduce using rule 45 (expcompcontinuo -> NOTEQUAL expcomp .)
    RPAREN          reduce using rule 45 (expcompcontinuo -> NOTEQUAL expcomp .)
    SEMICOLON       reduce using rule 45 (expcompcontinuo -> NOTEQUAL expcomp .)
    RSQBRACKET      reduce using rule 45 (expcompcontinuo -> NOTEQUAL expcomp .)


state 131

    (46) expcompcontinuo -> ISEQUALTO expcomp .

    AND             reduce using rule 46 (expcompcontinuo -> ISEQUALTO expcomp .)
    OR              reduce using rule 46 (expcompcontinuo -> ISEQUALTO expcomp .)
    COMMA           reduce using rule 46 (expcompcontinuo -> ISEQUALTO expcomp .)
    RPAREN          reduce using rule 46 (expcompcontinuo -> ISEQUALTO expcomp .)
    SEMICOLON       reduce using rule 46 (expcompcontinuo -> ISEQUALTO expcomp .)
    RSQBRACKET      reduce using rule 46 (expcompcontinuo -> ISEQUALTO expcomp .)


state 132

    (44) expcompcontinuo -> LESSTHAN expcomp .

    AND             reduce using rule 44 (expcompcontinuo -> LESSTHAN expcomp .)
    OR              reduce using rule 44 (expcompcontinuo -> LESSTHAN expcomp .)
    COMMA           reduce using rule 44 (expcompcontinuo -> LESSTHAN expcomp .)
    RPAREN          reduce using rule 44 (expcompcontinuo -> LESSTHAN expcomp .)
    SEMICOLON       reduce using rule 44 (expcompcontinuo -> LESSTHAN expcomp .)
    RSQBRACKET      reduce using rule 44 (expcompcontinuo -> LESSTHAN expcomp .)


state 133

    (41) expcomp -> exp expcompcontinuo addQPComp .

    AND             reduce using rule 41 (expcomp -> exp expcompcontinuo addQPComp .)
    OR              reduce using rule 41 (expcomp -> exp expcompcontinuo addQPComp .)
    COMMA           reduce using rule 41 (expcomp -> exp expcompcontinuo addQPComp .)
    RPAREN          reduce using rule 41 (expcomp -> exp expcompcontinuo addQPComp .)
    SEMICOLON       reduce using rule 41 (expcomp -> exp expcompcontinuo addQPComp .)
    RSQBRACKET      reduce using rule 41 (expcomp -> exp expcompcontinuo addQPComp .)


state 134

    (42) addQPComp -> empty .

    AND             reduce using rule 42 (addQPComp -> empty .)
    OR              reduce using rule 42 (addQPComp -> empty .)
    COMMA           reduce using rule 42 (addQPComp -> empty .)
    RPAREN          reduce using rule 42 (addQPComp -> empty .)
    SEMICOLON       reduce using rule 42 (addQPComp -> empty .)
    RSQBRACKET      reduce using rule 42 (addQPComp -> empty .)


state 135

    (48) expcompcontinuo -> LESSTHANEQUAL expcomp .

    AND             reduce using rule 48 (expcompcontinuo -> LESSTHANEQUAL expcomp .)
    OR              reduce using rule 48 (expcompcontinuo -> LESSTHANEQUAL expcomp .)
    COMMA           reduce using rule 48 (expcompcontinuo -> LESSTHANEQUAL expcomp .)
    RPAREN          reduce using rule 48 (expcompcontinuo -> LESSTHANEQUAL expcomp .)
    SEMICOLON       reduce using rule 48 (expcompcontinuo -> LESSTHANEQUAL expcomp .)
    RSQBRACKET      reduce using rule 48 (expcompcontinuo -> LESSTHANEQUAL expcomp .)


state 136

    (47) expcompcontinuo -> MORETHANEQUAL expcomp .

    AND             reduce using rule 47 (expcompcontinuo -> MORETHANEQUAL expcomp .)
    OR              reduce using rule 47 (expcompcontinuo -> MORETHANEQUAL expcomp .)
    COMMA           reduce using rule 47 (expcompcontinuo -> MORETHANEQUAL expcomp .)
    RPAREN          reduce using rule 47 (expcompcontinuo -> MORETHANEQUAL expcomp .)
    SEMICOLON       reduce using rule 47 (expcompcontinuo -> MORETHANEQUAL expcomp .)
    RSQBRACKET      reduce using rule 47 (expcompcontinuo -> MORETHANEQUAL expcomp .)


state 137

    (43) expcompcontinuo -> MORETHAN expcomp .

    AND             reduce using rule 43 (expcompcontinuo -> MORETHAN expcomp .)
    OR              reduce using rule 43 (expcompcontinuo -> MORETHAN expcomp .)
    COMMA           reduce using rule 43 (expcompcontinuo -> MORETHAN expcomp .)
    RPAREN          reduce using rule 43 (expcompcontinuo -> MORETHAN expcomp .)
    SEMICOLON       reduce using rule 43 (expcompcontinuo -> MORETHAN expcomp .)
    RSQBRACKET      reduce using rule 43 (expcompcontinuo -> MORETHAN expcomp .)


state 138

    (34) masexpresion -> OR expresion .

    COMMA           reduce using rule 34 (masexpresion -> OR expresion .)
    RPAREN          reduce using rule 34 (masexpresion -> OR expresion .)
    SEMICOLON       reduce using rule 34 (masexpresion -> OR expresion .)
    RSQBRACKET      reduce using rule 34 (masexpresion -> OR expresion .)


state 139

    (32) addQPAO -> empty .

    COMMA           reduce using rule 32 (addQPAO -> empty .)
    RPAREN          reduce using rule 32 (addQPAO -> empty .)
    SEMICOLON       reduce using rule 32 (addQPAO -> empty .)
    RSQBRACKET      reduce using rule 32 (addQPAO -> empty .)


state 140

    (31) expresion -> expcomp masexpresion addQPAO .

    RPAREN          reduce using rule 31 (expresion -> expcomp masexpresion addQPAO .)
    SEMICOLON       reduce using rule 31 (expresion -> expcomp masexpresion addQPAO .)
    COMMA           reduce using rule 31 (expresion -> expcomp masexpresion addQPAO .)
    RSQBRACKET      reduce using rule 31 (expresion -> expcomp masexpresion addQPAO .)


state 141

    (33) masexpresion -> AND expresion .

    COMMA           reduce using rule 33 (masexpresion -> AND expresion .)
    RPAREN          reduce using rule 33 (masexpresion -> AND expresion .)
    SEMICOLON       reduce using rule 33 (masexpresion -> AND expresion .)
    RSQBRACKET      reduce using rule 33 (masexpresion -> AND expresion .)


state 142

    (24) exp -> termino masexp addQPPM .

    MORETHAN        reduce using rule 24 (exp -> termino masexp addQPPM .)
    LESSTHAN        reduce using rule 24 (exp -> termino masexp addQPPM .)
    NOTEQUAL        reduce using rule 24 (exp -> termino masexp addQPPM .)
    ISEQUALTO       reduce using rule 24 (exp -> termino masexp addQPPM .)
    MORETHANEQUAL   reduce using rule 24 (exp -> termino masexp addQPPM .)
    LESSTHANEQUAL   reduce using rule 24 (exp -> termino masexp addQPPM .)
    AND             reduce using rule 24 (exp -> termino masexp addQPPM .)
    OR              reduce using rule 24 (exp -> termino masexp addQPPM .)
    COMMA           reduce using rule 24 (exp -> termino masexp addQPPM .)
    RPAREN          reduce using rule 24 (exp -> termino masexp addQPPM .)
    SEMICOLON       reduce using rule 24 (exp -> termino masexp addQPPM .)
    RSQBRACKET      reduce using rule 24 (exp -> termino masexp addQPPM .)


state 143

    (25) addQPPM -> empty .

    MORETHAN        reduce using rule 25 (addQPPM -> empty .)
    LESSTHAN        reduce using rule 25 (addQPPM -> empty .)
    NOTEQUAL        reduce using rule 25 (addQPPM -> empty .)
    ISEQUALTO       reduce using rule 25 (addQPPM -> empty .)
    MORETHANEQUAL   reduce using rule 25 (addQPPM -> empty .)
    LESSTHANEQUAL   reduce using rule 25 (addQPPM -> empty .)
    AND             reduce using rule 25 (addQPPM -> empty .)
    OR              reduce using rule 25 (addQPPM -> empty .)
    COMMA           reduce using rule 25 (addQPPM -> empty .)
    RPAREN          reduce using rule 25 (addQPPM -> empty .)
    SEMICOLON       reduce using rule 25 (addQPPM -> empty .)
    RSQBRACKET      reduce using rule 25 (addQPPM -> empty .)


state 144

    (26) masexp -> PLUS exp .

    MORETHAN        reduce using rule 26 (masexp -> PLUS exp .)
    LESSTHAN        reduce using rule 26 (masexp -> PLUS exp .)
    NOTEQUAL        reduce using rule 26 (masexp -> PLUS exp .)
    ISEQUALTO       reduce using rule 26 (masexp -> PLUS exp .)
    MORETHANEQUAL   reduce using rule 26 (masexp -> PLUS exp .)
    LESSTHANEQUAL   reduce using rule 26 (masexp -> PLUS exp .)
    AND             reduce using rule 26 (masexp -> PLUS exp .)
    OR              reduce using rule 26 (masexp -> PLUS exp .)
    COMMA           reduce using rule 26 (masexp -> PLUS exp .)
    RPAREN          reduce using rule 26 (masexp -> PLUS exp .)
    SEMICOLON       reduce using rule 26 (masexp -> PLUS exp .)
    RSQBRACKET      reduce using rule 26 (masexp -> PLUS exp .)


state 145

    (27) masexp -> MINUS exp .

    MORETHAN        reduce using rule 27 (masexp -> MINUS exp .)
    LESSTHAN        reduce using rule 27 (masexp -> MINUS exp .)
    NOTEQUAL        reduce using rule 27 (masexp -> MINUS exp .)
    ISEQUALTO       reduce using rule 27 (masexp -> MINUS exp .)
    MORETHANEQUAL   reduce using rule 27 (masexp -> MINUS exp .)
    LESSTHANEQUAL   reduce using rule 27 (masexp -> MINUS exp .)
    AND             reduce using rule 27 (masexp -> MINUS exp .)
    OR              reduce using rule 27 (masexp -> MINUS exp .)
    COMMA           reduce using rule 27 (masexp -> MINUS exp .)
    RPAREN          reduce using rule 27 (masexp -> MINUS exp .)
    SEMICOLON       reduce using rule 27 (masexp -> MINUS exp .)
    RSQBRACKET      reduce using rule 27 (masexp -> MINUS exp .)


state 146

    (12) masprint -> COMMA listaprint .

    RPAREN          reduce using rule 12 (masprint -> COMMA listaprint .)


state 147

    (22) arr -> LSQBRACKET RSQBRACKET .

    TIMES           reduce using rule 22 (arr -> LSQBRACKET RSQBRACKET .)
    DIVIDE          reduce using rule 22 (arr -> LSQBRACKET RSQBRACKET .)
    PLUS            reduce using rule 22 (arr -> LSQBRACKET RSQBRACKET .)
    MINUS           reduce using rule 22 (arr -> LSQBRACKET RSQBRACKET .)
    MORETHAN        reduce using rule 22 (arr -> LSQBRACKET RSQBRACKET .)
    LESSTHAN        reduce using rule 22 (arr -> LSQBRACKET RSQBRACKET .)
    NOTEQUAL        reduce using rule 22 (arr -> LSQBRACKET RSQBRACKET .)
    ISEQUALTO       reduce using rule 22 (arr -> LSQBRACKET RSQBRACKET .)
    MORETHANEQUAL   reduce using rule 22 (arr -> LSQBRACKET RSQBRACKET .)
    LESSTHANEQUAL   reduce using rule 22 (arr -> LSQBRACKET RSQBRACKET .)
    AND             reduce using rule 22 (arr -> LSQBRACKET RSQBRACKET .)
    OR              reduce using rule 22 (arr -> LSQBRACKET RSQBRACKET .)
    COMMA           reduce using rule 22 (arr -> LSQBRACKET RSQBRACKET .)
    RPAREN          reduce using rule 22 (arr -> LSQBRACKET RSQBRACKET .)
    SEMICOLON       reduce using rule 22 (arr -> LSQBRACKET RSQBRACKET .)
    RSQBRACKET      reduce using rule 22 (arr -> LSQBRACKET RSQBRACKET .)


state 148

    (9) escritura -> PRINT LPAREN listaprint RPAREN SEMICOLON .

    ID              reduce using rule 9 (escritura -> PRINT LPAREN listaprint RPAREN SEMICOLON .)
    IF              reduce using rule 9 (escritura -> PRINT LPAREN listaprint RPAREN SEMICOLON .)
    WHILE           reduce using rule 9 (escritura -> PRINT LPAREN listaprint RPAREN SEMICOLON .)
    PRINT           reduce using rule 9 (escritura -> PRINT LPAREN listaprint RPAREN SEMICOLON .)
    VAR             reduce using rule 9 (escritura -> PRINT LPAREN listaprint RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 9 (escritura -> PRINT LPAREN listaprint RPAREN SEMICOLON .)


state 149

    (4) condicion -> IF LPAREN expresion RPAREN bloque . masbloque
    (6) masbloque -> . ELSE bloque
    (7) masbloque -> . empty
    (85) empty -> .

    ELSE            shift and go to state 152
    ID              reduce using rule 85 (empty -> .)
    IF              reduce using rule 85 (empty -> .)
    WHILE           reduce using rule 85 (empty -> .)
    PRINT           reduce using rule 85 (empty -> .)
    VAR             reduce using rule 85 (empty -> .)
    RBRACKET        reduce using rule 85 (empty -> .)

    empty                          shift and go to state 154
    masbloque                      shift and go to state 153

state 150

    (8) ciclo -> WHILE LPAREN expresion RPAREN bloque .

    ID              reduce using rule 8 (ciclo -> WHILE LPAREN expresion RPAREN bloque .)
    IF              reduce using rule 8 (ciclo -> WHILE LPAREN expresion RPAREN bloque .)
    WHILE           reduce using rule 8 (ciclo -> WHILE LPAREN expresion RPAREN bloque .)
    PRINT           reduce using rule 8 (ciclo -> WHILE LPAREN expresion RPAREN bloque .)
    VAR             reduce using rule 8 (ciclo -> WHILE LPAREN expresion RPAREN bloque .)
    RBRACKET        reduce using rule 8 (ciclo -> WHILE LPAREN expresion RPAREN bloque .)


state 151

    (15) asignacion -> ID LSQBRACKET RSQBRACKET EQUALS LSQBRACKET . expresion comaexpresion RSQBRACKET SEMICOLON
    (31) expresion -> . expcomp masexpresion addQPAO
    (41) expcomp -> . exp expcompcontinuo addQPComp
    (24) exp -> . termino masexp addQPPM
    (36) termino -> . factor masterminos addQTD
    (16) factor -> . leftparen expresion rightparen
    (17) factor -> . varcte
    (18) factor -> . varid
    (19) leftparen -> . LPAREN
    (74) varcte -> . cteint
    (75) varcte -> . ctefloat
    (76) varcte -> . ctechar
    (77) varcte -> . ctestring
    (78) varcte -> . ctebool
    (21) varid -> . ID arr
    (79) cteint -> . CTEINT
    (80) ctefloat -> . CTEFLOAT
    (81) ctechar -> . CTECHAR
    (82) ctestring -> . CTESTRING
    (83) ctebool -> . TRUE
    (84) ctebool -> . FALSE

    LPAREN          shift and go to state 82
    ID              shift and go to state 80
    CTEINT          shift and go to state 69
    CTEFLOAT        shift and go to state 79
    CTECHAR         shift and go to state 66
    CTESTRING       shift and go to state 63
    TRUE            shift and go to state 62
    FALSE           shift and go to state 74

    factor                         shift and go to state 65
    ctebool                        shift and go to state 68
    leftparen                      shift and go to state 64
    varid                          shift and go to state 67
    varcte                         shift and go to state 70
    cteint                         shift and go to state 83
    ctechar                        shift and go to state 71
    exp                            shift and go to state 72
    expcomp                        shift and go to state 73
    termino                        shift and go to state 76
    ctestring                      shift and go to state 84
    expresion                      shift and go to state 155
    ctefloat                       shift and go to state 75

state 152

    (6) masbloque -> ELSE . bloque
    (5) bloque -> . LBRACKET masestatuto RBRACKET

    LBRACKET        shift and go to state 31

    bloque                         shift and go to state 156

state 153

    (4) condicion -> IF LPAREN expresion RPAREN bloque masbloque .

    ID              reduce using rule 4 (condicion -> IF LPAREN expresion RPAREN bloque masbloque .)
    IF              reduce using rule 4 (condicion -> IF LPAREN expresion RPAREN bloque masbloque .)
    WHILE           reduce using rule 4 (condicion -> IF LPAREN expresion RPAREN bloque masbloque .)
    PRINT           reduce using rule 4 (condicion -> IF LPAREN expresion RPAREN bloque masbloque .)
    VAR             reduce using rule 4 (condicion -> IF LPAREN expresion RPAREN bloque masbloque .)
    RBRACKET        reduce using rule 4 (condicion -> IF LPAREN expresion RPAREN bloque masbloque .)


state 154

    (7) masbloque -> empty .

    ID              reduce using rule 7 (masbloque -> empty .)
    IF              reduce using rule 7 (masbloque -> empty .)
    WHILE           reduce using rule 7 (masbloque -> empty .)
    PRINT           reduce using rule 7 (masbloque -> empty .)
    VAR             reduce using rule 7 (masbloque -> empty .)
    RBRACKET        reduce using rule 7 (masbloque -> empty .)


state 155

    (15) asignacion -> ID LSQBRACKET RSQBRACKET EQUALS LSQBRACKET expresion . comaexpresion RSQBRACKET SEMICOLON
    (29) comaexpresion -> . COMMA expresion comaexpresion
    (30) comaexpresion -> . empty
    (85) empty -> .

    COMMA           shift and go to state 158
    RSQBRACKET      reduce using rule 85 (empty -> .)

    comaexpresion                  shift and go to state 157
    empty                          shift and go to state 159

state 156

    (6) masbloque -> ELSE bloque .

    ID              reduce using rule 6 (masbloque -> ELSE bloque .)
    IF              reduce using rule 6 (masbloque -> ELSE bloque .)
    WHILE           reduce using rule 6 (masbloque -> ELSE bloque .)
    PRINT           reduce using rule 6 (masbloque -> ELSE bloque .)
    VAR             reduce using rule 6 (masbloque -> ELSE bloque .)
    RBRACKET        reduce using rule 6 (masbloque -> ELSE bloque .)


state 157

    (15) asignacion -> ID LSQBRACKET RSQBRACKET EQUALS LSQBRACKET expresion comaexpresion . RSQBRACKET SEMICOLON

    RSQBRACKET      shift and go to state 160


state 158

    (29) comaexpresion -> COMMA . expresion comaexpresion
    (31) expresion -> . expcomp masexpresion addQPAO
    (41) expcomp -> . exp expcompcontinuo addQPComp
    (24) exp -> . termino masexp addQPPM
    (36) termino -> . factor masterminos addQTD
    (16) factor -> . leftparen expresion rightparen
    (17) factor -> . varcte
    (18) factor -> . varid
    (19) leftparen -> . LPAREN
    (74) varcte -> . cteint
    (75) varcte -> . ctefloat
    (76) varcte -> . ctechar
    (77) varcte -> . ctestring
    (78) varcte -> . ctebool
    (21) varid -> . ID arr
    (79) cteint -> . CTEINT
    (80) ctefloat -> . CTEFLOAT
    (81) ctechar -> . CTECHAR
    (82) ctestring -> . CTESTRING
    (83) ctebool -> . TRUE
    (84) ctebool -> . FALSE

    LPAREN          shift and go to state 82
    ID              shift and go to state 80
    CTEINT          shift and go to state 69
    CTEFLOAT        shift and go to state 79
    CTECHAR         shift and go to state 66
    CTESTRING       shift and go to state 63
    TRUE            shift and go to state 62
    FALSE           shift and go to state 74

    factor                         shift and go to state 65
    ctebool                        shift and go to state 68
    leftparen                      shift and go to state 64
    varid                          shift and go to state 67
    varcte                         shift and go to state 70
    cteint                         shift and go to state 83
    ctechar                        shift and go to state 71
    exp                            shift and go to state 72
    expcomp                        shift and go to state 73
    termino                        shift and go to state 76
    ctestring                      shift and go to state 84
    expresion                      shift and go to state 161
    ctefloat                       shift and go to state 75

state 159

    (30) comaexpresion -> empty .

    RSQBRACKET      reduce using rule 30 (comaexpresion -> empty .)


state 160

    (15) asignacion -> ID LSQBRACKET RSQBRACKET EQUALS LSQBRACKET expresion comaexpresion RSQBRACKET . SEMICOLON

    SEMICOLON       shift and go to state 162


state 161

    (29) comaexpresion -> COMMA expresion . comaexpresion
    (29) comaexpresion -> . COMMA expresion comaexpresion
    (30) comaexpresion -> . empty
    (85) empty -> .

    COMMA           shift and go to state 158
    RSQBRACKET      reduce using rule 85 (empty -> .)

    comaexpresion                  shift and go to state 163
    empty                          shift and go to state 159

state 162

    (15) asignacion -> ID LSQBRACKET RSQBRACKET EQUALS LSQBRACKET expresion comaexpresion RSQBRACKET SEMICOLON .

    ID              reduce using rule 15 (asignacion -> ID LSQBRACKET RSQBRACKET EQUALS LSQBRACKET expresion comaexpresion RSQBRACKET SEMICOLON .)
    IF              reduce using rule 15 (asignacion -> ID LSQBRACKET RSQBRACKET EQUALS LSQBRACKET expresion comaexpresion RSQBRACKET SEMICOLON .)
    WHILE           reduce using rule 15 (asignacion -> ID LSQBRACKET RSQBRACKET EQUALS LSQBRACKET expresion comaexpresion RSQBRACKET SEMICOLON .)
    PRINT           reduce using rule 15 (asignacion -> ID LSQBRACKET RSQBRACKET EQUALS LSQBRACKET expresion comaexpresion RSQBRACKET SEMICOLON .)
    VAR             reduce using rule 15 (asignacion -> ID LSQBRACKET RSQBRACKET EQUALS LSQBRACKET expresion comaexpresion RSQBRACKET SEMICOLON .)
    RBRACKET        reduce using rule 15 (asignacion -> ID LSQBRACKET RSQBRACKET EQUALS LSQBRACKET expresion comaexpresion RSQBRACKET SEMICOLON .)


state 163

    (29) comaexpresion -> COMMA expresion comaexpresion .

    RSQBRACKET      reduce using rule 29 (comaexpresion -> COMMA expresion comaexpresion .)

