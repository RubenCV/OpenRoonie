Created by PLY version 3.9 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programa
Rule 1     programa -> prog ID SEMICOLON vars funcs main bloque
Rule 2     prog -> PROGRAM
Rule 3     main -> MAIN
Rule 4     condicion -> IF LPAREN expresion RPAREN gotoF bloque masbloque
Rule 5     gotoF -> empty
Rule 6     bloque -> LBRACKET masestatuto RBRACKET
Rule 7     masbloque -> ELSE goto bloque
Rule 8     masbloque -> empty
Rule 9     goto -> empty
Rule 10    ciclo -> while LPAREN expresion RPAREN gotoF bloque goto
Rule 11    while -> WHILE
Rule 12    escritura -> print LPAREN listaprint RPAREN SEMICOLON
Rule 13    print -> PRINT
Rule 14    listaprint -> expresion masprint
Rule 15    listaprint -> ctestring masprint
Rule 16    masprint -> addQPP listaprint
Rule 17    masprint -> empty
Rule 18    addQPP -> COMMA
Rule 19    asignacion -> ID EQUALS expresion SEMICOLON
Rule 20    asignacion -> ID LSQBRACKET RSQBRACKET EQUALS LSQBRACKET expresion comaexpresion RSQBRACKET SEMICOLON
Rule 21    factor -> leftparen expresion rightparen
Rule 22    factor -> varcte
Rule 23    factor -> varid
Rule 24    factor -> llamafunc
Rule 25    leftparen -> LPAREN
Rule 26    rightparen -> RPAREN
Rule 27    varid -> ID arr
Rule 28    arr -> LSQBRACKET RSQBRACKET
Rule 29    arr -> empty
Rule 30    exp -> termino masexp
Rule 31    masexp -> addQPPM exp
Rule 32    masexp -> empty
Rule 33    addQPPM -> PLUS
Rule 34    addQPPM -> MINUS
Rule 35    comaexpresion -> COMMA expresion comaexpresion
Rule 36    comaexpresion -> empty
Rule 37    expresion -> expcomp masexpresion
Rule 38    addQPAO -> AND
Rule 39    addQPAO -> OR
Rule 40    masexpresion -> addQPAO expresion
Rule 41    masexpresion -> empty
Rule 42    termino -> factor masterminos
Rule 43    addQTD -> TIMES
Rule 44    addQTD -> DIVIDE
Rule 45    masterminos -> addQTD termino
Rule 46    masterminos -> empty
Rule 47    expcomp -> exp expcompcontinuo
Rule 48    addQPComp -> MORETHAN
Rule 49    addQPComp -> LESSTHAN
Rule 50    addQPComp -> NOTEQUAL
Rule 51    addQPComp -> ISEQUALTO
Rule 52    addQPComp -> MORETHANEQUAL
Rule 53    addQPComp -> LESSTHANEQUAL
Rule 54    expcompcontinuo -> addQPComp expcomp
Rule 55    expcompcontinuo -> empty
Rule 56    estatuto -> asignacion
Rule 57    estatuto -> condicion
Rule 58    estatuto -> ciclo
Rule 59    estatuto -> escritura
Rule 60    estatuto -> vars
Rule 61    estatuto -> llamafunc SEMICOLON
Rule 62    estatuto -> COMMENT
Rule 63    estatuto -> CPPCOMMENT
Rule 64    llamafunc -> idfunc LPAREN funcargs RPAREN
Rule 65    idfunc -> ID
Rule 66    funcargs -> expresion listafuncargs checarparams
Rule 67    funcargs -> empty
Rule 68    listafuncargs -> COMMA expresion listafuncargs
Rule 69    listafuncargs -> empty
Rule 70    checarparams -> empty
Rule 71    masestatuto -> estatuto masestatuto
Rule 72    masestatuto -> empty
Rule 73    vars -> VAR tipo listaid SEMICOLON vars
Rule 74    vars -> empty
Rule 75    listaid -> ID masid
Rule 76    masid -> COMMA listaid
Rule 77    masid -> empty
Rule 78    funcs -> FUNCTION funcaux LPAREN args masargs RPAREN bloquefunc funcs
Rule 79    funcs -> FUNCTION funcaux LPAREN RPAREN bloquefunc funcs
Rule 80    funcs -> empty
Rule 81    bloquefunc -> LBRACKET masestatuto retorno RBRACKET
Rule 82    retorno -> RETURN expresion SEMICOLON
Rule 83    retorno -> RETURN SEMICOLON
Rule 84    funcaux -> tipo ID
Rule 85    args -> tipo ID
Rule 86    args -> empty
Rule 87    masargs -> COMMA args masargs
Rule 88    masargs -> empty
Rule 89    tipo -> INT
Rule 90    tipo -> FLOAT
Rule 91    tipo -> CHAR
Rule 92    tipo -> BOOL
Rule 93    tipo -> STRING
Rule 94    tipo -> VOID
Rule 95    varcte -> cteint
Rule 96    varcte -> ctefloat
Rule 97    varcte -> ctechar
Rule 98    varcte -> ctestring
Rule 99    varcte -> ctebool
Rule 100   cteint -> CTEINT
Rule 101   ctefloat -> CTEFLOAT
Rule 102   ctechar -> CTECHAR
Rule 103   ctestring -> CTESTRING
Rule 104   ctebool -> TRUE
Rule 105   ctebool -> FALSE
Rule 106   empty -> <empty>

Terminals, with rules where they appear

AND                  : 38
BOOL                 : 92
CHAR                 : 91
COMMA                : 18 35 68 76 87
COMMENT              : 62
CPPCOMMENT           : 63
CTECHAR              : 102
CTEFLOAT             : 101
CTEINT               : 100
CTESTRING            : 103
DIVIDE               : 44
ELSE                 : 7
EQUALS               : 19 20
FALSE                : 105
FLOAT                : 90
FUNCTION             : 78 79
ID                   : 1 19 20 27 65 75 84 85
IF                   : 4
INT                  : 89
ISEQUALTO            : 51
LBRACKET             : 6 81
LESSTHAN             : 49
LESSTHANEQUAL        : 53
LPAREN               : 4 10 12 25 64 78 79
LSQBRACKET           : 20 20 28
MAIN                 : 3
MINUS                : 34
MORETHAN             : 48
MORETHANEQUAL        : 52
NOTEQUAL             : 50
OR                   : 39
PLUS                 : 33
PRINT                : 13
PROGRAM              : 2
RBRACKET             : 6 81
RETURN               : 82 83
RPAREN               : 4 10 12 26 64 78 79
RSQBRACKET           : 20 20 28
SEMICOLON            : 1 12 19 20 61 73 82 83
STRING               : 93
TIMES                : 43
TRUE                 : 104
VAR                  : 73
VOID                 : 94
WHILE                : 11
error                : 

Nonterminals, with rules where they appear

addQPAO              : 40
addQPComp            : 54
addQPP               : 16
addQPPM              : 31
addQTD               : 45
args                 : 78 87
arr                  : 27
asignacion           : 56
bloque               : 1 4 7 10
bloquefunc           : 78 79
checarparams         : 66
ciclo                : 58
comaexpresion        : 20 35
condicion            : 57
ctebool              : 99
ctechar              : 97
ctefloat             : 96
cteint               : 95
ctestring            : 15 98
empty                : 5 8 9 17 29 32 36 41 46 55 67 69 70 72 74 77 80 86 88
escritura            : 59
estatuto             : 71
exp                  : 31 47
expcomp              : 37 54
expcompcontinuo      : 47
expresion            : 4 10 14 19 20 21 35 40 66 68 82
factor               : 42
funcargs             : 64
funcaux              : 78 79
funcs                : 1 78 79
goto                 : 7 10
gotoF                : 4 10
idfunc               : 64
leftparen            : 21
listafuncargs        : 66 68
listaid              : 73 76
listaprint           : 12 16
llamafunc            : 24 61
main                 : 1
masargs              : 78 87
masbloque            : 4
masestatuto          : 6 71 81
masexp               : 30
masexpresion         : 37
masid                : 75
masprint             : 14 15
masterminos          : 42
print                : 12
prog                 : 1
programa             : 0
retorno              : 81
rightparen           : 21
termino              : 30 45
tipo                 : 73 84 85
varcte               : 22
varid                : 23
vars                 : 1 60 73
while                : 10

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . prog ID SEMICOLON vars funcs main bloque
    (2) prog -> . PROGRAM

    PROGRAM         shift and go to state 1

    programa                       shift and go to state 2
    prog                           shift and go to state 3

state 1

    (2) prog -> PROGRAM .

    ID              reduce using rule 2 (prog -> PROGRAM .)


state 2

    (0) S' -> programa .



state 3

    (1) programa -> prog . ID SEMICOLON vars funcs main bloque

    ID              shift and go to state 4


state 4

    (1) programa -> prog ID . SEMICOLON vars funcs main bloque

    SEMICOLON       shift and go to state 5


state 5

    (1) programa -> prog ID SEMICOLON . vars funcs main bloque
    (73) vars -> . VAR tipo listaid SEMICOLON vars
    (74) vars -> . empty
    (106) empty -> .

    VAR             shift and go to state 6
    FUNCTION        reduce using rule 106 (empty -> .)
    MAIN            reduce using rule 106 (empty -> .)

    empty                          shift and go to state 7
    vars                           shift and go to state 8

state 6

    (73) vars -> VAR . tipo listaid SEMICOLON vars
    (89) tipo -> . INT
    (90) tipo -> . FLOAT
    (91) tipo -> . CHAR
    (92) tipo -> . BOOL
    (93) tipo -> . STRING
    (94) tipo -> . VOID

    INT             shift and go to state 14
    FLOAT           shift and go to state 9
    CHAR            shift and go to state 13
    BOOL            shift and go to state 11
    STRING          shift and go to state 10
    VOID            shift and go to state 12

    tipo                           shift and go to state 15

state 7

    (74) vars -> empty .

    FUNCTION        reduce using rule 74 (vars -> empty .)
    MAIN            reduce using rule 74 (vars -> empty .)
    COMMENT         reduce using rule 74 (vars -> empty .)
    CPPCOMMENT      reduce using rule 74 (vars -> empty .)
    ID              reduce using rule 74 (vars -> empty .)
    IF              reduce using rule 74 (vars -> empty .)
    VAR             reduce using rule 74 (vars -> empty .)
    WHILE           reduce using rule 74 (vars -> empty .)
    PRINT           reduce using rule 74 (vars -> empty .)
    RBRACKET        reduce using rule 74 (vars -> empty .)
    RETURN          reduce using rule 74 (vars -> empty .)


state 8

    (1) programa -> prog ID SEMICOLON vars . funcs main bloque
    (78) funcs -> . FUNCTION funcaux LPAREN args masargs RPAREN bloquefunc funcs
    (79) funcs -> . FUNCTION funcaux LPAREN RPAREN bloquefunc funcs
    (80) funcs -> . empty
    (106) empty -> .

    FUNCTION        shift and go to state 18
    MAIN            reduce using rule 106 (empty -> .)

    funcs                          shift and go to state 16
    empty                          shift and go to state 17

state 9

    (90) tipo -> FLOAT .

    ID              reduce using rule 90 (tipo -> FLOAT .)


state 10

    (93) tipo -> STRING .

    ID              reduce using rule 93 (tipo -> STRING .)


state 11

    (92) tipo -> BOOL .

    ID              reduce using rule 92 (tipo -> BOOL .)


state 12

    (94) tipo -> VOID .

    ID              reduce using rule 94 (tipo -> VOID .)


state 13

    (91) tipo -> CHAR .

    ID              reduce using rule 91 (tipo -> CHAR .)


state 14

    (89) tipo -> INT .

    ID              reduce using rule 89 (tipo -> INT .)


state 15

    (73) vars -> VAR tipo . listaid SEMICOLON vars
    (75) listaid -> . ID masid

    ID              shift and go to state 20

    listaid                        shift and go to state 19

state 16

    (1) programa -> prog ID SEMICOLON vars funcs . main bloque
    (3) main -> . MAIN

    MAIN            shift and go to state 21

    main                           shift and go to state 22

state 17

    (80) funcs -> empty .

    MAIN            reduce using rule 80 (funcs -> empty .)


state 18

    (78) funcs -> FUNCTION . funcaux LPAREN args masargs RPAREN bloquefunc funcs
    (79) funcs -> FUNCTION . funcaux LPAREN RPAREN bloquefunc funcs
    (84) funcaux -> . tipo ID
    (89) tipo -> . INT
    (90) tipo -> . FLOAT
    (91) tipo -> . CHAR
    (92) tipo -> . BOOL
    (93) tipo -> . STRING
    (94) tipo -> . VOID

    INT             shift and go to state 14
    FLOAT           shift and go to state 9
    CHAR            shift and go to state 13
    BOOL            shift and go to state 11
    STRING          shift and go to state 10
    VOID            shift and go to state 12

    tipo                           shift and go to state 23
    funcaux                        shift and go to state 24

state 19

    (73) vars -> VAR tipo listaid . SEMICOLON vars

    SEMICOLON       shift and go to state 25


state 20

    (75) listaid -> ID . masid
    (76) masid -> . COMMA listaid
    (77) masid -> . empty
    (106) empty -> .

    COMMA           shift and go to state 26
    SEMICOLON       reduce using rule 106 (empty -> .)

    empty                          shift and go to state 27
    masid                          shift and go to state 28

state 21

    (3) main -> MAIN .

    LBRACKET        reduce using rule 3 (main -> MAIN .)


state 22

    (1) programa -> prog ID SEMICOLON vars funcs main . bloque
    (6) bloque -> . LBRACKET masestatuto RBRACKET

    LBRACKET        shift and go to state 30

    bloque                         shift and go to state 29

state 23

    (84) funcaux -> tipo . ID

    ID              shift and go to state 31


state 24

    (78) funcs -> FUNCTION funcaux . LPAREN args masargs RPAREN bloquefunc funcs
    (79) funcs -> FUNCTION funcaux . LPAREN RPAREN bloquefunc funcs

    LPAREN          shift and go to state 32


state 25

    (73) vars -> VAR tipo listaid SEMICOLON . vars
    (73) vars -> . VAR tipo listaid SEMICOLON vars
    (74) vars -> . empty
    (106) empty -> .

  ! shift/reduce conflict for VAR resolved as shift
    VAR             shift and go to state 6
    FUNCTION        reduce using rule 106 (empty -> .)
    MAIN            reduce using rule 106 (empty -> .)
    COMMENT         reduce using rule 106 (empty -> .)
    CPPCOMMENT      reduce using rule 106 (empty -> .)
    ID              reduce using rule 106 (empty -> .)
    IF              reduce using rule 106 (empty -> .)
    WHILE           reduce using rule 106 (empty -> .)
    PRINT           reduce using rule 106 (empty -> .)
    RBRACKET        reduce using rule 106 (empty -> .)
    RETURN          reduce using rule 106 (empty -> .)

  ! VAR             [ reduce using rule 106 (empty -> .) ]

    empty                          shift and go to state 7
    vars                           shift and go to state 33

state 26

    (76) masid -> COMMA . listaid
    (75) listaid -> . ID masid

    ID              shift and go to state 20

    listaid                        shift and go to state 34

state 27

    (77) masid -> empty .

    SEMICOLON       reduce using rule 77 (masid -> empty .)


state 28

    (75) listaid -> ID masid .

    SEMICOLON       reduce using rule 75 (listaid -> ID masid .)


state 29

    (1) programa -> prog ID SEMICOLON vars funcs main bloque .

    $end            reduce using rule 1 (programa -> prog ID SEMICOLON vars funcs main bloque .)


state 30

    (6) bloque -> LBRACKET . masestatuto RBRACKET
    (71) masestatuto -> . estatuto masestatuto
    (72) masestatuto -> . empty
    (56) estatuto -> . asignacion
    (57) estatuto -> . condicion
    (58) estatuto -> . ciclo
    (59) estatuto -> . escritura
    (60) estatuto -> . vars
    (61) estatuto -> . llamafunc SEMICOLON
    (62) estatuto -> . COMMENT
    (63) estatuto -> . CPPCOMMENT
    (106) empty -> .
    (19) asignacion -> . ID EQUALS expresion SEMICOLON
    (20) asignacion -> . ID LSQBRACKET RSQBRACKET EQUALS LSQBRACKET expresion comaexpresion RSQBRACKET SEMICOLON
    (4) condicion -> . IF LPAREN expresion RPAREN gotoF bloque masbloque
    (10) ciclo -> . while LPAREN expresion RPAREN gotoF bloque goto
    (12) escritura -> . print LPAREN listaprint RPAREN SEMICOLON
    (73) vars -> . VAR tipo listaid SEMICOLON vars
    (74) vars -> . empty
    (64) llamafunc -> . idfunc LPAREN funcargs RPAREN
    (11) while -> . WHILE
    (13) print -> . PRINT
    (65) idfunc -> . ID

  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for CPPCOMMENT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
    COMMENT         shift and go to state 36
    CPPCOMMENT      shift and go to state 50
    RBRACKET        reduce using rule 106 (empty -> .)
    ID              shift and go to state 52
    IF              shift and go to state 43
    VAR             shift and go to state 6
    WHILE           shift and go to state 44
    PRINT           shift and go to state 48

  ! COMMENT         [ reduce using rule 106 (empty -> .) ]
  ! CPPCOMMENT      [ reduce using rule 106 (empty -> .) ]
  ! ID              [ reduce using rule 106 (empty -> .) ]
  ! IF              [ reduce using rule 106 (empty -> .) ]
  ! VAR             [ reduce using rule 106 (empty -> .) ]
  ! WHILE           [ reduce using rule 106 (empty -> .) ]
  ! PRINT           [ reduce using rule 106 (empty -> .) ]

    print                          shift and go to state 37
    idfunc                         shift and go to state 42
    asignacion                     shift and go to state 40
    vars                           shift and go to state 39
    masestatuto                    shift and go to state 35
    condicion                      shift and go to state 41
    estatuto                       shift and go to state 45
    ciclo                          shift and go to state 46
    llamafunc                      shift and go to state 47
    empty                          shift and go to state 38
    escritura                      shift and go to state 49
    while                          shift and go to state 51

state 31

    (84) funcaux -> tipo ID .

    LPAREN          reduce using rule 84 (funcaux -> tipo ID .)


state 32

    (78) funcs -> FUNCTION funcaux LPAREN . args masargs RPAREN bloquefunc funcs
    (79) funcs -> FUNCTION funcaux LPAREN . RPAREN bloquefunc funcs
    (85) args -> . tipo ID
    (86) args -> . empty
    (89) tipo -> . INT
    (90) tipo -> . FLOAT
    (91) tipo -> . CHAR
    (92) tipo -> . BOOL
    (93) tipo -> . STRING
    (94) tipo -> . VOID
    (106) empty -> .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 55
    INT             shift and go to state 14
    FLOAT           shift and go to state 9
    CHAR            shift and go to state 13
    BOOL            shift and go to state 11
    STRING          shift and go to state 10
    VOID            shift and go to state 12
    COMMA           reduce using rule 106 (empty -> .)

  ! RPAREN          [ reduce using rule 106 (empty -> .) ]

    args                           shift and go to state 56
    tipo                           shift and go to state 53
    empty                          shift and go to state 54

state 33

    (73) vars -> VAR tipo listaid SEMICOLON vars .

    FUNCTION        reduce using rule 73 (vars -> VAR tipo listaid SEMICOLON vars .)
    MAIN            reduce using rule 73 (vars -> VAR tipo listaid SEMICOLON vars .)
    COMMENT         reduce using rule 73 (vars -> VAR tipo listaid SEMICOLON vars .)
    CPPCOMMENT      reduce using rule 73 (vars -> VAR tipo listaid SEMICOLON vars .)
    ID              reduce using rule 73 (vars -> VAR tipo listaid SEMICOLON vars .)
    IF              reduce using rule 73 (vars -> VAR tipo listaid SEMICOLON vars .)
    VAR             reduce using rule 73 (vars -> VAR tipo listaid SEMICOLON vars .)
    WHILE           reduce using rule 73 (vars -> VAR tipo listaid SEMICOLON vars .)
    PRINT           reduce using rule 73 (vars -> VAR tipo listaid SEMICOLON vars .)
    RBRACKET        reduce using rule 73 (vars -> VAR tipo listaid SEMICOLON vars .)
    RETURN          reduce using rule 73 (vars -> VAR tipo listaid SEMICOLON vars .)


state 34

    (76) masid -> COMMA listaid .

    SEMICOLON       reduce using rule 76 (masid -> COMMA listaid .)


state 35

    (6) bloque -> LBRACKET masestatuto . RBRACKET

    RBRACKET        shift and go to state 57


state 36

    (62) estatuto -> COMMENT .

    COMMENT         reduce using rule 62 (estatuto -> COMMENT .)
    CPPCOMMENT      reduce using rule 62 (estatuto -> COMMENT .)
    ID              reduce using rule 62 (estatuto -> COMMENT .)
    IF              reduce using rule 62 (estatuto -> COMMENT .)
    VAR             reduce using rule 62 (estatuto -> COMMENT .)
    WHILE           reduce using rule 62 (estatuto -> COMMENT .)
    PRINT           reduce using rule 62 (estatuto -> COMMENT .)
    RBRACKET        reduce using rule 62 (estatuto -> COMMENT .)
    RETURN          reduce using rule 62 (estatuto -> COMMENT .)


state 37

    (12) escritura -> print . LPAREN listaprint RPAREN SEMICOLON

    LPAREN          shift and go to state 58


state 38

    (72) masestatuto -> empty .
    (74) vars -> empty .

  ! reduce/reduce conflict for RETURN resolved using rule 72 (masestatuto -> empty .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 72 (masestatuto -> empty .)
    RBRACKET        reduce using rule 72 (masestatuto -> empty .)
    RETURN          reduce using rule 72 (masestatuto -> empty .)
    COMMENT         reduce using rule 74 (vars -> empty .)
    CPPCOMMENT      reduce using rule 74 (vars -> empty .)
    ID              reduce using rule 74 (vars -> empty .)
    IF              reduce using rule 74 (vars -> empty .)
    VAR             reduce using rule 74 (vars -> empty .)
    WHILE           reduce using rule 74 (vars -> empty .)
    PRINT           reduce using rule 74 (vars -> empty .)

  ! RETURN          [ reduce using rule 74 (vars -> empty .) ]
  ! RBRACKET        [ reduce using rule 74 (vars -> empty .) ]


state 39

    (60) estatuto -> vars .

    COMMENT         reduce using rule 60 (estatuto -> vars .)
    CPPCOMMENT      reduce using rule 60 (estatuto -> vars .)
    ID              reduce using rule 60 (estatuto -> vars .)
    IF              reduce using rule 60 (estatuto -> vars .)
    VAR             reduce using rule 60 (estatuto -> vars .)
    WHILE           reduce using rule 60 (estatuto -> vars .)
    PRINT           reduce using rule 60 (estatuto -> vars .)
    RBRACKET        reduce using rule 60 (estatuto -> vars .)
    RETURN          reduce using rule 60 (estatuto -> vars .)


state 40

    (56) estatuto -> asignacion .

    COMMENT         reduce using rule 56 (estatuto -> asignacion .)
    CPPCOMMENT      reduce using rule 56 (estatuto -> asignacion .)
    ID              reduce using rule 56 (estatuto -> asignacion .)
    IF              reduce using rule 56 (estatuto -> asignacion .)
    VAR             reduce using rule 56 (estatuto -> asignacion .)
    WHILE           reduce using rule 56 (estatuto -> asignacion .)
    PRINT           reduce using rule 56 (estatuto -> asignacion .)
    RBRACKET        reduce using rule 56 (estatuto -> asignacion .)
    RETURN          reduce using rule 56 (estatuto -> asignacion .)


state 41

    (57) estatuto -> condicion .

    COMMENT         reduce using rule 57 (estatuto -> condicion .)
    CPPCOMMENT      reduce using rule 57 (estatuto -> condicion .)
    ID              reduce using rule 57 (estatuto -> condicion .)
    IF              reduce using rule 57 (estatuto -> condicion .)
    VAR             reduce using rule 57 (estatuto -> condicion .)
    WHILE           reduce using rule 57 (estatuto -> condicion .)
    PRINT           reduce using rule 57 (estatuto -> condicion .)
    RBRACKET        reduce using rule 57 (estatuto -> condicion .)
    RETURN          reduce using rule 57 (estatuto -> condicion .)


state 42

    (64) llamafunc -> idfunc . LPAREN funcargs RPAREN

    LPAREN          shift and go to state 59


state 43

    (4) condicion -> IF . LPAREN expresion RPAREN gotoF bloque masbloque

    LPAREN          shift and go to state 60


state 44

    (11) while -> WHILE .

    LPAREN          reduce using rule 11 (while -> WHILE .)


state 45

    (71) masestatuto -> estatuto . masestatuto
    (71) masestatuto -> . estatuto masestatuto
    (72) masestatuto -> . empty
    (56) estatuto -> . asignacion
    (57) estatuto -> . condicion
    (58) estatuto -> . ciclo
    (59) estatuto -> . escritura
    (60) estatuto -> . vars
    (61) estatuto -> . llamafunc SEMICOLON
    (62) estatuto -> . COMMENT
    (63) estatuto -> . CPPCOMMENT
    (106) empty -> .
    (19) asignacion -> . ID EQUALS expresion SEMICOLON
    (20) asignacion -> . ID LSQBRACKET RSQBRACKET EQUALS LSQBRACKET expresion comaexpresion RSQBRACKET SEMICOLON
    (4) condicion -> . IF LPAREN expresion RPAREN gotoF bloque masbloque
    (10) ciclo -> . while LPAREN expresion RPAREN gotoF bloque goto
    (12) escritura -> . print LPAREN listaprint RPAREN SEMICOLON
    (73) vars -> . VAR tipo listaid SEMICOLON vars
    (74) vars -> . empty
    (64) llamafunc -> . idfunc LPAREN funcargs RPAREN
    (11) while -> . WHILE
    (13) print -> . PRINT
    (65) idfunc -> . ID

  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for CPPCOMMENT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
    COMMENT         shift and go to state 36
    CPPCOMMENT      shift and go to state 50
    RBRACKET        reduce using rule 106 (empty -> .)
    RETURN          reduce using rule 106 (empty -> .)
    ID              shift and go to state 52
    IF              shift and go to state 43
    VAR             shift and go to state 6
    WHILE           shift and go to state 44
    PRINT           shift and go to state 48

  ! COMMENT         [ reduce using rule 106 (empty -> .) ]
  ! CPPCOMMENT      [ reduce using rule 106 (empty -> .) ]
  ! ID              [ reduce using rule 106 (empty -> .) ]
  ! IF              [ reduce using rule 106 (empty -> .) ]
  ! VAR             [ reduce using rule 106 (empty -> .) ]
  ! WHILE           [ reduce using rule 106 (empty -> .) ]
  ! PRINT           [ reduce using rule 106 (empty -> .) ]

    print                          shift and go to state 37
    idfunc                         shift and go to state 42
    asignacion                     shift and go to state 40
    vars                           shift and go to state 39
    masestatuto                    shift and go to state 61
    condicion                      shift and go to state 41
    estatuto                       shift and go to state 45
    ciclo                          shift and go to state 46
    llamafunc                      shift and go to state 47
    empty                          shift and go to state 38
    escritura                      shift and go to state 49
    while                          shift and go to state 51

state 46

    (58) estatuto -> ciclo .

    COMMENT         reduce using rule 58 (estatuto -> ciclo .)
    CPPCOMMENT      reduce using rule 58 (estatuto -> ciclo .)
    ID              reduce using rule 58 (estatuto -> ciclo .)
    IF              reduce using rule 58 (estatuto -> ciclo .)
    VAR             reduce using rule 58 (estatuto -> ciclo .)
    WHILE           reduce using rule 58 (estatuto -> ciclo .)
    PRINT           reduce using rule 58 (estatuto -> ciclo .)
    RBRACKET        reduce using rule 58 (estatuto -> ciclo .)
    RETURN          reduce using rule 58 (estatuto -> ciclo .)


state 47

    (61) estatuto -> llamafunc . SEMICOLON

    SEMICOLON       shift and go to state 62


state 48

    (13) print -> PRINT .

    LPAREN          reduce using rule 13 (print -> PRINT .)


state 49

    (59) estatuto -> escritura .

    COMMENT         reduce using rule 59 (estatuto -> escritura .)
    CPPCOMMENT      reduce using rule 59 (estatuto -> escritura .)
    ID              reduce using rule 59 (estatuto -> escritura .)
    IF              reduce using rule 59 (estatuto -> escritura .)
    VAR             reduce using rule 59 (estatuto -> escritura .)
    WHILE           reduce using rule 59 (estatuto -> escritura .)
    PRINT           reduce using rule 59 (estatuto -> escritura .)
    RBRACKET        reduce using rule 59 (estatuto -> escritura .)
    RETURN          reduce using rule 59 (estatuto -> escritura .)


state 50

    (63) estatuto -> CPPCOMMENT .

    COMMENT         reduce using rule 63 (estatuto -> CPPCOMMENT .)
    CPPCOMMENT      reduce using rule 63 (estatuto -> CPPCOMMENT .)
    ID              reduce using rule 63 (estatuto -> CPPCOMMENT .)
    IF              reduce using rule 63 (estatuto -> CPPCOMMENT .)
    VAR             reduce using rule 63 (estatuto -> CPPCOMMENT .)
    WHILE           reduce using rule 63 (estatuto -> CPPCOMMENT .)
    PRINT           reduce using rule 63 (estatuto -> CPPCOMMENT .)
    RBRACKET        reduce using rule 63 (estatuto -> CPPCOMMENT .)
    RETURN          reduce using rule 63 (estatuto -> CPPCOMMENT .)


state 51

    (10) ciclo -> while . LPAREN expresion RPAREN gotoF bloque goto

    LPAREN          shift and go to state 63


state 52

    (19) asignacion -> ID . EQUALS expresion SEMICOLON
    (20) asignacion -> ID . LSQBRACKET RSQBRACKET EQUALS LSQBRACKET expresion comaexpresion RSQBRACKET SEMICOLON
    (65) idfunc -> ID .

    EQUALS          shift and go to state 64
    LSQBRACKET      shift and go to state 65
    LPAREN          reduce using rule 65 (idfunc -> ID .)


state 53

    (85) args -> tipo . ID

    ID              shift and go to state 66


state 54

    (86) args -> empty .

    COMMA           reduce using rule 86 (args -> empty .)
    RPAREN          reduce using rule 86 (args -> empty .)


state 55

    (79) funcs -> FUNCTION funcaux LPAREN RPAREN . bloquefunc funcs
    (81) bloquefunc -> . LBRACKET masestatuto retorno RBRACKET

    LBRACKET        shift and go to state 68

    bloquefunc                     shift and go to state 67

state 56

    (78) funcs -> FUNCTION funcaux LPAREN args . masargs RPAREN bloquefunc funcs
    (87) masargs -> . COMMA args masargs
    (88) masargs -> . empty
    (106) empty -> .

    COMMA           shift and go to state 69
    RPAREN          reduce using rule 106 (empty -> .)

    empty                          shift and go to state 70
    masargs                        shift and go to state 71

state 57

    (6) bloque -> LBRACKET masestatuto RBRACKET .

    $end            reduce using rule 6 (bloque -> LBRACKET masestatuto RBRACKET .)
    ELSE            reduce using rule 6 (bloque -> LBRACKET masestatuto RBRACKET .)
    COMMENT         reduce using rule 6 (bloque -> LBRACKET masestatuto RBRACKET .)
    CPPCOMMENT      reduce using rule 6 (bloque -> LBRACKET masestatuto RBRACKET .)
    ID              reduce using rule 6 (bloque -> LBRACKET masestatuto RBRACKET .)
    IF              reduce using rule 6 (bloque -> LBRACKET masestatuto RBRACKET .)
    VAR             reduce using rule 6 (bloque -> LBRACKET masestatuto RBRACKET .)
    WHILE           reduce using rule 6 (bloque -> LBRACKET masestatuto RBRACKET .)
    PRINT           reduce using rule 6 (bloque -> LBRACKET masestatuto RBRACKET .)
    RBRACKET        reduce using rule 6 (bloque -> LBRACKET masestatuto RBRACKET .)
    RETURN          reduce using rule 6 (bloque -> LBRACKET masestatuto RBRACKET .)


state 58

    (12) escritura -> print LPAREN . listaprint RPAREN SEMICOLON
    (14) listaprint -> . expresion masprint
    (15) listaprint -> . ctestring masprint
    (37) expresion -> . expcomp masexpresion
    (103) ctestring -> . CTESTRING
    (47) expcomp -> . exp expcompcontinuo
    (30) exp -> . termino masexp
    (42) termino -> . factor masterminos
    (21) factor -> . leftparen expresion rightparen
    (22) factor -> . varcte
    (23) factor -> . varid
    (24) factor -> . llamafunc
    (25) leftparen -> . LPAREN
    (95) varcte -> . cteint
    (96) varcte -> . ctefloat
    (97) varcte -> . ctechar
    (98) varcte -> . ctestring
    (99) varcte -> . ctebool
    (27) varid -> . ID arr
    (64) llamafunc -> . idfunc LPAREN funcargs RPAREN
    (100) cteint -> . CTEINT
    (101) ctefloat -> . CTEFLOAT
    (102) ctechar -> . CTECHAR
    (104) ctebool -> . TRUE
    (105) ctebool -> . FALSE
    (65) idfunc -> . ID

    CTESTRING       shift and go to state 73
    LPAREN          shift and go to state 93
    ID              shift and go to state 94
    CTEINT          shift and go to state 86
    CTEFLOAT        shift and go to state 89
    CTECHAR         shift and go to state 80
    TRUE            shift and go to state 77
    FALSE           shift and go to state 76

    idfunc                         shift and go to state 42
    exp                            shift and go to state 72
    termino                        shift and go to state 74
    varid                          shift and go to state 75
    cteint                         shift and go to state 88
    ctechar                        shift and go to state 78
    factor                         shift and go to state 79
    varcte                         shift and go to state 81
    leftparen                      shift and go to state 82
    listaprint                     shift and go to state 83
    llamafunc                      shift and go to state 84
    expcomp                        shift and go to state 85
    ctefloat                       shift and go to state 87
    ctestring                      shift and go to state 90
    expresion                      shift and go to state 91
    ctebool                        shift and go to state 92

state 59

    (64) llamafunc -> idfunc LPAREN . funcargs RPAREN
    (66) funcargs -> . expresion listafuncargs checarparams
    (67) funcargs -> . empty
    (37) expresion -> . expcomp masexpresion
    (106) empty -> .
    (47) expcomp -> . exp expcompcontinuo
    (30) exp -> . termino masexp
    (42) termino -> . factor masterminos
    (21) factor -> . leftparen expresion rightparen
    (22) factor -> . varcte
    (23) factor -> . varid
    (24) factor -> . llamafunc
    (25) leftparen -> . LPAREN
    (95) varcte -> . cteint
    (96) varcte -> . ctefloat
    (97) varcte -> . ctechar
    (98) varcte -> . ctestring
    (99) varcte -> . ctebool
    (27) varid -> . ID arr
    (64) llamafunc -> . idfunc LPAREN funcargs RPAREN
    (100) cteint -> . CTEINT
    (101) ctefloat -> . CTEFLOAT
    (102) ctechar -> . CTECHAR
    (103) ctestring -> . CTESTRING
    (104) ctebool -> . TRUE
    (105) ctebool -> . FALSE
    (65) idfunc -> . ID

    RPAREN          reduce using rule 106 (empty -> .)
    LPAREN          shift and go to state 93
    ID              shift and go to state 94
    CTEINT          shift and go to state 86
    CTEFLOAT        shift and go to state 89
    CTECHAR         shift and go to state 80
    CTESTRING       shift and go to state 73
    TRUE            shift and go to state 77
    FALSE           shift and go to state 76

    idfunc                         shift and go to state 42
    exp                            shift and go to state 72
    funcargs                       shift and go to state 95
    termino                        shift and go to state 74
    varid                          shift and go to state 75
    ctechar                        shift and go to state 78
    factor                         shift and go to state 79
    varcte                         shift and go to state 81
    leftparen                      shift and go to state 82
    llamafunc                      shift and go to state 84
    expcomp                        shift and go to state 85
    empty                          shift and go to state 96
    ctefloat                       shift and go to state 87
    cteint                         shift and go to state 88
    ctestring                      shift and go to state 97
    expresion                      shift and go to state 98
    ctebool                        shift and go to state 92

state 60

    (4) condicion -> IF LPAREN . expresion RPAREN gotoF bloque masbloque
    (37) expresion -> . expcomp masexpresion
    (47) expcomp -> . exp expcompcontinuo
    (30) exp -> . termino masexp
    (42) termino -> . factor masterminos
    (21) factor -> . leftparen expresion rightparen
    (22) factor -> . varcte
    (23) factor -> . varid
    (24) factor -> . llamafunc
    (25) leftparen -> . LPAREN
    (95) varcte -> . cteint
    (96) varcte -> . ctefloat
    (97) varcte -> . ctechar
    (98) varcte -> . ctestring
    (99) varcte -> . ctebool
    (27) varid -> . ID arr
    (64) llamafunc -> . idfunc LPAREN funcargs RPAREN
    (100) cteint -> . CTEINT
    (101) ctefloat -> . CTEFLOAT
    (102) ctechar -> . CTECHAR
    (103) ctestring -> . CTESTRING
    (104) ctebool -> . TRUE
    (105) ctebool -> . FALSE
    (65) idfunc -> . ID

    LPAREN          shift and go to state 93
    ID              shift and go to state 94
    CTEINT          shift and go to state 86
    CTEFLOAT        shift and go to state 89
    CTECHAR         shift and go to state 80
    CTESTRING       shift and go to state 73
    TRUE            shift and go to state 77
    FALSE           shift and go to state 76

    idfunc                         shift and go to state 42
    exp                            shift and go to state 72
    termino                        shift and go to state 74
    varid                          shift and go to state 75
    cteint                         shift and go to state 88
    factor                         shift and go to state 79
    varcte                         shift and go to state 81
    leftparen                      shift and go to state 82
    llamafunc                      shift and go to state 84
    expcomp                        shift and go to state 85
    ctechar                        shift and go to state 78
    ctefloat                       shift and go to state 87
    ctestring                      shift and go to state 97
    expresion                      shift and go to state 99
    ctebool                        shift and go to state 92

state 61

    (71) masestatuto -> estatuto masestatuto .

    RBRACKET        reduce using rule 71 (masestatuto -> estatuto masestatuto .)
    RETURN          reduce using rule 71 (masestatuto -> estatuto masestatuto .)


state 62

    (61) estatuto -> llamafunc SEMICOLON .

    COMMENT         reduce using rule 61 (estatuto -> llamafunc SEMICOLON .)
    CPPCOMMENT      reduce using rule 61 (estatuto -> llamafunc SEMICOLON .)
    ID              reduce using rule 61 (estatuto -> llamafunc SEMICOLON .)
    IF              reduce using rule 61 (estatuto -> llamafunc SEMICOLON .)
    VAR             reduce using rule 61 (estatuto -> llamafunc SEMICOLON .)
    WHILE           reduce using rule 61 (estatuto -> llamafunc SEMICOLON .)
    PRINT           reduce using rule 61 (estatuto -> llamafunc SEMICOLON .)
    RBRACKET        reduce using rule 61 (estatuto -> llamafunc SEMICOLON .)
    RETURN          reduce using rule 61 (estatuto -> llamafunc SEMICOLON .)


state 63

    (10) ciclo -> while LPAREN . expresion RPAREN gotoF bloque goto
    (37) expresion -> . expcomp masexpresion
    (47) expcomp -> . exp expcompcontinuo
    (30) exp -> . termino masexp
    (42) termino -> . factor masterminos
    (21) factor -> . leftparen expresion rightparen
    (22) factor -> . varcte
    (23) factor -> . varid
    (24) factor -> . llamafunc
    (25) leftparen -> . LPAREN
    (95) varcte -> . cteint
    (96) varcte -> . ctefloat
    (97) varcte -> . ctechar
    (98) varcte -> . ctestring
    (99) varcte -> . ctebool
    (27) varid -> . ID arr
    (64) llamafunc -> . idfunc LPAREN funcargs RPAREN
    (100) cteint -> . CTEINT
    (101) ctefloat -> . CTEFLOAT
    (102) ctechar -> . CTECHAR
    (103) ctestring -> . CTESTRING
    (104) ctebool -> . TRUE
    (105) ctebool -> . FALSE
    (65) idfunc -> . ID

    LPAREN          shift and go to state 93
    ID              shift and go to state 94
    CTEINT          shift and go to state 86
    CTEFLOAT        shift and go to state 89
    CTECHAR         shift and go to state 80
    CTESTRING       shift and go to state 73
    TRUE            shift and go to state 77
    FALSE           shift and go to state 76

    idfunc                         shift and go to state 42
    exp                            shift and go to state 72
    termino                        shift and go to state 74
    varid                          shift and go to state 75
    cteint                         shift and go to state 88
    ctechar                        shift and go to state 78
    factor                         shift and go to state 79
    varcte                         shift and go to state 81
    leftparen                      shift and go to state 82
    llamafunc                      shift and go to state 84
    expcomp                        shift and go to state 85
    ctefloat                       shift and go to state 87
    ctestring                      shift and go to state 97
    expresion                      shift and go to state 100
    ctebool                        shift and go to state 92

state 64

    (19) asignacion -> ID EQUALS . expresion SEMICOLON
    (37) expresion -> . expcomp masexpresion
    (47) expcomp -> . exp expcompcontinuo
    (30) exp -> . termino masexp
    (42) termino -> . factor masterminos
    (21) factor -> . leftparen expresion rightparen
    (22) factor -> . varcte
    (23) factor -> . varid
    (24) factor -> . llamafunc
    (25) leftparen -> . LPAREN
    (95) varcte -> . cteint
    (96) varcte -> . ctefloat
    (97) varcte -> . ctechar
    (98) varcte -> . ctestring
    (99) varcte -> . ctebool
    (27) varid -> . ID arr
    (64) llamafunc -> . idfunc LPAREN funcargs RPAREN
    (100) cteint -> . CTEINT
    (101) ctefloat -> . CTEFLOAT
    (102) ctechar -> . CTECHAR
    (103) ctestring -> . CTESTRING
    (104) ctebool -> . TRUE
    (105) ctebool -> . FALSE
    (65) idfunc -> . ID

    LPAREN          shift and go to state 93
    ID              shift and go to state 94
    CTEINT          shift and go to state 86
    CTEFLOAT        shift and go to state 89
    CTECHAR         shift and go to state 80
    CTESTRING       shift and go to state 73
    TRUE            shift and go to state 77
    FALSE           shift and go to state 76

    idfunc                         shift and go to state 42
    exp                            shift and go to state 72
    termino                        shift and go to state 74
    varid                          shift and go to state 75
    cteint                         shift and go to state 88
    ctechar                        shift and go to state 78
    factor                         shift and go to state 79
    varcte                         shift and go to state 81
    leftparen                      shift and go to state 82
    llamafunc                      shift and go to state 84
    expcomp                        shift and go to state 85
    ctefloat                       shift and go to state 87
    ctestring                      shift and go to state 97
    expresion                      shift and go to state 101
    ctebool                        shift and go to state 92

state 65

    (20) asignacion -> ID LSQBRACKET . RSQBRACKET EQUALS LSQBRACKET expresion comaexpresion RSQBRACKET SEMICOLON

    RSQBRACKET      shift and go to state 102


state 66

    (85) args -> tipo ID .

    COMMA           reduce using rule 85 (args -> tipo ID .)
    RPAREN          reduce using rule 85 (args -> tipo ID .)


state 67

    (79) funcs -> FUNCTION funcaux LPAREN RPAREN bloquefunc . funcs
    (78) funcs -> . FUNCTION funcaux LPAREN args masargs RPAREN bloquefunc funcs
    (79) funcs -> . FUNCTION funcaux LPAREN RPAREN bloquefunc funcs
    (80) funcs -> . empty
    (106) empty -> .

    FUNCTION        shift and go to state 18
    MAIN            reduce using rule 106 (empty -> .)

    empty                          shift and go to state 17
    funcs                          shift and go to state 103

state 68

    (81) bloquefunc -> LBRACKET . masestatuto retorno RBRACKET
    (71) masestatuto -> . estatuto masestatuto
    (72) masestatuto -> . empty
    (56) estatuto -> . asignacion
    (57) estatuto -> . condicion
    (58) estatuto -> . ciclo
    (59) estatuto -> . escritura
    (60) estatuto -> . vars
    (61) estatuto -> . llamafunc SEMICOLON
    (62) estatuto -> . COMMENT
    (63) estatuto -> . CPPCOMMENT
    (106) empty -> .
    (19) asignacion -> . ID EQUALS expresion SEMICOLON
    (20) asignacion -> . ID LSQBRACKET RSQBRACKET EQUALS LSQBRACKET expresion comaexpresion RSQBRACKET SEMICOLON
    (4) condicion -> . IF LPAREN expresion RPAREN gotoF bloque masbloque
    (10) ciclo -> . while LPAREN expresion RPAREN gotoF bloque goto
    (12) escritura -> . print LPAREN listaprint RPAREN SEMICOLON
    (73) vars -> . VAR tipo listaid SEMICOLON vars
    (74) vars -> . empty
    (64) llamafunc -> . idfunc LPAREN funcargs RPAREN
    (11) while -> . WHILE
    (13) print -> . PRINT
    (65) idfunc -> . ID

  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for CPPCOMMENT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
    COMMENT         shift and go to state 36
    CPPCOMMENT      shift and go to state 50
    RETURN          reduce using rule 106 (empty -> .)
    ID              shift and go to state 52
    IF              shift and go to state 43
    VAR             shift and go to state 6
    WHILE           shift and go to state 44
    PRINT           shift and go to state 48

  ! COMMENT         [ reduce using rule 106 (empty -> .) ]
  ! CPPCOMMENT      [ reduce using rule 106 (empty -> .) ]
  ! ID              [ reduce using rule 106 (empty -> .) ]
  ! IF              [ reduce using rule 106 (empty -> .) ]
  ! VAR             [ reduce using rule 106 (empty -> .) ]
  ! WHILE           [ reduce using rule 106 (empty -> .) ]
  ! PRINT           [ reduce using rule 106 (empty -> .) ]

    print                          shift and go to state 37
    idfunc                         shift and go to state 42
    masestatuto                    shift and go to state 104
    vars                           shift and go to state 39
    asignacion                     shift and go to state 40
    condicion                      shift and go to state 41
    estatuto                       shift and go to state 45
    ciclo                          shift and go to state 46
    llamafunc                      shift and go to state 47
    empty                          shift and go to state 38
    escritura                      shift and go to state 49
    while                          shift and go to state 51

state 69

    (87) masargs -> COMMA . args masargs
    (85) args -> . tipo ID
    (86) args -> . empty
    (89) tipo -> . INT
    (90) tipo -> . FLOAT
    (91) tipo -> . CHAR
    (92) tipo -> . BOOL
    (93) tipo -> . STRING
    (94) tipo -> . VOID
    (106) empty -> .

    INT             shift and go to state 14
    FLOAT           shift and go to state 9
    CHAR            shift and go to state 13
    BOOL            shift and go to state 11
    STRING          shift and go to state 10
    VOID            shift and go to state 12
    COMMA           reduce using rule 106 (empty -> .)
    RPAREN          reduce using rule 106 (empty -> .)

    empty                          shift and go to state 54
    tipo                           shift and go to state 53
    args                           shift and go to state 105

state 70

    (88) masargs -> empty .

    RPAREN          reduce using rule 88 (masargs -> empty .)


state 71

    (78) funcs -> FUNCTION funcaux LPAREN args masargs . RPAREN bloquefunc funcs

    RPAREN          shift and go to state 106


state 72

    (47) expcomp -> exp . expcompcontinuo
    (54) expcompcontinuo -> . addQPComp expcomp
    (55) expcompcontinuo -> . empty
    (48) addQPComp -> . MORETHAN
    (49) addQPComp -> . LESSTHAN
    (50) addQPComp -> . NOTEQUAL
    (51) addQPComp -> . ISEQUALTO
    (52) addQPComp -> . MORETHANEQUAL
    (53) addQPComp -> . LESSTHANEQUAL
    (106) empty -> .

    MORETHAN        shift and go to state 114
    LESSTHAN        shift and go to state 110
    NOTEQUAL        shift and go to state 112
    ISEQUALTO       shift and go to state 111
    MORETHANEQUAL   shift and go to state 109
    LESSTHANEQUAL   shift and go to state 107
    AND             reduce using rule 106 (empty -> .)
    OR              reduce using rule 106 (empty -> .)
    COMMA           reduce using rule 106 (empty -> .)
    RPAREN          reduce using rule 106 (empty -> .)
    SEMICOLON       reduce using rule 106 (empty -> .)
    RSQBRACKET      reduce using rule 106 (empty -> .)

    empty                          shift and go to state 113
    addQPComp                      shift and go to state 108
    expcompcontinuo                shift and go to state 115

state 73

    (103) ctestring -> CTESTRING .

    TIMES           reduce using rule 103 (ctestring -> CTESTRING .)
    DIVIDE          reduce using rule 103 (ctestring -> CTESTRING .)
    PLUS            reduce using rule 103 (ctestring -> CTESTRING .)
    MINUS           reduce using rule 103 (ctestring -> CTESTRING .)
    MORETHAN        reduce using rule 103 (ctestring -> CTESTRING .)
    LESSTHAN        reduce using rule 103 (ctestring -> CTESTRING .)
    NOTEQUAL        reduce using rule 103 (ctestring -> CTESTRING .)
    ISEQUALTO       reduce using rule 103 (ctestring -> CTESTRING .)
    MORETHANEQUAL   reduce using rule 103 (ctestring -> CTESTRING .)
    LESSTHANEQUAL   reduce using rule 103 (ctestring -> CTESTRING .)
    AND             reduce using rule 103 (ctestring -> CTESTRING .)
    OR              reduce using rule 103 (ctestring -> CTESTRING .)
    COMMA           reduce using rule 103 (ctestring -> CTESTRING .)
    RSQBRACKET      reduce using rule 103 (ctestring -> CTESTRING .)
    RPAREN          reduce using rule 103 (ctestring -> CTESTRING .)
    SEMICOLON       reduce using rule 103 (ctestring -> CTESTRING .)


state 74

    (30) exp -> termino . masexp
    (31) masexp -> . addQPPM exp
    (32) masexp -> . empty
    (33) addQPPM -> . PLUS
    (34) addQPPM -> . MINUS
    (106) empty -> .

    PLUS            shift and go to state 117
    MINUS           shift and go to state 120
    MORETHAN        reduce using rule 106 (empty -> .)
    LESSTHAN        reduce using rule 106 (empty -> .)
    NOTEQUAL        reduce using rule 106 (empty -> .)
    ISEQUALTO       reduce using rule 106 (empty -> .)
    MORETHANEQUAL   reduce using rule 106 (empty -> .)
    LESSTHANEQUAL   reduce using rule 106 (empty -> .)
    AND             reduce using rule 106 (empty -> .)
    OR              reduce using rule 106 (empty -> .)
    COMMA           reduce using rule 106 (empty -> .)
    RPAREN          reduce using rule 106 (empty -> .)
    SEMICOLON       reduce using rule 106 (empty -> .)
    RSQBRACKET      reduce using rule 106 (empty -> .)

    masexp                         shift and go to state 118
    empty                          shift and go to state 119
    addQPPM                        shift and go to state 116

state 75

    (23) factor -> varid .

    TIMES           reduce using rule 23 (factor -> varid .)
    DIVIDE          reduce using rule 23 (factor -> varid .)
    PLUS            reduce using rule 23 (factor -> varid .)
    MINUS           reduce using rule 23 (factor -> varid .)
    MORETHAN        reduce using rule 23 (factor -> varid .)
    LESSTHAN        reduce using rule 23 (factor -> varid .)
    NOTEQUAL        reduce using rule 23 (factor -> varid .)
    ISEQUALTO       reduce using rule 23 (factor -> varid .)
    MORETHANEQUAL   reduce using rule 23 (factor -> varid .)
    LESSTHANEQUAL   reduce using rule 23 (factor -> varid .)
    AND             reduce using rule 23 (factor -> varid .)
    OR              reduce using rule 23 (factor -> varid .)
    COMMA           reduce using rule 23 (factor -> varid .)
    RPAREN          reduce using rule 23 (factor -> varid .)
    RSQBRACKET      reduce using rule 23 (factor -> varid .)
    SEMICOLON       reduce using rule 23 (factor -> varid .)


state 76

    (105) ctebool -> FALSE .

    TIMES           reduce using rule 105 (ctebool -> FALSE .)
    DIVIDE          reduce using rule 105 (ctebool -> FALSE .)
    PLUS            reduce using rule 105 (ctebool -> FALSE .)
    MINUS           reduce using rule 105 (ctebool -> FALSE .)
    MORETHAN        reduce using rule 105 (ctebool -> FALSE .)
    LESSTHAN        reduce using rule 105 (ctebool -> FALSE .)
    NOTEQUAL        reduce using rule 105 (ctebool -> FALSE .)
    ISEQUALTO       reduce using rule 105 (ctebool -> FALSE .)
    MORETHANEQUAL   reduce using rule 105 (ctebool -> FALSE .)
    LESSTHANEQUAL   reduce using rule 105 (ctebool -> FALSE .)
    AND             reduce using rule 105 (ctebool -> FALSE .)
    OR              reduce using rule 105 (ctebool -> FALSE .)
    COMMA           reduce using rule 105 (ctebool -> FALSE .)
    RPAREN          reduce using rule 105 (ctebool -> FALSE .)
    SEMICOLON       reduce using rule 105 (ctebool -> FALSE .)
    RSQBRACKET      reduce using rule 105 (ctebool -> FALSE .)


state 77

    (104) ctebool -> TRUE .

    TIMES           reduce using rule 104 (ctebool -> TRUE .)
    DIVIDE          reduce using rule 104 (ctebool -> TRUE .)
    PLUS            reduce using rule 104 (ctebool -> TRUE .)
    MINUS           reduce using rule 104 (ctebool -> TRUE .)
    MORETHAN        reduce using rule 104 (ctebool -> TRUE .)
    LESSTHAN        reduce using rule 104 (ctebool -> TRUE .)
    NOTEQUAL        reduce using rule 104 (ctebool -> TRUE .)
    ISEQUALTO       reduce using rule 104 (ctebool -> TRUE .)
    MORETHANEQUAL   reduce using rule 104 (ctebool -> TRUE .)
    LESSTHANEQUAL   reduce using rule 104 (ctebool -> TRUE .)
    AND             reduce using rule 104 (ctebool -> TRUE .)
    OR              reduce using rule 104 (ctebool -> TRUE .)
    COMMA           reduce using rule 104 (ctebool -> TRUE .)
    RPAREN          reduce using rule 104 (ctebool -> TRUE .)
    SEMICOLON       reduce using rule 104 (ctebool -> TRUE .)
    RSQBRACKET      reduce using rule 104 (ctebool -> TRUE .)


state 78

    (97) varcte -> ctechar .

    TIMES           reduce using rule 97 (varcte -> ctechar .)
    DIVIDE          reduce using rule 97 (varcte -> ctechar .)
    PLUS            reduce using rule 97 (varcte -> ctechar .)
    MINUS           reduce using rule 97 (varcte -> ctechar .)
    MORETHAN        reduce using rule 97 (varcte -> ctechar .)
    LESSTHAN        reduce using rule 97 (varcte -> ctechar .)
    NOTEQUAL        reduce using rule 97 (varcte -> ctechar .)
    ISEQUALTO       reduce using rule 97 (varcte -> ctechar .)
    MORETHANEQUAL   reduce using rule 97 (varcte -> ctechar .)
    LESSTHANEQUAL   reduce using rule 97 (varcte -> ctechar .)
    AND             reduce using rule 97 (varcte -> ctechar .)
    OR              reduce using rule 97 (varcte -> ctechar .)
    COMMA           reduce using rule 97 (varcte -> ctechar .)
    RSQBRACKET      reduce using rule 97 (varcte -> ctechar .)
    RPAREN          reduce using rule 97 (varcte -> ctechar .)
    SEMICOLON       reduce using rule 97 (varcte -> ctechar .)


state 79

    (42) termino -> factor . masterminos
    (45) masterminos -> . addQTD termino
    (46) masterminos -> . empty
    (43) addQTD -> . TIMES
    (44) addQTD -> . DIVIDE
    (106) empty -> .

    TIMES           shift and go to state 124
    DIVIDE          shift and go to state 122
    PLUS            reduce using rule 106 (empty -> .)
    MINUS           reduce using rule 106 (empty -> .)
    MORETHAN        reduce using rule 106 (empty -> .)
    LESSTHAN        reduce using rule 106 (empty -> .)
    NOTEQUAL        reduce using rule 106 (empty -> .)
    ISEQUALTO       reduce using rule 106 (empty -> .)
    MORETHANEQUAL   reduce using rule 106 (empty -> .)
    LESSTHANEQUAL   reduce using rule 106 (empty -> .)
    AND             reduce using rule 106 (empty -> .)
    OR              reduce using rule 106 (empty -> .)
    COMMA           reduce using rule 106 (empty -> .)
    RPAREN          reduce using rule 106 (empty -> .)
    SEMICOLON       reduce using rule 106 (empty -> .)
    RSQBRACKET      reduce using rule 106 (empty -> .)

    masterminos                    shift and go to state 121
    empty                          shift and go to state 123
    addQTD                         shift and go to state 125

state 80

    (102) ctechar -> CTECHAR .

    TIMES           reduce using rule 102 (ctechar -> CTECHAR .)
    DIVIDE          reduce using rule 102 (ctechar -> CTECHAR .)
    PLUS            reduce using rule 102 (ctechar -> CTECHAR .)
    MINUS           reduce using rule 102 (ctechar -> CTECHAR .)
    MORETHAN        reduce using rule 102 (ctechar -> CTECHAR .)
    LESSTHAN        reduce using rule 102 (ctechar -> CTECHAR .)
    NOTEQUAL        reduce using rule 102 (ctechar -> CTECHAR .)
    ISEQUALTO       reduce using rule 102 (ctechar -> CTECHAR .)
    MORETHANEQUAL   reduce using rule 102 (ctechar -> CTECHAR .)
    LESSTHANEQUAL   reduce using rule 102 (ctechar -> CTECHAR .)
    AND             reduce using rule 102 (ctechar -> CTECHAR .)
    OR              reduce using rule 102 (ctechar -> CTECHAR .)
    COMMA           reduce using rule 102 (ctechar -> CTECHAR .)
    RPAREN          reduce using rule 102 (ctechar -> CTECHAR .)
    SEMICOLON       reduce using rule 102 (ctechar -> CTECHAR .)
    RSQBRACKET      reduce using rule 102 (ctechar -> CTECHAR .)


state 81

    (22) factor -> varcte .

    TIMES           reduce using rule 22 (factor -> varcte .)
    DIVIDE          reduce using rule 22 (factor -> varcte .)
    PLUS            reduce using rule 22 (factor -> varcte .)
    MINUS           reduce using rule 22 (factor -> varcte .)
    MORETHAN        reduce using rule 22 (factor -> varcte .)
    LESSTHAN        reduce using rule 22 (factor -> varcte .)
    NOTEQUAL        reduce using rule 22 (factor -> varcte .)
    ISEQUALTO       reduce using rule 22 (factor -> varcte .)
    MORETHANEQUAL   reduce using rule 22 (factor -> varcte .)
    LESSTHANEQUAL   reduce using rule 22 (factor -> varcte .)
    AND             reduce using rule 22 (factor -> varcte .)
    OR              reduce using rule 22 (factor -> varcte .)
    COMMA           reduce using rule 22 (factor -> varcte .)
    RPAREN          reduce using rule 22 (factor -> varcte .)
    RSQBRACKET      reduce using rule 22 (factor -> varcte .)
    SEMICOLON       reduce using rule 22 (factor -> varcte .)


state 82

    (21) factor -> leftparen . expresion rightparen
    (37) expresion -> . expcomp masexpresion
    (47) expcomp -> . exp expcompcontinuo
    (30) exp -> . termino masexp
    (42) termino -> . factor masterminos
    (21) factor -> . leftparen expresion rightparen
    (22) factor -> . varcte
    (23) factor -> . varid
    (24) factor -> . llamafunc
    (25) leftparen -> . LPAREN
    (95) varcte -> . cteint
    (96) varcte -> . ctefloat
    (97) varcte -> . ctechar
    (98) varcte -> . ctestring
    (99) varcte -> . ctebool
    (27) varid -> . ID arr
    (64) llamafunc -> . idfunc LPAREN funcargs RPAREN
    (100) cteint -> . CTEINT
    (101) ctefloat -> . CTEFLOAT
    (102) ctechar -> . CTECHAR
    (103) ctestring -> . CTESTRING
    (104) ctebool -> . TRUE
    (105) ctebool -> . FALSE
    (65) idfunc -> . ID

    LPAREN          shift and go to state 93
    ID              shift and go to state 94
    CTEINT          shift and go to state 86
    CTEFLOAT        shift and go to state 89
    CTECHAR         shift and go to state 80
    CTESTRING       shift and go to state 73
    TRUE            shift and go to state 77
    FALSE           shift and go to state 76

    idfunc                         shift and go to state 42
    exp                            shift and go to state 72
    termino                        shift and go to state 74
    varid                          shift and go to state 75
    cteint                         shift and go to state 88
    ctechar                        shift and go to state 78
    factor                         shift and go to state 79
    varcte                         shift and go to state 81
    leftparen                      shift and go to state 82
    llamafunc                      shift and go to state 84
    expcomp                        shift and go to state 85
    ctefloat                       shift and go to state 87
    ctestring                      shift and go to state 97
    expresion                      shift and go to state 126
    ctebool                        shift and go to state 92

state 83

    (12) escritura -> print LPAREN listaprint . RPAREN SEMICOLON

    RPAREN          shift and go to state 127


state 84

    (24) factor -> llamafunc .

    TIMES           reduce using rule 24 (factor -> llamafunc .)
    DIVIDE          reduce using rule 24 (factor -> llamafunc .)
    PLUS            reduce using rule 24 (factor -> llamafunc .)
    MINUS           reduce using rule 24 (factor -> llamafunc .)
    MORETHAN        reduce using rule 24 (factor -> llamafunc .)
    LESSTHAN        reduce using rule 24 (factor -> llamafunc .)
    NOTEQUAL        reduce using rule 24 (factor -> llamafunc .)
    ISEQUALTO       reduce using rule 24 (factor -> llamafunc .)
    MORETHANEQUAL   reduce using rule 24 (factor -> llamafunc .)
    LESSTHANEQUAL   reduce using rule 24 (factor -> llamafunc .)
    AND             reduce using rule 24 (factor -> llamafunc .)
    OR              reduce using rule 24 (factor -> llamafunc .)
    COMMA           reduce using rule 24 (factor -> llamafunc .)
    RPAREN          reduce using rule 24 (factor -> llamafunc .)
    RSQBRACKET      reduce using rule 24 (factor -> llamafunc .)
    SEMICOLON       reduce using rule 24 (factor -> llamafunc .)


state 85

    (37) expresion -> expcomp . masexpresion
    (40) masexpresion -> . addQPAO expresion
    (41) masexpresion -> . empty
    (38) addQPAO -> . AND
    (39) addQPAO -> . OR
    (106) empty -> .

    AND             shift and go to state 128
    OR              shift and go to state 130
    COMMA           reduce using rule 106 (empty -> .)
    RPAREN          reduce using rule 106 (empty -> .)
    SEMICOLON       reduce using rule 106 (empty -> .)
    RSQBRACKET      reduce using rule 106 (empty -> .)

    empty                          shift and go to state 131
    addQPAO                        shift and go to state 129
    masexpresion                   shift and go to state 132

state 86

    (100) cteint -> CTEINT .

    TIMES           reduce using rule 100 (cteint -> CTEINT .)
    DIVIDE          reduce using rule 100 (cteint -> CTEINT .)
    PLUS            reduce using rule 100 (cteint -> CTEINT .)
    MINUS           reduce using rule 100 (cteint -> CTEINT .)
    MORETHAN        reduce using rule 100 (cteint -> CTEINT .)
    LESSTHAN        reduce using rule 100 (cteint -> CTEINT .)
    NOTEQUAL        reduce using rule 100 (cteint -> CTEINT .)
    ISEQUALTO       reduce using rule 100 (cteint -> CTEINT .)
    MORETHANEQUAL   reduce using rule 100 (cteint -> CTEINT .)
    LESSTHANEQUAL   reduce using rule 100 (cteint -> CTEINT .)
    AND             reduce using rule 100 (cteint -> CTEINT .)
    OR              reduce using rule 100 (cteint -> CTEINT .)
    SEMICOLON       reduce using rule 100 (cteint -> CTEINT .)
    COMMA           reduce using rule 100 (cteint -> CTEINT .)
    RPAREN          reduce using rule 100 (cteint -> CTEINT .)
    RSQBRACKET      reduce using rule 100 (cteint -> CTEINT .)


state 87

    (96) varcte -> ctefloat .

    TIMES           reduce using rule 96 (varcte -> ctefloat .)
    DIVIDE          reduce using rule 96 (varcte -> ctefloat .)
    PLUS            reduce using rule 96 (varcte -> ctefloat .)
    MINUS           reduce using rule 96 (varcte -> ctefloat .)
    MORETHAN        reduce using rule 96 (varcte -> ctefloat .)
    LESSTHAN        reduce using rule 96 (varcte -> ctefloat .)
    NOTEQUAL        reduce using rule 96 (varcte -> ctefloat .)
    ISEQUALTO       reduce using rule 96 (varcte -> ctefloat .)
    MORETHANEQUAL   reduce using rule 96 (varcte -> ctefloat .)
    LESSTHANEQUAL   reduce using rule 96 (varcte -> ctefloat .)
    AND             reduce using rule 96 (varcte -> ctefloat .)
    OR              reduce using rule 96 (varcte -> ctefloat .)
    COMMA           reduce using rule 96 (varcte -> ctefloat .)
    RSQBRACKET      reduce using rule 96 (varcte -> ctefloat .)
    RPAREN          reduce using rule 96 (varcte -> ctefloat .)
    SEMICOLON       reduce using rule 96 (varcte -> ctefloat .)


state 88

    (95) varcte -> cteint .

    TIMES           reduce using rule 95 (varcte -> cteint .)
    DIVIDE          reduce using rule 95 (varcte -> cteint .)
    PLUS            reduce using rule 95 (varcte -> cteint .)
    MINUS           reduce using rule 95 (varcte -> cteint .)
    MORETHAN        reduce using rule 95 (varcte -> cteint .)
    LESSTHAN        reduce using rule 95 (varcte -> cteint .)
    NOTEQUAL        reduce using rule 95 (varcte -> cteint .)
    ISEQUALTO       reduce using rule 95 (varcte -> cteint .)
    MORETHANEQUAL   reduce using rule 95 (varcte -> cteint .)
    LESSTHANEQUAL   reduce using rule 95 (varcte -> cteint .)
    AND             reduce using rule 95 (varcte -> cteint .)
    OR              reduce using rule 95 (varcte -> cteint .)
    COMMA           reduce using rule 95 (varcte -> cteint .)
    RSQBRACKET      reduce using rule 95 (varcte -> cteint .)
    RPAREN          reduce using rule 95 (varcte -> cteint .)
    SEMICOLON       reduce using rule 95 (varcte -> cteint .)


state 89

    (101) ctefloat -> CTEFLOAT .

    TIMES           reduce using rule 101 (ctefloat -> CTEFLOAT .)
    DIVIDE          reduce using rule 101 (ctefloat -> CTEFLOAT .)
    PLUS            reduce using rule 101 (ctefloat -> CTEFLOAT .)
    MINUS           reduce using rule 101 (ctefloat -> CTEFLOAT .)
    MORETHAN        reduce using rule 101 (ctefloat -> CTEFLOAT .)
    LESSTHAN        reduce using rule 101 (ctefloat -> CTEFLOAT .)
    NOTEQUAL        reduce using rule 101 (ctefloat -> CTEFLOAT .)
    ISEQUALTO       reduce using rule 101 (ctefloat -> CTEFLOAT .)
    MORETHANEQUAL   reduce using rule 101 (ctefloat -> CTEFLOAT .)
    LESSTHANEQUAL   reduce using rule 101 (ctefloat -> CTEFLOAT .)
    AND             reduce using rule 101 (ctefloat -> CTEFLOAT .)
    OR              reduce using rule 101 (ctefloat -> CTEFLOAT .)
    SEMICOLON       reduce using rule 101 (ctefloat -> CTEFLOAT .)
    COMMA           reduce using rule 101 (ctefloat -> CTEFLOAT .)
    RPAREN          reduce using rule 101 (ctefloat -> CTEFLOAT .)
    RSQBRACKET      reduce using rule 101 (ctefloat -> CTEFLOAT .)


state 90

    (15) listaprint -> ctestring . masprint
    (98) varcte -> ctestring .
    (16) masprint -> . addQPP listaprint
    (17) masprint -> . empty
    (18) addQPP -> . COMMA
    (106) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for RPAREN resolved using rule 98 (varcte -> ctestring .)
    TIMES           reduce using rule 98 (varcte -> ctestring .)
    DIVIDE          reduce using rule 98 (varcte -> ctestring .)
    PLUS            reduce using rule 98 (varcte -> ctestring .)
    MINUS           reduce using rule 98 (varcte -> ctestring .)
    MORETHAN        reduce using rule 98 (varcte -> ctestring .)
    LESSTHAN        reduce using rule 98 (varcte -> ctestring .)
    NOTEQUAL        reduce using rule 98 (varcte -> ctestring .)
    ISEQUALTO       reduce using rule 98 (varcte -> ctestring .)
    MORETHANEQUAL   reduce using rule 98 (varcte -> ctestring .)
    LESSTHANEQUAL   reduce using rule 98 (varcte -> ctestring .)
    AND             reduce using rule 98 (varcte -> ctestring .)
    OR              reduce using rule 98 (varcte -> ctestring .)
    RPAREN          reduce using rule 98 (varcte -> ctestring .)
    COMMA           shift and go to state 134

  ! COMMA           [ reduce using rule 98 (varcte -> ctestring .) ]
  ! RPAREN          [ reduce using rule 106 (empty -> .) ]

    addQPP                         shift and go to state 135
    empty                          shift and go to state 136
    masprint                       shift and go to state 133

state 91

    (14) listaprint -> expresion . masprint
    (16) masprint -> . addQPP listaprint
    (17) masprint -> . empty
    (18) addQPP -> . COMMA
    (106) empty -> .

    COMMA           shift and go to state 134
    RPAREN          reduce using rule 106 (empty -> .)

    addQPP                         shift and go to state 135
    empty                          shift and go to state 136
    masprint                       shift and go to state 137

state 92

    (99) varcte -> ctebool .

    TIMES           reduce using rule 99 (varcte -> ctebool .)
    DIVIDE          reduce using rule 99 (varcte -> ctebool .)
    PLUS            reduce using rule 99 (varcte -> ctebool .)
    MINUS           reduce using rule 99 (varcte -> ctebool .)
    MORETHAN        reduce using rule 99 (varcte -> ctebool .)
    LESSTHAN        reduce using rule 99 (varcte -> ctebool .)
    NOTEQUAL        reduce using rule 99 (varcte -> ctebool .)
    ISEQUALTO       reduce using rule 99 (varcte -> ctebool .)
    MORETHANEQUAL   reduce using rule 99 (varcte -> ctebool .)
    LESSTHANEQUAL   reduce using rule 99 (varcte -> ctebool .)
    AND             reduce using rule 99 (varcte -> ctebool .)
    OR              reduce using rule 99 (varcte -> ctebool .)
    COMMA           reduce using rule 99 (varcte -> ctebool .)
    RSQBRACKET      reduce using rule 99 (varcte -> ctebool .)
    RPAREN          reduce using rule 99 (varcte -> ctebool .)
    SEMICOLON       reduce using rule 99 (varcte -> ctebool .)


state 93

    (25) leftparen -> LPAREN .

    LPAREN          reduce using rule 25 (leftparen -> LPAREN .)
    ID              reduce using rule 25 (leftparen -> LPAREN .)
    CTEINT          reduce using rule 25 (leftparen -> LPAREN .)
    CTEFLOAT        reduce using rule 25 (leftparen -> LPAREN .)
    CTECHAR         reduce using rule 25 (leftparen -> LPAREN .)
    CTESTRING       reduce using rule 25 (leftparen -> LPAREN .)
    TRUE            reduce using rule 25 (leftparen -> LPAREN .)
    FALSE           reduce using rule 25 (leftparen -> LPAREN .)


state 94

    (27) varid -> ID . arr
    (65) idfunc -> ID .
    (28) arr -> . LSQBRACKET RSQBRACKET
    (29) arr -> . empty
    (106) empty -> .

    LPAREN          reduce using rule 65 (idfunc -> ID .)
    LSQBRACKET      shift and go to state 140
    TIMES           reduce using rule 106 (empty -> .)
    DIVIDE          reduce using rule 106 (empty -> .)
    PLUS            reduce using rule 106 (empty -> .)
    MINUS           reduce using rule 106 (empty -> .)
    MORETHAN        reduce using rule 106 (empty -> .)
    LESSTHAN        reduce using rule 106 (empty -> .)
    NOTEQUAL        reduce using rule 106 (empty -> .)
    ISEQUALTO       reduce using rule 106 (empty -> .)
    MORETHANEQUAL   reduce using rule 106 (empty -> .)
    LESSTHANEQUAL   reduce using rule 106 (empty -> .)
    AND             reduce using rule 106 (empty -> .)
    OR              reduce using rule 106 (empty -> .)
    COMMA           reduce using rule 106 (empty -> .)
    RPAREN          reduce using rule 106 (empty -> .)
    SEMICOLON       reduce using rule 106 (empty -> .)
    RSQBRACKET      reduce using rule 106 (empty -> .)

    arr                            shift and go to state 138
    empty                          shift and go to state 139

state 95

    (64) llamafunc -> idfunc LPAREN funcargs . RPAREN

    RPAREN          shift and go to state 141


state 96

    (67) funcargs -> empty .

    RPAREN          reduce using rule 67 (funcargs -> empty .)


state 97

    (98) varcte -> ctestring .

    TIMES           reduce using rule 98 (varcte -> ctestring .)
    DIVIDE          reduce using rule 98 (varcte -> ctestring .)
    PLUS            reduce using rule 98 (varcte -> ctestring .)
    MINUS           reduce using rule 98 (varcte -> ctestring .)
    MORETHAN        reduce using rule 98 (varcte -> ctestring .)
    LESSTHAN        reduce using rule 98 (varcte -> ctestring .)
    NOTEQUAL        reduce using rule 98 (varcte -> ctestring .)
    ISEQUALTO       reduce using rule 98 (varcte -> ctestring .)
    MORETHANEQUAL   reduce using rule 98 (varcte -> ctestring .)
    LESSTHANEQUAL   reduce using rule 98 (varcte -> ctestring .)
    AND             reduce using rule 98 (varcte -> ctestring .)
    OR              reduce using rule 98 (varcte -> ctestring .)
    COMMA           reduce using rule 98 (varcte -> ctestring .)
    RSQBRACKET      reduce using rule 98 (varcte -> ctestring .)
    RPAREN          reduce using rule 98 (varcte -> ctestring .)
    SEMICOLON       reduce using rule 98 (varcte -> ctestring .)


state 98

    (66) funcargs -> expresion . listafuncargs checarparams
    (68) listafuncargs -> . COMMA expresion listafuncargs
    (69) listafuncargs -> . empty
    (106) empty -> .

    COMMA           shift and go to state 144
    RPAREN          reduce using rule 106 (empty -> .)

    empty                          shift and go to state 142
    listafuncargs                  shift and go to state 143

state 99

    (4) condicion -> IF LPAREN expresion . RPAREN gotoF bloque masbloque

    RPAREN          shift and go to state 145


state 100

    (10) ciclo -> while LPAREN expresion . RPAREN gotoF bloque goto

    RPAREN          shift and go to state 146


state 101

    (19) asignacion -> ID EQUALS expresion . SEMICOLON

    SEMICOLON       shift and go to state 147


state 102

    (20) asignacion -> ID LSQBRACKET RSQBRACKET . EQUALS LSQBRACKET expresion comaexpresion RSQBRACKET SEMICOLON

    EQUALS          shift and go to state 148


state 103

    (79) funcs -> FUNCTION funcaux LPAREN RPAREN bloquefunc funcs .

    MAIN            reduce using rule 79 (funcs -> FUNCTION funcaux LPAREN RPAREN bloquefunc funcs .)


state 104

    (81) bloquefunc -> LBRACKET masestatuto . retorno RBRACKET
    (82) retorno -> . RETURN expresion SEMICOLON
    (83) retorno -> . RETURN SEMICOLON

    RETURN          shift and go to state 150

    retorno                        shift and go to state 149

state 105

    (87) masargs -> COMMA args . masargs
    (87) masargs -> . COMMA args masargs
    (88) masargs -> . empty
    (106) empty -> .

    COMMA           shift and go to state 69
    RPAREN          reduce using rule 106 (empty -> .)

    masargs                        shift and go to state 151
    empty                          shift and go to state 70

state 106

    (78) funcs -> FUNCTION funcaux LPAREN args masargs RPAREN . bloquefunc funcs
    (81) bloquefunc -> . LBRACKET masestatuto retorno RBRACKET

    LBRACKET        shift and go to state 68

    bloquefunc                     shift and go to state 152

state 107

    (53) addQPComp -> LESSTHANEQUAL .

    LPAREN          reduce using rule 53 (addQPComp -> LESSTHANEQUAL .)
    ID              reduce using rule 53 (addQPComp -> LESSTHANEQUAL .)
    CTEINT          reduce using rule 53 (addQPComp -> LESSTHANEQUAL .)
    CTEFLOAT        reduce using rule 53 (addQPComp -> LESSTHANEQUAL .)
    CTECHAR         reduce using rule 53 (addQPComp -> LESSTHANEQUAL .)
    CTESTRING       reduce using rule 53 (addQPComp -> LESSTHANEQUAL .)
    TRUE            reduce using rule 53 (addQPComp -> LESSTHANEQUAL .)
    FALSE           reduce using rule 53 (addQPComp -> LESSTHANEQUAL .)


state 108

    (54) expcompcontinuo -> addQPComp . expcomp
    (47) expcomp -> . exp expcompcontinuo
    (30) exp -> . termino masexp
    (42) termino -> . factor masterminos
    (21) factor -> . leftparen expresion rightparen
    (22) factor -> . varcte
    (23) factor -> . varid
    (24) factor -> . llamafunc
    (25) leftparen -> . LPAREN
    (95) varcte -> . cteint
    (96) varcte -> . ctefloat
    (97) varcte -> . ctechar
    (98) varcte -> . ctestring
    (99) varcte -> . ctebool
    (27) varid -> . ID arr
    (64) llamafunc -> . idfunc LPAREN funcargs RPAREN
    (100) cteint -> . CTEINT
    (101) ctefloat -> . CTEFLOAT
    (102) ctechar -> . CTECHAR
    (103) ctestring -> . CTESTRING
    (104) ctebool -> . TRUE
    (105) ctebool -> . FALSE
    (65) idfunc -> . ID

    LPAREN          shift and go to state 93
    ID              shift and go to state 94
    CTEINT          shift and go to state 86
    CTEFLOAT        shift and go to state 89
    CTECHAR         shift and go to state 80
    CTESTRING       shift and go to state 73
    TRUE            shift and go to state 77
    FALSE           shift and go to state 76

    idfunc                         shift and go to state 42
    exp                            shift and go to state 72
    termino                        shift and go to state 74
    varid                          shift and go to state 75
    cteint                         shift and go to state 88
    factor                         shift and go to state 79
    varcte                         shift and go to state 81
    leftparen                      shift and go to state 82
    llamafunc                      shift and go to state 84
    expcomp                        shift and go to state 153
    ctechar                        shift and go to state 78
    ctefloat                       shift and go to state 87
    ctestring                      shift and go to state 97
    ctebool                        shift and go to state 92

state 109

    (52) addQPComp -> MORETHANEQUAL .

    LPAREN          reduce using rule 52 (addQPComp -> MORETHANEQUAL .)
    ID              reduce using rule 52 (addQPComp -> MORETHANEQUAL .)
    CTEINT          reduce using rule 52 (addQPComp -> MORETHANEQUAL .)
    CTEFLOAT        reduce using rule 52 (addQPComp -> MORETHANEQUAL .)
    CTECHAR         reduce using rule 52 (addQPComp -> MORETHANEQUAL .)
    CTESTRING       reduce using rule 52 (addQPComp -> MORETHANEQUAL .)
    TRUE            reduce using rule 52 (addQPComp -> MORETHANEQUAL .)
    FALSE           reduce using rule 52 (addQPComp -> MORETHANEQUAL .)


state 110

    (49) addQPComp -> LESSTHAN .

    LPAREN          reduce using rule 49 (addQPComp -> LESSTHAN .)
    ID              reduce using rule 49 (addQPComp -> LESSTHAN .)
    CTEINT          reduce using rule 49 (addQPComp -> LESSTHAN .)
    CTEFLOAT        reduce using rule 49 (addQPComp -> LESSTHAN .)
    CTECHAR         reduce using rule 49 (addQPComp -> LESSTHAN .)
    CTESTRING       reduce using rule 49 (addQPComp -> LESSTHAN .)
    TRUE            reduce using rule 49 (addQPComp -> LESSTHAN .)
    FALSE           reduce using rule 49 (addQPComp -> LESSTHAN .)


state 111

    (51) addQPComp -> ISEQUALTO .

    LPAREN          reduce using rule 51 (addQPComp -> ISEQUALTO .)
    ID              reduce using rule 51 (addQPComp -> ISEQUALTO .)
    CTEINT          reduce using rule 51 (addQPComp -> ISEQUALTO .)
    CTEFLOAT        reduce using rule 51 (addQPComp -> ISEQUALTO .)
    CTECHAR         reduce using rule 51 (addQPComp -> ISEQUALTO .)
    CTESTRING       reduce using rule 51 (addQPComp -> ISEQUALTO .)
    TRUE            reduce using rule 51 (addQPComp -> ISEQUALTO .)
    FALSE           reduce using rule 51 (addQPComp -> ISEQUALTO .)


state 112

    (50) addQPComp -> NOTEQUAL .

    LPAREN          reduce using rule 50 (addQPComp -> NOTEQUAL .)
    ID              reduce using rule 50 (addQPComp -> NOTEQUAL .)
    CTEINT          reduce using rule 50 (addQPComp -> NOTEQUAL .)
    CTEFLOAT        reduce using rule 50 (addQPComp -> NOTEQUAL .)
    CTECHAR         reduce using rule 50 (addQPComp -> NOTEQUAL .)
    CTESTRING       reduce using rule 50 (addQPComp -> NOTEQUAL .)
    TRUE            reduce using rule 50 (addQPComp -> NOTEQUAL .)
    FALSE           reduce using rule 50 (addQPComp -> NOTEQUAL .)


state 113

    (55) expcompcontinuo -> empty .

    AND             reduce using rule 55 (expcompcontinuo -> empty .)
    OR              reduce using rule 55 (expcompcontinuo -> empty .)
    COMMA           reduce using rule 55 (expcompcontinuo -> empty .)
    RPAREN          reduce using rule 55 (expcompcontinuo -> empty .)
    SEMICOLON       reduce using rule 55 (expcompcontinuo -> empty .)
    RSQBRACKET      reduce using rule 55 (expcompcontinuo -> empty .)


state 114

    (48) addQPComp -> MORETHAN .

    LPAREN          reduce using rule 48 (addQPComp -> MORETHAN .)
    ID              reduce using rule 48 (addQPComp -> MORETHAN .)
    CTEINT          reduce using rule 48 (addQPComp -> MORETHAN .)
    CTEFLOAT        reduce using rule 48 (addQPComp -> MORETHAN .)
    CTECHAR         reduce using rule 48 (addQPComp -> MORETHAN .)
    CTESTRING       reduce using rule 48 (addQPComp -> MORETHAN .)
    TRUE            reduce using rule 48 (addQPComp -> MORETHAN .)
    FALSE           reduce using rule 48 (addQPComp -> MORETHAN .)


state 115

    (47) expcomp -> exp expcompcontinuo .

    AND             reduce using rule 47 (expcomp -> exp expcompcontinuo .)
    OR              reduce using rule 47 (expcomp -> exp expcompcontinuo .)
    SEMICOLON       reduce using rule 47 (expcomp -> exp expcompcontinuo .)
    COMMA           reduce using rule 47 (expcomp -> exp expcompcontinuo .)
    RPAREN          reduce using rule 47 (expcomp -> exp expcompcontinuo .)
    RSQBRACKET      reduce using rule 47 (expcomp -> exp expcompcontinuo .)


state 116

    (31) masexp -> addQPPM . exp
    (30) exp -> . termino masexp
    (42) termino -> . factor masterminos
    (21) factor -> . leftparen expresion rightparen
    (22) factor -> . varcte
    (23) factor -> . varid
    (24) factor -> . llamafunc
    (25) leftparen -> . LPAREN
    (95) varcte -> . cteint
    (96) varcte -> . ctefloat
    (97) varcte -> . ctechar
    (98) varcte -> . ctestring
    (99) varcte -> . ctebool
    (27) varid -> . ID arr
    (64) llamafunc -> . idfunc LPAREN funcargs RPAREN
    (100) cteint -> . CTEINT
    (101) ctefloat -> . CTEFLOAT
    (102) ctechar -> . CTECHAR
    (103) ctestring -> . CTESTRING
    (104) ctebool -> . TRUE
    (105) ctebool -> . FALSE
    (65) idfunc -> . ID

    LPAREN          shift and go to state 93
    ID              shift and go to state 94
    CTEINT          shift and go to state 86
    CTEFLOAT        shift and go to state 89
    CTECHAR         shift and go to state 80
    CTESTRING       shift and go to state 73
    TRUE            shift and go to state 77
    FALSE           shift and go to state 76

    exp                            shift and go to state 154
    termino                        shift and go to state 74
    llamafunc                      shift and go to state 84
    varid                          shift and go to state 75
    cteint                         shift and go to state 88
    idfunc                         shift and go to state 42
    ctechar                        shift and go to state 78
    ctefloat                       shift and go to state 87
    factor                         shift and go to state 79
    ctestring                      shift and go to state 97
    ctebool                        shift and go to state 92
    varcte                         shift and go to state 81
    leftparen                      shift and go to state 82

state 117

    (33) addQPPM -> PLUS .

    LPAREN          reduce using rule 33 (addQPPM -> PLUS .)
    ID              reduce using rule 33 (addQPPM -> PLUS .)
    CTEINT          reduce using rule 33 (addQPPM -> PLUS .)
    CTEFLOAT        reduce using rule 33 (addQPPM -> PLUS .)
    CTECHAR         reduce using rule 33 (addQPPM -> PLUS .)
    CTESTRING       reduce using rule 33 (addQPPM -> PLUS .)
    TRUE            reduce using rule 33 (addQPPM -> PLUS .)
    FALSE           reduce using rule 33 (addQPPM -> PLUS .)


state 118

    (30) exp -> termino masexp .

    MORETHAN        reduce using rule 30 (exp -> termino masexp .)
    LESSTHAN        reduce using rule 30 (exp -> termino masexp .)
    NOTEQUAL        reduce using rule 30 (exp -> termino masexp .)
    ISEQUALTO       reduce using rule 30 (exp -> termino masexp .)
    MORETHANEQUAL   reduce using rule 30 (exp -> termino masexp .)
    LESSTHANEQUAL   reduce using rule 30 (exp -> termino masexp .)
    AND             reduce using rule 30 (exp -> termino masexp .)
    OR              reduce using rule 30 (exp -> termino masexp .)
    RPAREN          reduce using rule 30 (exp -> termino masexp .)
    COMMA           reduce using rule 30 (exp -> termino masexp .)
    SEMICOLON       reduce using rule 30 (exp -> termino masexp .)
    RSQBRACKET      reduce using rule 30 (exp -> termino masexp .)


state 119

    (32) masexp -> empty .

    MORETHAN        reduce using rule 32 (masexp -> empty .)
    LESSTHAN        reduce using rule 32 (masexp -> empty .)
    NOTEQUAL        reduce using rule 32 (masexp -> empty .)
    ISEQUALTO       reduce using rule 32 (masexp -> empty .)
    MORETHANEQUAL   reduce using rule 32 (masexp -> empty .)
    LESSTHANEQUAL   reduce using rule 32 (masexp -> empty .)
    AND             reduce using rule 32 (masexp -> empty .)
    OR              reduce using rule 32 (masexp -> empty .)
    COMMA           reduce using rule 32 (masexp -> empty .)
    RPAREN          reduce using rule 32 (masexp -> empty .)
    SEMICOLON       reduce using rule 32 (masexp -> empty .)
    RSQBRACKET      reduce using rule 32 (masexp -> empty .)


state 120

    (34) addQPPM -> MINUS .

    LPAREN          reduce using rule 34 (addQPPM -> MINUS .)
    ID              reduce using rule 34 (addQPPM -> MINUS .)
    CTEINT          reduce using rule 34 (addQPPM -> MINUS .)
    CTEFLOAT        reduce using rule 34 (addQPPM -> MINUS .)
    CTECHAR         reduce using rule 34 (addQPPM -> MINUS .)
    CTESTRING       reduce using rule 34 (addQPPM -> MINUS .)
    TRUE            reduce using rule 34 (addQPPM -> MINUS .)
    FALSE           reduce using rule 34 (addQPPM -> MINUS .)


state 121

    (42) termino -> factor masterminos .

    PLUS            reduce using rule 42 (termino -> factor masterminos .)
    MINUS           reduce using rule 42 (termino -> factor masterminos .)
    MORETHAN        reduce using rule 42 (termino -> factor masterminos .)
    LESSTHAN        reduce using rule 42 (termino -> factor masterminos .)
    NOTEQUAL        reduce using rule 42 (termino -> factor masterminos .)
    ISEQUALTO       reduce using rule 42 (termino -> factor masterminos .)
    MORETHANEQUAL   reduce using rule 42 (termino -> factor masterminos .)
    LESSTHANEQUAL   reduce using rule 42 (termino -> factor masterminos .)
    AND             reduce using rule 42 (termino -> factor masterminos .)
    OR              reduce using rule 42 (termino -> factor masterminos .)
    RPAREN          reduce using rule 42 (termino -> factor masterminos .)
    COMMA           reduce using rule 42 (termino -> factor masterminos .)
    SEMICOLON       reduce using rule 42 (termino -> factor masterminos .)
    RSQBRACKET      reduce using rule 42 (termino -> factor masterminos .)


state 122

    (44) addQTD -> DIVIDE .

    LPAREN          reduce using rule 44 (addQTD -> DIVIDE .)
    ID              reduce using rule 44 (addQTD -> DIVIDE .)
    CTEINT          reduce using rule 44 (addQTD -> DIVIDE .)
    CTEFLOAT        reduce using rule 44 (addQTD -> DIVIDE .)
    CTECHAR         reduce using rule 44 (addQTD -> DIVIDE .)
    CTESTRING       reduce using rule 44 (addQTD -> DIVIDE .)
    TRUE            reduce using rule 44 (addQTD -> DIVIDE .)
    FALSE           reduce using rule 44 (addQTD -> DIVIDE .)


state 123

    (46) masterminos -> empty .

    PLUS            reduce using rule 46 (masterminos -> empty .)
    MINUS           reduce using rule 46 (masterminos -> empty .)
    MORETHAN        reduce using rule 46 (masterminos -> empty .)
    LESSTHAN        reduce using rule 46 (masterminos -> empty .)
    NOTEQUAL        reduce using rule 46 (masterminos -> empty .)
    ISEQUALTO       reduce using rule 46 (masterminos -> empty .)
    MORETHANEQUAL   reduce using rule 46 (masterminos -> empty .)
    LESSTHANEQUAL   reduce using rule 46 (masterminos -> empty .)
    AND             reduce using rule 46 (masterminos -> empty .)
    OR              reduce using rule 46 (masterminos -> empty .)
    COMMA           reduce using rule 46 (masterminos -> empty .)
    RPAREN          reduce using rule 46 (masterminos -> empty .)
    SEMICOLON       reduce using rule 46 (masterminos -> empty .)
    RSQBRACKET      reduce using rule 46 (masterminos -> empty .)


state 124

    (43) addQTD -> TIMES .

    LPAREN          reduce using rule 43 (addQTD -> TIMES .)
    ID              reduce using rule 43 (addQTD -> TIMES .)
    CTEINT          reduce using rule 43 (addQTD -> TIMES .)
    CTEFLOAT        reduce using rule 43 (addQTD -> TIMES .)
    CTECHAR         reduce using rule 43 (addQTD -> TIMES .)
    CTESTRING       reduce using rule 43 (addQTD -> TIMES .)
    TRUE            reduce using rule 43 (addQTD -> TIMES .)
    FALSE           reduce using rule 43 (addQTD -> TIMES .)


state 125

    (45) masterminos -> addQTD . termino
    (42) termino -> . factor masterminos
    (21) factor -> . leftparen expresion rightparen
    (22) factor -> . varcte
    (23) factor -> . varid
    (24) factor -> . llamafunc
    (25) leftparen -> . LPAREN
    (95) varcte -> . cteint
    (96) varcte -> . ctefloat
    (97) varcte -> . ctechar
    (98) varcte -> . ctestring
    (99) varcte -> . ctebool
    (27) varid -> . ID arr
    (64) llamafunc -> . idfunc LPAREN funcargs RPAREN
    (100) cteint -> . CTEINT
    (101) ctefloat -> . CTEFLOAT
    (102) ctechar -> . CTECHAR
    (103) ctestring -> . CTESTRING
    (104) ctebool -> . TRUE
    (105) ctebool -> . FALSE
    (65) idfunc -> . ID

    LPAREN          shift and go to state 93
    ID              shift and go to state 94
    CTEINT          shift and go to state 86
    CTEFLOAT        shift and go to state 89
    CTECHAR         shift and go to state 80
    CTESTRING       shift and go to state 73
    TRUE            shift and go to state 77
    FALSE           shift and go to state 76

    idfunc                         shift and go to state 42
    termino                        shift and go to state 155
    llamafunc                      shift and go to state 84
    varid                          shift and go to state 75
    cteint                         shift and go to state 88
    ctechar                        shift and go to state 78
    ctefloat                       shift and go to state 87
    factor                         shift and go to state 79
    ctestring                      shift and go to state 97
    ctebool                        shift and go to state 92
    varcte                         shift and go to state 81
    leftparen                      shift and go to state 82

state 126

    (21) factor -> leftparen expresion . rightparen
    (26) rightparen -> . RPAREN

    RPAREN          shift and go to state 156

    rightparen                     shift and go to state 157

state 127

    (12) escritura -> print LPAREN listaprint RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 158


state 128

    (38) addQPAO -> AND .

    LPAREN          reduce using rule 38 (addQPAO -> AND .)
    ID              reduce using rule 38 (addQPAO -> AND .)
    CTEINT          reduce using rule 38 (addQPAO -> AND .)
    CTEFLOAT        reduce using rule 38 (addQPAO -> AND .)
    CTECHAR         reduce using rule 38 (addQPAO -> AND .)
    CTESTRING       reduce using rule 38 (addQPAO -> AND .)
    TRUE            reduce using rule 38 (addQPAO -> AND .)
    FALSE           reduce using rule 38 (addQPAO -> AND .)


state 129

    (40) masexpresion -> addQPAO . expresion
    (37) expresion -> . expcomp masexpresion
    (47) expcomp -> . exp expcompcontinuo
    (30) exp -> . termino masexp
    (42) termino -> . factor masterminos
    (21) factor -> . leftparen expresion rightparen
    (22) factor -> . varcte
    (23) factor -> . varid
    (24) factor -> . llamafunc
    (25) leftparen -> . LPAREN
    (95) varcte -> . cteint
    (96) varcte -> . ctefloat
    (97) varcte -> . ctechar
    (98) varcte -> . ctestring
    (99) varcte -> . ctebool
    (27) varid -> . ID arr
    (64) llamafunc -> . idfunc LPAREN funcargs RPAREN
    (100) cteint -> . CTEINT
    (101) ctefloat -> . CTEFLOAT
    (102) ctechar -> . CTECHAR
    (103) ctestring -> . CTESTRING
    (104) ctebool -> . TRUE
    (105) ctebool -> . FALSE
    (65) idfunc -> . ID

    LPAREN          shift and go to state 93
    ID              shift and go to state 94
    CTEINT          shift and go to state 86
    CTEFLOAT        shift and go to state 89
    CTECHAR         shift and go to state 80
    CTESTRING       shift and go to state 73
    TRUE            shift and go to state 77
    FALSE           shift and go to state 76

    idfunc                         shift and go to state 42
    exp                            shift and go to state 72
    termino                        shift and go to state 74
    varid                          shift and go to state 75
    cteint                         shift and go to state 88
    ctechar                        shift and go to state 78
    factor                         shift and go to state 79
    varcte                         shift and go to state 81
    leftparen                      shift and go to state 82
    llamafunc                      shift and go to state 84
    expcomp                        shift and go to state 85
    ctefloat                       shift and go to state 87
    ctestring                      shift and go to state 97
    expresion                      shift and go to state 159
    ctebool                        shift and go to state 92

state 130

    (39) addQPAO -> OR .

    LPAREN          reduce using rule 39 (addQPAO -> OR .)
    ID              reduce using rule 39 (addQPAO -> OR .)
    CTEINT          reduce using rule 39 (addQPAO -> OR .)
    CTEFLOAT        reduce using rule 39 (addQPAO -> OR .)
    CTECHAR         reduce using rule 39 (addQPAO -> OR .)
    CTESTRING       reduce using rule 39 (addQPAO -> OR .)
    TRUE            reduce using rule 39 (addQPAO -> OR .)
    FALSE           reduce using rule 39 (addQPAO -> OR .)


state 131

    (41) masexpresion -> empty .

    COMMA           reduce using rule 41 (masexpresion -> empty .)
    RPAREN          reduce using rule 41 (masexpresion -> empty .)
    SEMICOLON       reduce using rule 41 (masexpresion -> empty .)
    RSQBRACKET      reduce using rule 41 (masexpresion -> empty .)


state 132

    (37) expresion -> expcomp masexpresion .

    RPAREN          reduce using rule 37 (expresion -> expcomp masexpresion .)
    COMMA           reduce using rule 37 (expresion -> expcomp masexpresion .)
    RSQBRACKET      reduce using rule 37 (expresion -> expcomp masexpresion .)
    SEMICOLON       reduce using rule 37 (expresion -> expcomp masexpresion .)


state 133

    (15) listaprint -> ctestring masprint .

    RPAREN          reduce using rule 15 (listaprint -> ctestring masprint .)


state 134

    (18) addQPP -> COMMA .

    CTESTRING       reduce using rule 18 (addQPP -> COMMA .)
    LPAREN          reduce using rule 18 (addQPP -> COMMA .)
    ID              reduce using rule 18 (addQPP -> COMMA .)
    CTEINT          reduce using rule 18 (addQPP -> COMMA .)
    CTEFLOAT        reduce using rule 18 (addQPP -> COMMA .)
    CTECHAR         reduce using rule 18 (addQPP -> COMMA .)
    TRUE            reduce using rule 18 (addQPP -> COMMA .)
    FALSE           reduce using rule 18 (addQPP -> COMMA .)


state 135

    (16) masprint -> addQPP . listaprint
    (14) listaprint -> . expresion masprint
    (15) listaprint -> . ctestring masprint
    (37) expresion -> . expcomp masexpresion
    (103) ctestring -> . CTESTRING
    (47) expcomp -> . exp expcompcontinuo
    (30) exp -> . termino masexp
    (42) termino -> . factor masterminos
    (21) factor -> . leftparen expresion rightparen
    (22) factor -> . varcte
    (23) factor -> . varid
    (24) factor -> . llamafunc
    (25) leftparen -> . LPAREN
    (95) varcte -> . cteint
    (96) varcte -> . ctefloat
    (97) varcte -> . ctechar
    (98) varcte -> . ctestring
    (99) varcte -> . ctebool
    (27) varid -> . ID arr
    (64) llamafunc -> . idfunc LPAREN funcargs RPAREN
    (100) cteint -> . CTEINT
    (101) ctefloat -> . CTEFLOAT
    (102) ctechar -> . CTECHAR
    (104) ctebool -> . TRUE
    (105) ctebool -> . FALSE
    (65) idfunc -> . ID

    CTESTRING       shift and go to state 73
    LPAREN          shift and go to state 93
    ID              shift and go to state 94
    CTEINT          shift and go to state 86
    CTEFLOAT        shift and go to state 89
    CTECHAR         shift and go to state 80
    TRUE            shift and go to state 77
    FALSE           shift and go to state 76

    idfunc                         shift and go to state 42
    exp                            shift and go to state 72
    termino                        shift and go to state 74
    varid                          shift and go to state 75
    cteint                         shift and go to state 88
    ctechar                        shift and go to state 78
    factor                         shift and go to state 79
    varcte                         shift and go to state 81
    leftparen                      shift and go to state 82
    listaprint                     shift and go to state 160
    llamafunc                      shift and go to state 84
    expcomp                        shift and go to state 85
    ctefloat                       shift and go to state 87
    ctestring                      shift and go to state 90
    expresion                      shift and go to state 91
    ctebool                        shift and go to state 92

state 136

    (17) masprint -> empty .

    RPAREN          reduce using rule 17 (masprint -> empty .)


state 137

    (14) listaprint -> expresion masprint .

    RPAREN          reduce using rule 14 (listaprint -> expresion masprint .)


state 138

    (27) varid -> ID arr .

    TIMES           reduce using rule 27 (varid -> ID arr .)
    DIVIDE          reduce using rule 27 (varid -> ID arr .)
    PLUS            reduce using rule 27 (varid -> ID arr .)
    MINUS           reduce using rule 27 (varid -> ID arr .)
    MORETHAN        reduce using rule 27 (varid -> ID arr .)
    LESSTHAN        reduce using rule 27 (varid -> ID arr .)
    NOTEQUAL        reduce using rule 27 (varid -> ID arr .)
    ISEQUALTO       reduce using rule 27 (varid -> ID arr .)
    MORETHANEQUAL   reduce using rule 27 (varid -> ID arr .)
    LESSTHANEQUAL   reduce using rule 27 (varid -> ID arr .)
    AND             reduce using rule 27 (varid -> ID arr .)
    OR              reduce using rule 27 (varid -> ID arr .)
    COMMA           reduce using rule 27 (varid -> ID arr .)
    RPAREN          reduce using rule 27 (varid -> ID arr .)
    SEMICOLON       reduce using rule 27 (varid -> ID arr .)
    RSQBRACKET      reduce using rule 27 (varid -> ID arr .)


state 139

    (29) arr -> empty .

    TIMES           reduce using rule 29 (arr -> empty .)
    DIVIDE          reduce using rule 29 (arr -> empty .)
    PLUS            reduce using rule 29 (arr -> empty .)
    MINUS           reduce using rule 29 (arr -> empty .)
    MORETHAN        reduce using rule 29 (arr -> empty .)
    LESSTHAN        reduce using rule 29 (arr -> empty .)
    NOTEQUAL        reduce using rule 29 (arr -> empty .)
    ISEQUALTO       reduce using rule 29 (arr -> empty .)
    MORETHANEQUAL   reduce using rule 29 (arr -> empty .)
    LESSTHANEQUAL   reduce using rule 29 (arr -> empty .)
    AND             reduce using rule 29 (arr -> empty .)
    OR              reduce using rule 29 (arr -> empty .)
    COMMA           reduce using rule 29 (arr -> empty .)
    RPAREN          reduce using rule 29 (arr -> empty .)
    SEMICOLON       reduce using rule 29 (arr -> empty .)
    RSQBRACKET      reduce using rule 29 (arr -> empty .)


state 140

    (28) arr -> LSQBRACKET . RSQBRACKET

    RSQBRACKET      shift and go to state 161


state 141

    (64) llamafunc -> idfunc LPAREN funcargs RPAREN .

    TIMES           reduce using rule 64 (llamafunc -> idfunc LPAREN funcargs RPAREN .)
    DIVIDE          reduce using rule 64 (llamafunc -> idfunc LPAREN funcargs RPAREN .)
    PLUS            reduce using rule 64 (llamafunc -> idfunc LPAREN funcargs RPAREN .)
    MINUS           reduce using rule 64 (llamafunc -> idfunc LPAREN funcargs RPAREN .)
    MORETHAN        reduce using rule 64 (llamafunc -> idfunc LPAREN funcargs RPAREN .)
    LESSTHAN        reduce using rule 64 (llamafunc -> idfunc LPAREN funcargs RPAREN .)
    NOTEQUAL        reduce using rule 64 (llamafunc -> idfunc LPAREN funcargs RPAREN .)
    ISEQUALTO       reduce using rule 64 (llamafunc -> idfunc LPAREN funcargs RPAREN .)
    MORETHANEQUAL   reduce using rule 64 (llamafunc -> idfunc LPAREN funcargs RPAREN .)
    LESSTHANEQUAL   reduce using rule 64 (llamafunc -> idfunc LPAREN funcargs RPAREN .)
    AND             reduce using rule 64 (llamafunc -> idfunc LPAREN funcargs RPAREN .)
    OR              reduce using rule 64 (llamafunc -> idfunc LPAREN funcargs RPAREN .)
    COMMA           reduce using rule 64 (llamafunc -> idfunc LPAREN funcargs RPAREN .)
    RPAREN          reduce using rule 64 (llamafunc -> idfunc LPAREN funcargs RPAREN .)
    SEMICOLON       reduce using rule 64 (llamafunc -> idfunc LPAREN funcargs RPAREN .)
    RSQBRACKET      reduce using rule 64 (llamafunc -> idfunc LPAREN funcargs RPAREN .)


state 142

    (69) listafuncargs -> empty .

    RPAREN          reduce using rule 69 (listafuncargs -> empty .)


state 143

    (66) funcargs -> expresion listafuncargs . checarparams
    (70) checarparams -> . empty
    (106) empty -> .

    RPAREN          reduce using rule 106 (empty -> .)

    checarparams                   shift and go to state 162
    empty                          shift and go to state 163

state 144

    (68) listafuncargs -> COMMA . expresion listafuncargs
    (37) expresion -> . expcomp masexpresion
    (47) expcomp -> . exp expcompcontinuo
    (30) exp -> . termino masexp
    (42) termino -> . factor masterminos
    (21) factor -> . leftparen expresion rightparen
    (22) factor -> . varcte
    (23) factor -> . varid
    (24) factor -> . llamafunc
    (25) leftparen -> . LPAREN
    (95) varcte -> . cteint
    (96) varcte -> . ctefloat
    (97) varcte -> . ctechar
    (98) varcte -> . ctestring
    (99) varcte -> . ctebool
    (27) varid -> . ID arr
    (64) llamafunc -> . idfunc LPAREN funcargs RPAREN
    (100) cteint -> . CTEINT
    (101) ctefloat -> . CTEFLOAT
    (102) ctechar -> . CTECHAR
    (103) ctestring -> . CTESTRING
    (104) ctebool -> . TRUE
    (105) ctebool -> . FALSE
    (65) idfunc -> . ID

    LPAREN          shift and go to state 93
    ID              shift and go to state 94
    CTEINT          shift and go to state 86
    CTEFLOAT        shift and go to state 89
    CTECHAR         shift and go to state 80
    CTESTRING       shift and go to state 73
    TRUE            shift and go to state 77
    FALSE           shift and go to state 76

    idfunc                         shift and go to state 42
    exp                            shift and go to state 72
    termino                        shift and go to state 74
    varid                          shift and go to state 75
    cteint                         shift and go to state 88
    ctechar                        shift and go to state 78
    factor                         shift and go to state 79
    varcte                         shift and go to state 81
    leftparen                      shift and go to state 82
    llamafunc                      shift and go to state 84
    expcomp                        shift and go to state 85
    ctefloat                       shift and go to state 87
    ctestring                      shift and go to state 97
    expresion                      shift and go to state 164
    ctebool                        shift and go to state 92

state 145

    (4) condicion -> IF LPAREN expresion RPAREN . gotoF bloque masbloque
    (5) gotoF -> . empty
    (106) empty -> .

    LBRACKET        reduce using rule 106 (empty -> .)

    empty                          shift and go to state 165
    gotoF                          shift and go to state 166

state 146

    (10) ciclo -> while LPAREN expresion RPAREN . gotoF bloque goto
    (5) gotoF -> . empty
    (106) empty -> .

    LBRACKET        reduce using rule 106 (empty -> .)

    empty                          shift and go to state 165
    gotoF                          shift and go to state 167

state 147

    (19) asignacion -> ID EQUALS expresion SEMICOLON .

    COMMENT         reduce using rule 19 (asignacion -> ID EQUALS expresion SEMICOLON .)
    CPPCOMMENT      reduce using rule 19 (asignacion -> ID EQUALS expresion SEMICOLON .)
    ID              reduce using rule 19 (asignacion -> ID EQUALS expresion SEMICOLON .)
    IF              reduce using rule 19 (asignacion -> ID EQUALS expresion SEMICOLON .)
    VAR             reduce using rule 19 (asignacion -> ID EQUALS expresion SEMICOLON .)
    WHILE           reduce using rule 19 (asignacion -> ID EQUALS expresion SEMICOLON .)
    PRINT           reduce using rule 19 (asignacion -> ID EQUALS expresion SEMICOLON .)
    RBRACKET        reduce using rule 19 (asignacion -> ID EQUALS expresion SEMICOLON .)
    RETURN          reduce using rule 19 (asignacion -> ID EQUALS expresion SEMICOLON .)


state 148

    (20) asignacion -> ID LSQBRACKET RSQBRACKET EQUALS . LSQBRACKET expresion comaexpresion RSQBRACKET SEMICOLON

    LSQBRACKET      shift and go to state 168


state 149

    (81) bloquefunc -> LBRACKET masestatuto retorno . RBRACKET

    RBRACKET        shift and go to state 169


state 150

    (82) retorno -> RETURN . expresion SEMICOLON
    (83) retorno -> RETURN . SEMICOLON
    (37) expresion -> . expcomp masexpresion
    (47) expcomp -> . exp expcompcontinuo
    (30) exp -> . termino masexp
    (42) termino -> . factor masterminos
    (21) factor -> . leftparen expresion rightparen
    (22) factor -> . varcte
    (23) factor -> . varid
    (24) factor -> . llamafunc
    (25) leftparen -> . LPAREN
    (95) varcte -> . cteint
    (96) varcte -> . ctefloat
    (97) varcte -> . ctechar
    (98) varcte -> . ctestring
    (99) varcte -> . ctebool
    (27) varid -> . ID arr
    (64) llamafunc -> . idfunc LPAREN funcargs RPAREN
    (100) cteint -> . CTEINT
    (101) ctefloat -> . CTEFLOAT
    (102) ctechar -> . CTECHAR
    (103) ctestring -> . CTESTRING
    (104) ctebool -> . TRUE
    (105) ctebool -> . FALSE
    (65) idfunc -> . ID

    SEMICOLON       shift and go to state 170
    LPAREN          shift and go to state 93
    ID              shift and go to state 94
    CTEINT          shift and go to state 86
    CTEFLOAT        shift and go to state 89
    CTECHAR         shift and go to state 80
    CTESTRING       shift and go to state 73
    TRUE            shift and go to state 77
    FALSE           shift and go to state 76

    idfunc                         shift and go to state 42
    exp                            shift and go to state 72
    termino                        shift and go to state 74
    varid                          shift and go to state 75
    cteint                         shift and go to state 88
    ctechar                        shift and go to state 78
    factor                         shift and go to state 79
    varcte                         shift and go to state 81
    leftparen                      shift and go to state 82
    llamafunc                      shift and go to state 84
    expcomp                        shift and go to state 85
    ctefloat                       shift and go to state 87
    ctestring                      shift and go to state 97
    expresion                      shift and go to state 171
    ctebool                        shift and go to state 92

state 151

    (87) masargs -> COMMA args masargs .

    RPAREN          reduce using rule 87 (masargs -> COMMA args masargs .)


state 152

    (78) funcs -> FUNCTION funcaux LPAREN args masargs RPAREN bloquefunc . funcs
    (78) funcs -> . FUNCTION funcaux LPAREN args masargs RPAREN bloquefunc funcs
    (79) funcs -> . FUNCTION funcaux LPAREN RPAREN bloquefunc funcs
    (80) funcs -> . empty
    (106) empty -> .

    FUNCTION        shift and go to state 18
    MAIN            reduce using rule 106 (empty -> .)

    empty                          shift and go to state 17
    funcs                          shift and go to state 172

state 153

    (54) expcompcontinuo -> addQPComp expcomp .

    AND             reduce using rule 54 (expcompcontinuo -> addQPComp expcomp .)
    OR              reduce using rule 54 (expcompcontinuo -> addQPComp expcomp .)
    COMMA           reduce using rule 54 (expcompcontinuo -> addQPComp expcomp .)
    RPAREN          reduce using rule 54 (expcompcontinuo -> addQPComp expcomp .)
    SEMICOLON       reduce using rule 54 (expcompcontinuo -> addQPComp expcomp .)
    RSQBRACKET      reduce using rule 54 (expcompcontinuo -> addQPComp expcomp .)


state 154

    (31) masexp -> addQPPM exp .

    MORETHAN        reduce using rule 31 (masexp -> addQPPM exp .)
    LESSTHAN        reduce using rule 31 (masexp -> addQPPM exp .)
    NOTEQUAL        reduce using rule 31 (masexp -> addQPPM exp .)
    ISEQUALTO       reduce using rule 31 (masexp -> addQPPM exp .)
    MORETHANEQUAL   reduce using rule 31 (masexp -> addQPPM exp .)
    LESSTHANEQUAL   reduce using rule 31 (masexp -> addQPPM exp .)
    AND             reduce using rule 31 (masexp -> addQPPM exp .)
    OR              reduce using rule 31 (masexp -> addQPPM exp .)
    COMMA           reduce using rule 31 (masexp -> addQPPM exp .)
    RPAREN          reduce using rule 31 (masexp -> addQPPM exp .)
    SEMICOLON       reduce using rule 31 (masexp -> addQPPM exp .)
    RSQBRACKET      reduce using rule 31 (masexp -> addQPPM exp .)


state 155

    (45) masterminos -> addQTD termino .

    PLUS            reduce using rule 45 (masterminos -> addQTD termino .)
    MINUS           reduce using rule 45 (masterminos -> addQTD termino .)
    MORETHAN        reduce using rule 45 (masterminos -> addQTD termino .)
    LESSTHAN        reduce using rule 45 (masterminos -> addQTD termino .)
    NOTEQUAL        reduce using rule 45 (masterminos -> addQTD termino .)
    ISEQUALTO       reduce using rule 45 (masterminos -> addQTD termino .)
    MORETHANEQUAL   reduce using rule 45 (masterminos -> addQTD termino .)
    LESSTHANEQUAL   reduce using rule 45 (masterminos -> addQTD termino .)
    AND             reduce using rule 45 (masterminos -> addQTD termino .)
    OR              reduce using rule 45 (masterminos -> addQTD termino .)
    COMMA           reduce using rule 45 (masterminos -> addQTD termino .)
    RPAREN          reduce using rule 45 (masterminos -> addQTD termino .)
    SEMICOLON       reduce using rule 45 (masterminos -> addQTD termino .)
    RSQBRACKET      reduce using rule 45 (masterminos -> addQTD termino .)


state 156

    (26) rightparen -> RPAREN .

    TIMES           reduce using rule 26 (rightparen -> RPAREN .)
    DIVIDE          reduce using rule 26 (rightparen -> RPAREN .)
    PLUS            reduce using rule 26 (rightparen -> RPAREN .)
    MINUS           reduce using rule 26 (rightparen -> RPAREN .)
    MORETHAN        reduce using rule 26 (rightparen -> RPAREN .)
    LESSTHAN        reduce using rule 26 (rightparen -> RPAREN .)
    NOTEQUAL        reduce using rule 26 (rightparen -> RPAREN .)
    ISEQUALTO       reduce using rule 26 (rightparen -> RPAREN .)
    MORETHANEQUAL   reduce using rule 26 (rightparen -> RPAREN .)
    LESSTHANEQUAL   reduce using rule 26 (rightparen -> RPAREN .)
    AND             reduce using rule 26 (rightparen -> RPAREN .)
    OR              reduce using rule 26 (rightparen -> RPAREN .)
    COMMA           reduce using rule 26 (rightparen -> RPAREN .)
    RPAREN          reduce using rule 26 (rightparen -> RPAREN .)
    SEMICOLON       reduce using rule 26 (rightparen -> RPAREN .)
    RSQBRACKET      reduce using rule 26 (rightparen -> RPAREN .)


state 157

    (21) factor -> leftparen expresion rightparen .

    TIMES           reduce using rule 21 (factor -> leftparen expresion rightparen .)
    DIVIDE          reduce using rule 21 (factor -> leftparen expresion rightparen .)
    PLUS            reduce using rule 21 (factor -> leftparen expresion rightparen .)
    MINUS           reduce using rule 21 (factor -> leftparen expresion rightparen .)
    MORETHAN        reduce using rule 21 (factor -> leftparen expresion rightparen .)
    LESSTHAN        reduce using rule 21 (factor -> leftparen expresion rightparen .)
    NOTEQUAL        reduce using rule 21 (factor -> leftparen expresion rightparen .)
    ISEQUALTO       reduce using rule 21 (factor -> leftparen expresion rightparen .)
    MORETHANEQUAL   reduce using rule 21 (factor -> leftparen expresion rightparen .)
    LESSTHANEQUAL   reduce using rule 21 (factor -> leftparen expresion rightparen .)
    AND             reduce using rule 21 (factor -> leftparen expresion rightparen .)
    OR              reduce using rule 21 (factor -> leftparen expresion rightparen .)
    COMMA           reduce using rule 21 (factor -> leftparen expresion rightparen .)
    RPAREN          reduce using rule 21 (factor -> leftparen expresion rightparen .)
    RSQBRACKET      reduce using rule 21 (factor -> leftparen expresion rightparen .)
    SEMICOLON       reduce using rule 21 (factor -> leftparen expresion rightparen .)


state 158

    (12) escritura -> print LPAREN listaprint RPAREN SEMICOLON .

    COMMENT         reduce using rule 12 (escritura -> print LPAREN listaprint RPAREN SEMICOLON .)
    CPPCOMMENT      reduce using rule 12 (escritura -> print LPAREN listaprint RPAREN SEMICOLON .)
    ID              reduce using rule 12 (escritura -> print LPAREN listaprint RPAREN SEMICOLON .)
    IF              reduce using rule 12 (escritura -> print LPAREN listaprint RPAREN SEMICOLON .)
    VAR             reduce using rule 12 (escritura -> print LPAREN listaprint RPAREN SEMICOLON .)
    WHILE           reduce using rule 12 (escritura -> print LPAREN listaprint RPAREN SEMICOLON .)
    PRINT           reduce using rule 12 (escritura -> print LPAREN listaprint RPAREN SEMICOLON .)
    RETURN          reduce using rule 12 (escritura -> print LPAREN listaprint RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 12 (escritura -> print LPAREN listaprint RPAREN SEMICOLON .)


state 159

    (40) masexpresion -> addQPAO expresion .

    COMMA           reduce using rule 40 (masexpresion -> addQPAO expresion .)
    RPAREN          reduce using rule 40 (masexpresion -> addQPAO expresion .)
    SEMICOLON       reduce using rule 40 (masexpresion -> addQPAO expresion .)
    RSQBRACKET      reduce using rule 40 (masexpresion -> addQPAO expresion .)


state 160

    (16) masprint -> addQPP listaprint .

    RPAREN          reduce using rule 16 (masprint -> addQPP listaprint .)


state 161

    (28) arr -> LSQBRACKET RSQBRACKET .

    TIMES           reduce using rule 28 (arr -> LSQBRACKET RSQBRACKET .)
    DIVIDE          reduce using rule 28 (arr -> LSQBRACKET RSQBRACKET .)
    PLUS            reduce using rule 28 (arr -> LSQBRACKET RSQBRACKET .)
    MINUS           reduce using rule 28 (arr -> LSQBRACKET RSQBRACKET .)
    MORETHAN        reduce using rule 28 (arr -> LSQBRACKET RSQBRACKET .)
    LESSTHAN        reduce using rule 28 (arr -> LSQBRACKET RSQBRACKET .)
    NOTEQUAL        reduce using rule 28 (arr -> LSQBRACKET RSQBRACKET .)
    ISEQUALTO       reduce using rule 28 (arr -> LSQBRACKET RSQBRACKET .)
    MORETHANEQUAL   reduce using rule 28 (arr -> LSQBRACKET RSQBRACKET .)
    LESSTHANEQUAL   reduce using rule 28 (arr -> LSQBRACKET RSQBRACKET .)
    AND             reduce using rule 28 (arr -> LSQBRACKET RSQBRACKET .)
    OR              reduce using rule 28 (arr -> LSQBRACKET RSQBRACKET .)
    COMMA           reduce using rule 28 (arr -> LSQBRACKET RSQBRACKET .)
    RPAREN          reduce using rule 28 (arr -> LSQBRACKET RSQBRACKET .)
    SEMICOLON       reduce using rule 28 (arr -> LSQBRACKET RSQBRACKET .)
    RSQBRACKET      reduce using rule 28 (arr -> LSQBRACKET RSQBRACKET .)


state 162

    (66) funcargs -> expresion listafuncargs checarparams .

    RPAREN          reduce using rule 66 (funcargs -> expresion listafuncargs checarparams .)


state 163

    (70) checarparams -> empty .

    RPAREN          reduce using rule 70 (checarparams -> empty .)


state 164

    (68) listafuncargs -> COMMA expresion . listafuncargs
    (68) listafuncargs -> . COMMA expresion listafuncargs
    (69) listafuncargs -> . empty
    (106) empty -> .

    COMMA           shift and go to state 144
    RPAREN          reduce using rule 106 (empty -> .)

    empty                          shift and go to state 142
    listafuncargs                  shift and go to state 173

state 165

    (5) gotoF -> empty .

    LBRACKET        reduce using rule 5 (gotoF -> empty .)


state 166

    (4) condicion -> IF LPAREN expresion RPAREN gotoF . bloque masbloque
    (6) bloque -> . LBRACKET masestatuto RBRACKET

    LBRACKET        shift and go to state 30

    bloque                         shift and go to state 174

state 167

    (10) ciclo -> while LPAREN expresion RPAREN gotoF . bloque goto
    (6) bloque -> . LBRACKET masestatuto RBRACKET

    LBRACKET        shift and go to state 30

    bloque                         shift and go to state 175

state 168

    (20) asignacion -> ID LSQBRACKET RSQBRACKET EQUALS LSQBRACKET . expresion comaexpresion RSQBRACKET SEMICOLON
    (37) expresion -> . expcomp masexpresion
    (47) expcomp -> . exp expcompcontinuo
    (30) exp -> . termino masexp
    (42) termino -> . factor masterminos
    (21) factor -> . leftparen expresion rightparen
    (22) factor -> . varcte
    (23) factor -> . varid
    (24) factor -> . llamafunc
    (25) leftparen -> . LPAREN
    (95) varcte -> . cteint
    (96) varcte -> . ctefloat
    (97) varcte -> . ctechar
    (98) varcte -> . ctestring
    (99) varcte -> . ctebool
    (27) varid -> . ID arr
    (64) llamafunc -> . idfunc LPAREN funcargs RPAREN
    (100) cteint -> . CTEINT
    (101) ctefloat -> . CTEFLOAT
    (102) ctechar -> . CTECHAR
    (103) ctestring -> . CTESTRING
    (104) ctebool -> . TRUE
    (105) ctebool -> . FALSE
    (65) idfunc -> . ID

    LPAREN          shift and go to state 93
    ID              shift and go to state 94
    CTEINT          shift and go to state 86
    CTEFLOAT        shift and go to state 89
    CTECHAR         shift and go to state 80
    CTESTRING       shift and go to state 73
    TRUE            shift and go to state 77
    FALSE           shift and go to state 76

    idfunc                         shift and go to state 42
    exp                            shift and go to state 72
    termino                        shift and go to state 74
    varid                          shift and go to state 75
    cteint                         shift and go to state 88
    ctechar                        shift and go to state 78
    factor                         shift and go to state 79
    varcte                         shift and go to state 81
    leftparen                      shift and go to state 82
    llamafunc                      shift and go to state 84
    expcomp                        shift and go to state 85
    ctefloat                       shift and go to state 87
    ctestring                      shift and go to state 97
    expresion                      shift and go to state 176
    ctebool                        shift and go to state 92

state 169

    (81) bloquefunc -> LBRACKET masestatuto retorno RBRACKET .

    FUNCTION        reduce using rule 81 (bloquefunc -> LBRACKET masestatuto retorno RBRACKET .)
    MAIN            reduce using rule 81 (bloquefunc -> LBRACKET masestatuto retorno RBRACKET .)


state 170

    (83) retorno -> RETURN SEMICOLON .

    RBRACKET        reduce using rule 83 (retorno -> RETURN SEMICOLON .)


state 171

    (82) retorno -> RETURN expresion . SEMICOLON

    SEMICOLON       shift and go to state 177


state 172

    (78) funcs -> FUNCTION funcaux LPAREN args masargs RPAREN bloquefunc funcs .

    MAIN            reduce using rule 78 (funcs -> FUNCTION funcaux LPAREN args masargs RPAREN bloquefunc funcs .)


state 173

    (68) listafuncargs -> COMMA expresion listafuncargs .

    RPAREN          reduce using rule 68 (listafuncargs -> COMMA expresion listafuncargs .)


state 174

    (4) condicion -> IF LPAREN expresion RPAREN gotoF bloque . masbloque
    (7) masbloque -> . ELSE goto bloque
    (8) masbloque -> . empty
    (106) empty -> .

    ELSE            shift and go to state 179
    COMMENT         reduce using rule 106 (empty -> .)
    CPPCOMMENT      reduce using rule 106 (empty -> .)
    ID              reduce using rule 106 (empty -> .)
    IF              reduce using rule 106 (empty -> .)
    VAR             reduce using rule 106 (empty -> .)
    WHILE           reduce using rule 106 (empty -> .)
    PRINT           reduce using rule 106 (empty -> .)
    RBRACKET        reduce using rule 106 (empty -> .)
    RETURN          reduce using rule 106 (empty -> .)

    masbloque                      shift and go to state 178
    empty                          shift and go to state 180

state 175

    (10) ciclo -> while LPAREN expresion RPAREN gotoF bloque . goto
    (9) goto -> . empty
    (106) empty -> .

    COMMENT         reduce using rule 106 (empty -> .)
    CPPCOMMENT      reduce using rule 106 (empty -> .)
    ID              reduce using rule 106 (empty -> .)
    IF              reduce using rule 106 (empty -> .)
    VAR             reduce using rule 106 (empty -> .)
    WHILE           reduce using rule 106 (empty -> .)
    PRINT           reduce using rule 106 (empty -> .)
    RBRACKET        reduce using rule 106 (empty -> .)
    RETURN          reduce using rule 106 (empty -> .)

    empty                          shift and go to state 182
    goto                           shift and go to state 181

state 176

    (20) asignacion -> ID LSQBRACKET RSQBRACKET EQUALS LSQBRACKET expresion . comaexpresion RSQBRACKET SEMICOLON
    (35) comaexpresion -> . COMMA expresion comaexpresion
    (36) comaexpresion -> . empty
    (106) empty -> .

    COMMA           shift and go to state 183
    RSQBRACKET      reduce using rule 106 (empty -> .)

    comaexpresion                  shift and go to state 185
    empty                          shift and go to state 184

state 177

    (82) retorno -> RETURN expresion SEMICOLON .

    RBRACKET        reduce using rule 82 (retorno -> RETURN expresion SEMICOLON .)


state 178

    (4) condicion -> IF LPAREN expresion RPAREN gotoF bloque masbloque .

    COMMENT         reduce using rule 4 (condicion -> IF LPAREN expresion RPAREN gotoF bloque masbloque .)
    CPPCOMMENT      reduce using rule 4 (condicion -> IF LPAREN expresion RPAREN gotoF bloque masbloque .)
    ID              reduce using rule 4 (condicion -> IF LPAREN expresion RPAREN gotoF bloque masbloque .)
    IF              reduce using rule 4 (condicion -> IF LPAREN expresion RPAREN gotoF bloque masbloque .)
    VAR             reduce using rule 4 (condicion -> IF LPAREN expresion RPAREN gotoF bloque masbloque .)
    WHILE           reduce using rule 4 (condicion -> IF LPAREN expresion RPAREN gotoF bloque masbloque .)
    PRINT           reduce using rule 4 (condicion -> IF LPAREN expresion RPAREN gotoF bloque masbloque .)
    RETURN          reduce using rule 4 (condicion -> IF LPAREN expresion RPAREN gotoF bloque masbloque .)
    RBRACKET        reduce using rule 4 (condicion -> IF LPAREN expresion RPAREN gotoF bloque masbloque .)


state 179

    (7) masbloque -> ELSE . goto bloque
    (9) goto -> . empty
    (106) empty -> .

    LBRACKET        reduce using rule 106 (empty -> .)

    empty                          shift and go to state 182
    goto                           shift and go to state 186

state 180

    (8) masbloque -> empty .

    COMMENT         reduce using rule 8 (masbloque -> empty .)
    CPPCOMMENT      reduce using rule 8 (masbloque -> empty .)
    ID              reduce using rule 8 (masbloque -> empty .)
    IF              reduce using rule 8 (masbloque -> empty .)
    VAR             reduce using rule 8 (masbloque -> empty .)
    WHILE           reduce using rule 8 (masbloque -> empty .)
    PRINT           reduce using rule 8 (masbloque -> empty .)
    RBRACKET        reduce using rule 8 (masbloque -> empty .)
    RETURN          reduce using rule 8 (masbloque -> empty .)


state 181

    (10) ciclo -> while LPAREN expresion RPAREN gotoF bloque goto .

    COMMENT         reduce using rule 10 (ciclo -> while LPAREN expresion RPAREN gotoF bloque goto .)
    CPPCOMMENT      reduce using rule 10 (ciclo -> while LPAREN expresion RPAREN gotoF bloque goto .)
    ID              reduce using rule 10 (ciclo -> while LPAREN expresion RPAREN gotoF bloque goto .)
    IF              reduce using rule 10 (ciclo -> while LPAREN expresion RPAREN gotoF bloque goto .)
    VAR             reduce using rule 10 (ciclo -> while LPAREN expresion RPAREN gotoF bloque goto .)
    WHILE           reduce using rule 10 (ciclo -> while LPAREN expresion RPAREN gotoF bloque goto .)
    PRINT           reduce using rule 10 (ciclo -> while LPAREN expresion RPAREN gotoF bloque goto .)
    RBRACKET        reduce using rule 10 (ciclo -> while LPAREN expresion RPAREN gotoF bloque goto .)
    RETURN          reduce using rule 10 (ciclo -> while LPAREN expresion RPAREN gotoF bloque goto .)


state 182

    (9) goto -> empty .

    COMMENT         reduce using rule 9 (goto -> empty .)
    CPPCOMMENT      reduce using rule 9 (goto -> empty .)
    ID              reduce using rule 9 (goto -> empty .)
    IF              reduce using rule 9 (goto -> empty .)
    VAR             reduce using rule 9 (goto -> empty .)
    WHILE           reduce using rule 9 (goto -> empty .)
    PRINT           reduce using rule 9 (goto -> empty .)
    RBRACKET        reduce using rule 9 (goto -> empty .)
    RETURN          reduce using rule 9 (goto -> empty .)
    LBRACKET        reduce using rule 9 (goto -> empty .)


state 183

    (35) comaexpresion -> COMMA . expresion comaexpresion
    (37) expresion -> . expcomp masexpresion
    (47) expcomp -> . exp expcompcontinuo
    (30) exp -> . termino masexp
    (42) termino -> . factor masterminos
    (21) factor -> . leftparen expresion rightparen
    (22) factor -> . varcte
    (23) factor -> . varid
    (24) factor -> . llamafunc
    (25) leftparen -> . LPAREN
    (95) varcte -> . cteint
    (96) varcte -> . ctefloat
    (97) varcte -> . ctechar
    (98) varcte -> . ctestring
    (99) varcte -> . ctebool
    (27) varid -> . ID arr
    (64) llamafunc -> . idfunc LPAREN funcargs RPAREN
    (100) cteint -> . CTEINT
    (101) ctefloat -> . CTEFLOAT
    (102) ctechar -> . CTECHAR
    (103) ctestring -> . CTESTRING
    (104) ctebool -> . TRUE
    (105) ctebool -> . FALSE
    (65) idfunc -> . ID

    LPAREN          shift and go to state 93
    ID              shift and go to state 94
    CTEINT          shift and go to state 86
    CTEFLOAT        shift and go to state 89
    CTECHAR         shift and go to state 80
    CTESTRING       shift and go to state 73
    TRUE            shift and go to state 77
    FALSE           shift and go to state 76

    idfunc                         shift and go to state 42
    exp                            shift and go to state 72
    termino                        shift and go to state 74
    varid                          shift and go to state 75
    cteint                         shift and go to state 88
    ctechar                        shift and go to state 78
    factor                         shift and go to state 79
    varcte                         shift and go to state 81
    leftparen                      shift and go to state 82
    llamafunc                      shift and go to state 84
    expcomp                        shift and go to state 85
    ctefloat                       shift and go to state 87
    ctestring                      shift and go to state 97
    expresion                      shift and go to state 187
    ctebool                        shift and go to state 92

state 184

    (36) comaexpresion -> empty .

    RSQBRACKET      reduce using rule 36 (comaexpresion -> empty .)


state 185

    (20) asignacion -> ID LSQBRACKET RSQBRACKET EQUALS LSQBRACKET expresion comaexpresion . RSQBRACKET SEMICOLON

    RSQBRACKET      shift and go to state 188


state 186

    (7) masbloque -> ELSE goto . bloque
    (6) bloque -> . LBRACKET masestatuto RBRACKET

    LBRACKET        shift and go to state 30

    bloque                         shift and go to state 189

state 187

    (35) comaexpresion -> COMMA expresion . comaexpresion
    (35) comaexpresion -> . COMMA expresion comaexpresion
    (36) comaexpresion -> . empty
    (106) empty -> .

    COMMA           shift and go to state 183
    RSQBRACKET      reduce using rule 106 (empty -> .)

    comaexpresion                  shift and go to state 190
    empty                          shift and go to state 184

state 188

    (20) asignacion -> ID LSQBRACKET RSQBRACKET EQUALS LSQBRACKET expresion comaexpresion RSQBRACKET . SEMICOLON

    SEMICOLON       shift and go to state 191


state 189

    (7) masbloque -> ELSE goto bloque .

    COMMENT         reduce using rule 7 (masbloque -> ELSE goto bloque .)
    CPPCOMMENT      reduce using rule 7 (masbloque -> ELSE goto bloque .)
    ID              reduce using rule 7 (masbloque -> ELSE goto bloque .)
    IF              reduce using rule 7 (masbloque -> ELSE goto bloque .)
    VAR             reduce using rule 7 (masbloque -> ELSE goto bloque .)
    WHILE           reduce using rule 7 (masbloque -> ELSE goto bloque .)
    PRINT           reduce using rule 7 (masbloque -> ELSE goto bloque .)
    RBRACKET        reduce using rule 7 (masbloque -> ELSE goto bloque .)
    RETURN          reduce using rule 7 (masbloque -> ELSE goto bloque .)


state 190

    (35) comaexpresion -> COMMA expresion comaexpresion .

    RSQBRACKET      reduce using rule 35 (comaexpresion -> COMMA expresion comaexpresion .)


state 191

    (20) asignacion -> ID LSQBRACKET RSQBRACKET EQUALS LSQBRACKET expresion comaexpresion RSQBRACKET SEMICOLON .

    COMMENT         reduce using rule 20 (asignacion -> ID LSQBRACKET RSQBRACKET EQUALS LSQBRACKET expresion comaexpresion RSQBRACKET SEMICOLON .)
    CPPCOMMENT      reduce using rule 20 (asignacion -> ID LSQBRACKET RSQBRACKET EQUALS LSQBRACKET expresion comaexpresion RSQBRACKET SEMICOLON .)
    ID              reduce using rule 20 (asignacion -> ID LSQBRACKET RSQBRACKET EQUALS LSQBRACKET expresion comaexpresion RSQBRACKET SEMICOLON .)
    IF              reduce using rule 20 (asignacion -> ID LSQBRACKET RSQBRACKET EQUALS LSQBRACKET expresion comaexpresion RSQBRACKET SEMICOLON .)
    VAR             reduce using rule 20 (asignacion -> ID LSQBRACKET RSQBRACKET EQUALS LSQBRACKET expresion comaexpresion RSQBRACKET SEMICOLON .)
    WHILE           reduce using rule 20 (asignacion -> ID LSQBRACKET RSQBRACKET EQUALS LSQBRACKET expresion comaexpresion RSQBRACKET SEMICOLON .)
    PRINT           reduce using rule 20 (asignacion -> ID LSQBRACKET RSQBRACKET EQUALS LSQBRACKET expresion comaexpresion RSQBRACKET SEMICOLON .)
    RBRACKET        reduce using rule 20 (asignacion -> ID LSQBRACKET RSQBRACKET EQUALS LSQBRACKET expresion comaexpresion RSQBRACKET SEMICOLON .)
    RETURN          reduce using rule 20 (asignacion -> ID LSQBRACKET RSQBRACKET EQUALS LSQBRACKET expresion comaexpresion RSQBRACKET SEMICOLON .)

