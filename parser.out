Created by PLY version 3.9 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programa
Rule 1     programa -> prog ID SEMICOLON vars eramain funcs main bloque
Rule 2     prog -> PROGRAM
Rule 3     eramain -> empty
Rule 4     main -> MAIN
Rule 5     condicion -> IF LPAREN expresion RPAREN gotoF estatutobloque masbloque
Rule 6     estatutobloque -> estatuto
Rule 7     estatutobloque -> bloque
Rule 8     gotoF -> empty
Rule 9     bloque -> LBRACKET masestatuto RBRACKET
Rule 10    masbloque -> ELSE goto estatutobloque
Rule 11    masbloque -> empty
Rule 12    goto -> empty
Rule 13    ciclo -> while LPAREN expresion RPAREN gotoF estatutobloque goto
Rule 14    while -> WHILE
Rule 15    escritura -> print LPAREN listaprint RPAREN SEMICOLON
Rule 16    print -> PRINT
Rule 17    listaprint -> expresion masprint
Rule 18    listaprint -> ctestring masprint
Rule 19    masprint -> addQPP listaprint
Rule 20    masprint -> empty
Rule 21    addQPP -> COMMA
Rule 22    asignacion -> ID EQUALS expresion SEMICOLON
Rule 23    asignacion -> ID LSQBRACKET RSQBRACKET EQUALS LSQBRACKET expresion comaexpresion RSQBRACKET SEMICOLON
Rule 24    factor -> leftparen expresion rightparen
Rule 25    factor -> varcte
Rule 26    factor -> varid
Rule 27    factor -> llamafunc
Rule 28    leftparen -> LPAREN
Rule 29    rightparen -> RPAREN
Rule 30    varid -> ID arr
Rule 31    arr -> LSQBRACKET RSQBRACKET
Rule 32    arr -> empty
Rule 33    exp -> termino masexp
Rule 34    masexp -> addQPPM exp
Rule 35    masexp -> empty
Rule 36    addQPPM -> PLUS
Rule 37    addQPPM -> MINUS
Rule 38    comaexpresion -> COMMA expresion comaexpresion
Rule 39    comaexpresion -> empty
Rule 40    expresion -> expcomp masexpresion
Rule 41    addQPAO -> AND
Rule 42    addQPAO -> OR
Rule 43    masexpresion -> addQPAO expresion
Rule 44    masexpresion -> empty
Rule 45    termino -> factor masterminos
Rule 46    addQTD -> TIMES
Rule 47    addQTD -> DIVIDE
Rule 48    masterminos -> addQTD termino
Rule 49    masterminos -> empty
Rule 50    expcomp -> exp expcompcontinuo
Rule 51    addQPComp -> MORETHAN
Rule 52    addQPComp -> LESSTHAN
Rule 53    addQPComp -> NOTEQUAL
Rule 54    addQPComp -> ISEQUALTO
Rule 55    addQPComp -> MORETHANEQUAL
Rule 56    addQPComp -> LESSTHANEQUAL
Rule 57    expcompcontinuo -> addQPComp expcomp
Rule 58    expcompcontinuo -> empty
Rule 59    estatuto -> asignacion
Rule 60    estatuto -> condicion
Rule 61    estatuto -> ciclo
Rule 62    estatuto -> escritura
Rule 63    estatuto -> lectura
Rule 64    estatuto -> vars
Rule 65    estatuto -> llamafunc SEMICOLON
Rule 66    estatuto -> COMMENT
Rule 67    estatuto -> CPPCOMMENT
Rule 68    lectura -> READ LPAREN ID RPAREN SEMICOLON
Rule 69    llamafunc -> idfunc LPAREN funcargs RPAREN
Rule 70    idfunc -> ID
Rule 71    funcargs -> expresion listafuncargs checarparams
Rule 72    funcargs -> empty
Rule 73    listafuncargs -> COMMA expresion listafuncargs
Rule 74    listafuncargs -> empty
Rule 75    checarparams -> empty
Rule 76    masestatuto -> estatuto masestatuto
Rule 77    masestatuto -> empty
Rule 78    vars -> VAR tipo listaid SEMICOLON vars
Rule 79    vars -> empty
Rule 80    listaid -> initvar masid
Rule 81    initvar -> ID EQUALS expresion
Rule 82    initvar -> ID empty
Rule 83    masid -> COMMA listaid
Rule 84    masid -> empty
Rule 85    funcs -> FUNCTION funcaux LPAREN args masargs RPAREN bloquefunc funcs
Rule 86    funcs -> FUNCTION funcaux LPAREN RPAREN bloquefunc funcs
Rule 87    funcs -> empty
Rule 88    bloquefunc -> LBRACKET masestatuto retorno RBRACKET
Rule 89    retorno -> RETURN expresion SEMICOLON
Rule 90    retorno -> RETURN SEMICOLON
Rule 91    funcaux -> tipo ID
Rule 92    args -> tipo ID
Rule 93    args -> empty
Rule 94    masargs -> COMMA args masargs
Rule 95    masargs -> empty
Rule 96    tipo -> INT
Rule 97    tipo -> FLOAT
Rule 98    tipo -> CHAR
Rule 99    tipo -> BOOL
Rule 100   tipo -> STRING
Rule 101   tipo -> VOID
Rule 102   varcte -> cteint
Rule 103   varcte -> ctefloat
Rule 104   varcte -> ctechar
Rule 105   varcte -> ctestring
Rule 106   varcte -> ctebool
Rule 107   cteint -> CTEINT
Rule 108   ctefloat -> CTEFLOAT
Rule 109   ctechar -> CTECHAR
Rule 110   ctestring -> CTESTRING
Rule 111   ctebool -> TRUE
Rule 112   ctebool -> FALSE
Rule 113   empty -> <empty>

Terminals, with rules where they appear

AND                  : 41
BOOL                 : 99
CHAR                 : 98
COMMA                : 21 38 73 83 94
COMMENT              : 66
CPPCOMMENT           : 67
CTECHAR              : 109
CTEFLOAT             : 108
CTEINT               : 107
CTESTRING            : 110
DIVIDE               : 47
ELSE                 : 10
EQUALS               : 22 23 81
FALSE                : 112
FLOAT                : 97
FUNCTION             : 85 86
ID                   : 1 22 23 30 68 70 81 82 91 92
IF                   : 5
INT                  : 96
ISEQUALTO            : 54
LBRACKET             : 9 88
LESSTHAN             : 52
LESSTHANEQUAL        : 56
LPAREN               : 5 13 15 28 68 69 85 86
LSQBRACKET           : 23 23 31
MAIN                 : 4
MINUS                : 37
MORETHAN             : 51
MORETHANEQUAL        : 55
NOTEQUAL             : 53
OR                   : 42
PLUS                 : 36
PRINT                : 16
PROGRAM              : 2
RBRACKET             : 9 88
READ                 : 68
RETURN               : 89 90
RPAREN               : 5 13 15 29 68 69 85 86
RSQBRACKET           : 23 23 31
SEMICOLON            : 1 15 22 23 65 68 78 89 90
STRING               : 100
TIMES                : 46
TRUE                 : 111
VAR                  : 78
VOID                 : 101
WHILE                : 14
error                : 

Nonterminals, with rules where they appear

addQPAO              : 43
addQPComp            : 57
addQPP               : 19
addQPPM              : 34
addQTD               : 48
args                 : 85 94
arr                  : 30
asignacion           : 59
bloque               : 1 7
bloquefunc           : 85 86
checarparams         : 71
ciclo                : 61
comaexpresion        : 23 38
condicion            : 60
ctebool              : 106
ctechar              : 104
ctefloat             : 103
cteint               : 102
ctestring            : 18 105
empty                : 3 8 11 12 20 32 35 39 44 49 58 72 74 75 77 79 82 84 87 93 95
eramain              : 1
escritura            : 62
estatuto             : 6 76
estatutobloque       : 5 10 13
exp                  : 34 50
expcomp              : 40 57
expcompcontinuo      : 50
expresion            : 5 13 17 22 23 24 38 43 71 73 81 89
factor               : 45
funcargs             : 69
funcaux              : 85 86
funcs                : 1 85 86
goto                 : 10 13
gotoF                : 5 13
idfunc               : 69
initvar              : 80
lectura              : 63
leftparen            : 24
listafuncargs        : 71 73
listaid              : 78 83
listaprint           : 15 19
llamafunc            : 27 65
main                 : 1
masargs              : 85 94
masbloque            : 5
masestatuto          : 9 76 88
masexp               : 33
masexpresion         : 40
masid                : 80
masprint             : 17 18
masterminos          : 45
print                : 15
prog                 : 1
programa             : 0
retorno              : 88
rightparen           : 24
termino              : 33 48
tipo                 : 78 91 92
varcte               : 25
varid                : 26
vars                 : 1 64 78
while                : 13

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . prog ID SEMICOLON vars eramain funcs main bloque
    (2) prog -> . PROGRAM

    PROGRAM         shift and go to state 2

    programa                       shift and go to state 1
    prog                           shift and go to state 3

state 1

    (0) S' -> programa .



state 2

    (2) prog -> PROGRAM .

    ID              reduce using rule 2 (prog -> PROGRAM .)


state 3

    (1) programa -> prog . ID SEMICOLON vars eramain funcs main bloque

    ID              shift and go to state 4


state 4

    (1) programa -> prog ID . SEMICOLON vars eramain funcs main bloque

    SEMICOLON       shift and go to state 5


state 5

    (1) programa -> prog ID SEMICOLON . vars eramain funcs main bloque
    (78) vars -> . VAR tipo listaid SEMICOLON vars
    (79) vars -> . empty
    (113) empty -> .

    VAR             shift and go to state 8
    FUNCTION        reduce using rule 113 (empty -> .)
    MAIN            reduce using rule 113 (empty -> .)

    vars                           shift and go to state 6
    empty                          shift and go to state 7

state 6

    (1) programa -> prog ID SEMICOLON vars . eramain funcs main bloque
    (3) eramain -> . empty
    (113) empty -> .

    FUNCTION        reduce using rule 113 (empty -> .)
    MAIN            reduce using rule 113 (empty -> .)

    eramain                        shift and go to state 9
    empty                          shift and go to state 10

state 7

    (79) vars -> empty .

    ELSE            reduce using rule 79 (vars -> empty .)
    COMMENT         reduce using rule 79 (vars -> empty .)
    CPPCOMMENT      reduce using rule 79 (vars -> empty .)
    ID              reduce using rule 79 (vars -> empty .)
    IF              reduce using rule 79 (vars -> empty .)
    READ            reduce using rule 79 (vars -> empty .)
    VAR             reduce using rule 79 (vars -> empty .)
    WHILE           reduce using rule 79 (vars -> empty .)
    PRINT           reduce using rule 79 (vars -> empty .)
    RBRACKET        reduce using rule 79 (vars -> empty .)
    RETURN          reduce using rule 79 (vars -> empty .)
    FUNCTION        reduce using rule 79 (vars -> empty .)
    MAIN            reduce using rule 79 (vars -> empty .)


state 8

    (78) vars -> VAR . tipo listaid SEMICOLON vars
    (96) tipo -> . INT
    (97) tipo -> . FLOAT
    (98) tipo -> . CHAR
    (99) tipo -> . BOOL
    (100) tipo -> . STRING
    (101) tipo -> . VOID

    INT             shift and go to state 12
    FLOAT           shift and go to state 16
    CHAR            shift and go to state 11
    BOOL            shift and go to state 13
    STRING          shift and go to state 17
    VOID            shift and go to state 15

    tipo                           shift and go to state 14

state 9

    (1) programa -> prog ID SEMICOLON vars eramain . funcs main bloque
    (85) funcs -> . FUNCTION funcaux LPAREN args masargs RPAREN bloquefunc funcs
    (86) funcs -> . FUNCTION funcaux LPAREN RPAREN bloquefunc funcs
    (87) funcs -> . empty
    (113) empty -> .

    FUNCTION        shift and go to state 19
    MAIN            reduce using rule 113 (empty -> .)

    empty                          shift and go to state 18
    funcs                          shift and go to state 20

state 10

    (3) eramain -> empty .

    FUNCTION        reduce using rule 3 (eramain -> empty .)
    MAIN            reduce using rule 3 (eramain -> empty .)


state 11

    (98) tipo -> CHAR .

    ID              reduce using rule 98 (tipo -> CHAR .)


state 12

    (96) tipo -> INT .

    ID              reduce using rule 96 (tipo -> INT .)


state 13

    (99) tipo -> BOOL .

    ID              reduce using rule 99 (tipo -> BOOL .)


state 14

    (78) vars -> VAR tipo . listaid SEMICOLON vars
    (80) listaid -> . initvar masid
    (81) initvar -> . ID EQUALS expresion
    (82) initvar -> . ID empty

    ID              shift and go to state 22

    listaid                        shift and go to state 21
    initvar                        shift and go to state 23

state 15

    (101) tipo -> VOID .

    ID              reduce using rule 101 (tipo -> VOID .)


state 16

    (97) tipo -> FLOAT .

    ID              reduce using rule 97 (tipo -> FLOAT .)


state 17

    (100) tipo -> STRING .

    ID              reduce using rule 100 (tipo -> STRING .)


state 18

    (87) funcs -> empty .

    MAIN            reduce using rule 87 (funcs -> empty .)


state 19

    (85) funcs -> FUNCTION . funcaux LPAREN args masargs RPAREN bloquefunc funcs
    (86) funcs -> FUNCTION . funcaux LPAREN RPAREN bloquefunc funcs
    (91) funcaux -> . tipo ID
    (96) tipo -> . INT
    (97) tipo -> . FLOAT
    (98) tipo -> . CHAR
    (99) tipo -> . BOOL
    (100) tipo -> . STRING
    (101) tipo -> . VOID

    INT             shift and go to state 12
    FLOAT           shift and go to state 16
    CHAR            shift and go to state 11
    BOOL            shift and go to state 13
    STRING          shift and go to state 17
    VOID            shift and go to state 15

    tipo                           shift and go to state 24
    funcaux                        shift and go to state 25

state 20

    (1) programa -> prog ID SEMICOLON vars eramain funcs . main bloque
    (4) main -> . MAIN

    MAIN            shift and go to state 27

    main                           shift and go to state 26

state 21

    (78) vars -> VAR tipo listaid . SEMICOLON vars

    SEMICOLON       shift and go to state 28


state 22

    (81) initvar -> ID . EQUALS expresion
    (82) initvar -> ID . empty
    (113) empty -> .

    EQUALS          shift and go to state 30
    COMMA           reduce using rule 113 (empty -> .)
    SEMICOLON       reduce using rule 113 (empty -> .)

    empty                          shift and go to state 29

state 23

    (80) listaid -> initvar . masid
    (83) masid -> . COMMA listaid
    (84) masid -> . empty
    (113) empty -> .

    COMMA           shift and go to state 32
    SEMICOLON       reduce using rule 113 (empty -> .)

    empty                          shift and go to state 31
    masid                          shift and go to state 33

state 24

    (91) funcaux -> tipo . ID

    ID              shift and go to state 34


state 25

    (85) funcs -> FUNCTION funcaux . LPAREN args masargs RPAREN bloquefunc funcs
    (86) funcs -> FUNCTION funcaux . LPAREN RPAREN bloquefunc funcs

    LPAREN          shift and go to state 35


state 26

    (1) programa -> prog ID SEMICOLON vars eramain funcs main . bloque
    (9) bloque -> . LBRACKET masestatuto RBRACKET

    LBRACKET        shift and go to state 37

    bloque                         shift and go to state 36

state 27

    (4) main -> MAIN .

    LBRACKET        reduce using rule 4 (main -> MAIN .)


state 28

    (78) vars -> VAR tipo listaid SEMICOLON . vars
    (78) vars -> . VAR tipo listaid SEMICOLON vars
    (79) vars -> . empty
    (113) empty -> .

  ! shift/reduce conflict for VAR resolved as shift
    VAR             shift and go to state 8
    FUNCTION        reduce using rule 113 (empty -> .)
    MAIN            reduce using rule 113 (empty -> .)
    COMMENT         reduce using rule 113 (empty -> .)
    CPPCOMMENT      reduce using rule 113 (empty -> .)
    ID              reduce using rule 113 (empty -> .)
    IF              reduce using rule 113 (empty -> .)
    READ            reduce using rule 113 (empty -> .)
    WHILE           reduce using rule 113 (empty -> .)
    PRINT           reduce using rule 113 (empty -> .)
    RBRACKET        reduce using rule 113 (empty -> .)
    RETURN          reduce using rule 113 (empty -> .)
    ELSE            reduce using rule 113 (empty -> .)

  ! VAR             [ reduce using rule 113 (empty -> .) ]

    empty                          shift and go to state 7
    vars                           shift and go to state 38

state 29

    (82) initvar -> ID empty .

    COMMA           reduce using rule 82 (initvar -> ID empty .)
    SEMICOLON       reduce using rule 82 (initvar -> ID empty .)


state 30

    (81) initvar -> ID EQUALS . expresion
    (40) expresion -> . expcomp masexpresion
    (50) expcomp -> . exp expcompcontinuo
    (33) exp -> . termino masexp
    (45) termino -> . factor masterminos
    (24) factor -> . leftparen expresion rightparen
    (25) factor -> . varcte
    (26) factor -> . varid
    (27) factor -> . llamafunc
    (28) leftparen -> . LPAREN
    (102) varcte -> . cteint
    (103) varcte -> . ctefloat
    (104) varcte -> . ctechar
    (105) varcte -> . ctestring
    (106) varcte -> . ctebool
    (30) varid -> . ID arr
    (69) llamafunc -> . idfunc LPAREN funcargs RPAREN
    (107) cteint -> . CTEINT
    (108) ctefloat -> . CTEFLOAT
    (109) ctechar -> . CTECHAR
    (110) ctestring -> . CTESTRING
    (111) ctebool -> . TRUE
    (112) ctebool -> . FALSE
    (70) idfunc -> . ID

    LPAREN          shift and go to state 43
    ID              shift and go to state 54
    CTEINT          shift and go to state 59
    CTEFLOAT        shift and go to state 39
    CTECHAR         shift and go to state 44
    CTESTRING       shift and go to state 47
    TRUE            shift and go to state 52
    FALSE           shift and go to state 45

    ctefloat                       shift and go to state 40
    exp                            shift and go to state 41
    idfunc                         shift and go to state 42
    varcte                         shift and go to state 46
    termino                        shift and go to state 48
    ctebool                        shift and go to state 49
    factor                         shift and go to state 50
    llamafunc                      shift and go to state 51
    varid                          shift and go to state 53
    expcomp                        shift and go to state 55
    leftparen                      shift and go to state 56
    expresion                      shift and go to state 57
    ctestring                      shift and go to state 58
    cteint                         shift and go to state 60
    ctechar                        shift and go to state 61

state 31

    (84) masid -> empty .

    SEMICOLON       reduce using rule 84 (masid -> empty .)


state 32

    (83) masid -> COMMA . listaid
    (80) listaid -> . initvar masid
    (81) initvar -> . ID EQUALS expresion
    (82) initvar -> . ID empty

    ID              shift and go to state 22

    initvar                        shift and go to state 23
    listaid                        shift and go to state 62

state 33

    (80) listaid -> initvar masid .

    SEMICOLON       reduce using rule 80 (listaid -> initvar masid .)


state 34

    (91) funcaux -> tipo ID .

    LPAREN          reduce using rule 91 (funcaux -> tipo ID .)


state 35

    (85) funcs -> FUNCTION funcaux LPAREN . args masargs RPAREN bloquefunc funcs
    (86) funcs -> FUNCTION funcaux LPAREN . RPAREN bloquefunc funcs
    (92) args -> . tipo ID
    (93) args -> . empty
    (96) tipo -> . INT
    (97) tipo -> . FLOAT
    (98) tipo -> . CHAR
    (99) tipo -> . BOOL
    (100) tipo -> . STRING
    (101) tipo -> . VOID
    (113) empty -> .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 64
    INT             shift and go to state 12
    FLOAT           shift and go to state 16
    CHAR            shift and go to state 11
    BOOL            shift and go to state 13
    STRING          shift and go to state 17
    VOID            shift and go to state 15
    COMMA           reduce using rule 113 (empty -> .)

  ! RPAREN          [ reduce using rule 113 (empty -> .) ]

    args                           shift and go to state 63
    tipo                           shift and go to state 65
    empty                          shift and go to state 66

state 36

    (1) programa -> prog ID SEMICOLON vars eramain funcs main bloque .

    $end            reduce using rule 1 (programa -> prog ID SEMICOLON vars eramain funcs main bloque .)


state 37

    (9) bloque -> LBRACKET . masestatuto RBRACKET
    (76) masestatuto -> . estatuto masestatuto
    (77) masestatuto -> . empty
    (59) estatuto -> . asignacion
    (60) estatuto -> . condicion
    (61) estatuto -> . ciclo
    (62) estatuto -> . escritura
    (63) estatuto -> . lectura
    (64) estatuto -> . vars
    (65) estatuto -> . llamafunc SEMICOLON
    (66) estatuto -> . COMMENT
    (67) estatuto -> . CPPCOMMENT
    (113) empty -> .
    (22) asignacion -> . ID EQUALS expresion SEMICOLON
    (23) asignacion -> . ID LSQBRACKET RSQBRACKET EQUALS LSQBRACKET expresion comaexpresion RSQBRACKET SEMICOLON
    (5) condicion -> . IF LPAREN expresion RPAREN gotoF estatutobloque masbloque
    (13) ciclo -> . while LPAREN expresion RPAREN gotoF estatutobloque goto
    (15) escritura -> . print LPAREN listaprint RPAREN SEMICOLON
    (68) lectura -> . READ LPAREN ID RPAREN SEMICOLON
    (78) vars -> . VAR tipo listaid SEMICOLON vars
    (79) vars -> . empty
    (69) llamafunc -> . idfunc LPAREN funcargs RPAREN
    (14) while -> . WHILE
    (16) print -> . PRINT
    (70) idfunc -> . ID

  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for CPPCOMMENT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
    COMMENT         shift and go to state 78
    CPPCOMMENT      shift and go to state 80
    RBRACKET        reduce using rule 113 (empty -> .)
    ID              shift and go to state 85
    IF              shift and go to state 70
    READ            shift and go to state 69
    VAR             shift and go to state 8
    WHILE           shift and go to state 74
    PRINT           shift and go to state 68

  ! COMMENT         [ reduce using rule 113 (empty -> .) ]
  ! CPPCOMMENT      [ reduce using rule 113 (empty -> .) ]
  ! ID              [ reduce using rule 113 (empty -> .) ]
  ! IF              [ reduce using rule 113 (empty -> .) ]
  ! READ            [ reduce using rule 113 (empty -> .) ]
  ! VAR             [ reduce using rule 113 (empty -> .) ]
  ! WHILE           [ reduce using rule 113 (empty -> .) ]
  ! PRINT           [ reduce using rule 113 (empty -> .) ]

    estatuto                       shift and go to state 67
    idfunc                         shift and go to state 42
    asignacion                     shift and go to state 71
    condicion                      shift and go to state 72
    escritura                      shift and go to state 73
    empty                          shift and go to state 77
    llamafunc                      shift and go to state 75
    vars                           shift and go to state 76
    print                          shift and go to state 81
    ciclo                          shift and go to state 79
    masestatuto                    shift and go to state 82
    while                          shift and go to state 83
    lectura                        shift and go to state 84

state 38

    (78) vars -> VAR tipo listaid SEMICOLON vars .

    ELSE            reduce using rule 78 (vars -> VAR tipo listaid SEMICOLON vars .)
    COMMENT         reduce using rule 78 (vars -> VAR tipo listaid SEMICOLON vars .)
    CPPCOMMENT      reduce using rule 78 (vars -> VAR tipo listaid SEMICOLON vars .)
    ID              reduce using rule 78 (vars -> VAR tipo listaid SEMICOLON vars .)
    IF              reduce using rule 78 (vars -> VAR tipo listaid SEMICOLON vars .)
    READ            reduce using rule 78 (vars -> VAR tipo listaid SEMICOLON vars .)
    VAR             reduce using rule 78 (vars -> VAR tipo listaid SEMICOLON vars .)
    WHILE           reduce using rule 78 (vars -> VAR tipo listaid SEMICOLON vars .)
    PRINT           reduce using rule 78 (vars -> VAR tipo listaid SEMICOLON vars .)
    RBRACKET        reduce using rule 78 (vars -> VAR tipo listaid SEMICOLON vars .)
    RETURN          reduce using rule 78 (vars -> VAR tipo listaid SEMICOLON vars .)
    FUNCTION        reduce using rule 78 (vars -> VAR tipo listaid SEMICOLON vars .)
    MAIN            reduce using rule 78 (vars -> VAR tipo listaid SEMICOLON vars .)


state 39

    (108) ctefloat -> CTEFLOAT .

    TIMES           reduce using rule 108 (ctefloat -> CTEFLOAT .)
    DIVIDE          reduce using rule 108 (ctefloat -> CTEFLOAT .)
    PLUS            reduce using rule 108 (ctefloat -> CTEFLOAT .)
    MINUS           reduce using rule 108 (ctefloat -> CTEFLOAT .)
    MORETHAN        reduce using rule 108 (ctefloat -> CTEFLOAT .)
    LESSTHAN        reduce using rule 108 (ctefloat -> CTEFLOAT .)
    NOTEQUAL        reduce using rule 108 (ctefloat -> CTEFLOAT .)
    ISEQUALTO       reduce using rule 108 (ctefloat -> CTEFLOAT .)
    MORETHANEQUAL   reduce using rule 108 (ctefloat -> CTEFLOAT .)
    LESSTHANEQUAL   reduce using rule 108 (ctefloat -> CTEFLOAT .)
    AND             reduce using rule 108 (ctefloat -> CTEFLOAT .)
    OR              reduce using rule 108 (ctefloat -> CTEFLOAT .)
    COMMA           reduce using rule 108 (ctefloat -> CTEFLOAT .)
    SEMICOLON       reduce using rule 108 (ctefloat -> CTEFLOAT .)
    RPAREN          reduce using rule 108 (ctefloat -> CTEFLOAT .)
    RSQBRACKET      reduce using rule 108 (ctefloat -> CTEFLOAT .)


state 40

    (103) varcte -> ctefloat .

    TIMES           reduce using rule 103 (varcte -> ctefloat .)
    DIVIDE          reduce using rule 103 (varcte -> ctefloat .)
    PLUS            reduce using rule 103 (varcte -> ctefloat .)
    MINUS           reduce using rule 103 (varcte -> ctefloat .)
    MORETHAN        reduce using rule 103 (varcte -> ctefloat .)
    LESSTHAN        reduce using rule 103 (varcte -> ctefloat .)
    NOTEQUAL        reduce using rule 103 (varcte -> ctefloat .)
    ISEQUALTO       reduce using rule 103 (varcte -> ctefloat .)
    MORETHANEQUAL   reduce using rule 103 (varcte -> ctefloat .)
    LESSTHANEQUAL   reduce using rule 103 (varcte -> ctefloat .)
    AND             reduce using rule 103 (varcte -> ctefloat .)
    OR              reduce using rule 103 (varcte -> ctefloat .)
    COMMA           reduce using rule 103 (varcte -> ctefloat .)
    SEMICOLON       reduce using rule 103 (varcte -> ctefloat .)
    RPAREN          reduce using rule 103 (varcte -> ctefloat .)
    RSQBRACKET      reduce using rule 103 (varcte -> ctefloat .)


state 41

    (50) expcomp -> exp . expcompcontinuo
    (57) expcompcontinuo -> . addQPComp expcomp
    (58) expcompcontinuo -> . empty
    (51) addQPComp -> . MORETHAN
    (52) addQPComp -> . LESSTHAN
    (53) addQPComp -> . NOTEQUAL
    (54) addQPComp -> . ISEQUALTO
    (55) addQPComp -> . MORETHANEQUAL
    (56) addQPComp -> . LESSTHANEQUAL
    (113) empty -> .

    MORETHAN        shift and go to state 93
    LESSTHAN        shift and go to state 91
    NOTEQUAL        shift and go to state 89
    ISEQUALTO       shift and go to state 87
    MORETHANEQUAL   shift and go to state 90
    LESSTHANEQUAL   shift and go to state 88
    AND             reduce using rule 113 (empty -> .)
    OR              reduce using rule 113 (empty -> .)
    COMMA           reduce using rule 113 (empty -> .)
    SEMICOLON       reduce using rule 113 (empty -> .)
    RPAREN          reduce using rule 113 (empty -> .)
    RSQBRACKET      reduce using rule 113 (empty -> .)

    addQPComp                      shift and go to state 86
    empty                          shift and go to state 92
    expcompcontinuo                shift and go to state 94

state 42

    (69) llamafunc -> idfunc . LPAREN funcargs RPAREN

    LPAREN          shift and go to state 95


state 43

    (28) leftparen -> LPAREN .

    LPAREN          reduce using rule 28 (leftparen -> LPAREN .)
    ID              reduce using rule 28 (leftparen -> LPAREN .)
    CTEINT          reduce using rule 28 (leftparen -> LPAREN .)
    CTEFLOAT        reduce using rule 28 (leftparen -> LPAREN .)
    CTECHAR         reduce using rule 28 (leftparen -> LPAREN .)
    CTESTRING       reduce using rule 28 (leftparen -> LPAREN .)
    TRUE            reduce using rule 28 (leftparen -> LPAREN .)
    FALSE           reduce using rule 28 (leftparen -> LPAREN .)


state 44

    (109) ctechar -> CTECHAR .

    TIMES           reduce using rule 109 (ctechar -> CTECHAR .)
    DIVIDE          reduce using rule 109 (ctechar -> CTECHAR .)
    PLUS            reduce using rule 109 (ctechar -> CTECHAR .)
    MINUS           reduce using rule 109 (ctechar -> CTECHAR .)
    MORETHAN        reduce using rule 109 (ctechar -> CTECHAR .)
    LESSTHAN        reduce using rule 109 (ctechar -> CTECHAR .)
    NOTEQUAL        reduce using rule 109 (ctechar -> CTECHAR .)
    ISEQUALTO       reduce using rule 109 (ctechar -> CTECHAR .)
    MORETHANEQUAL   reduce using rule 109 (ctechar -> CTECHAR .)
    LESSTHANEQUAL   reduce using rule 109 (ctechar -> CTECHAR .)
    AND             reduce using rule 109 (ctechar -> CTECHAR .)
    OR              reduce using rule 109 (ctechar -> CTECHAR .)
    COMMA           reduce using rule 109 (ctechar -> CTECHAR .)
    SEMICOLON       reduce using rule 109 (ctechar -> CTECHAR .)
    RSQBRACKET      reduce using rule 109 (ctechar -> CTECHAR .)
    RPAREN          reduce using rule 109 (ctechar -> CTECHAR .)


state 45

    (112) ctebool -> FALSE .

    TIMES           reduce using rule 112 (ctebool -> FALSE .)
    DIVIDE          reduce using rule 112 (ctebool -> FALSE .)
    PLUS            reduce using rule 112 (ctebool -> FALSE .)
    MINUS           reduce using rule 112 (ctebool -> FALSE .)
    MORETHAN        reduce using rule 112 (ctebool -> FALSE .)
    LESSTHAN        reduce using rule 112 (ctebool -> FALSE .)
    NOTEQUAL        reduce using rule 112 (ctebool -> FALSE .)
    ISEQUALTO       reduce using rule 112 (ctebool -> FALSE .)
    MORETHANEQUAL   reduce using rule 112 (ctebool -> FALSE .)
    LESSTHANEQUAL   reduce using rule 112 (ctebool -> FALSE .)
    AND             reduce using rule 112 (ctebool -> FALSE .)
    OR              reduce using rule 112 (ctebool -> FALSE .)
    COMMA           reduce using rule 112 (ctebool -> FALSE .)
    RSQBRACKET      reduce using rule 112 (ctebool -> FALSE .)
    SEMICOLON       reduce using rule 112 (ctebool -> FALSE .)
    RPAREN          reduce using rule 112 (ctebool -> FALSE .)


state 46

    (25) factor -> varcte .

    TIMES           reduce using rule 25 (factor -> varcte .)
    DIVIDE          reduce using rule 25 (factor -> varcte .)
    PLUS            reduce using rule 25 (factor -> varcte .)
    MINUS           reduce using rule 25 (factor -> varcte .)
    MORETHAN        reduce using rule 25 (factor -> varcte .)
    LESSTHAN        reduce using rule 25 (factor -> varcte .)
    NOTEQUAL        reduce using rule 25 (factor -> varcte .)
    ISEQUALTO       reduce using rule 25 (factor -> varcte .)
    MORETHANEQUAL   reduce using rule 25 (factor -> varcte .)
    LESSTHANEQUAL   reduce using rule 25 (factor -> varcte .)
    AND             reduce using rule 25 (factor -> varcte .)
    OR              reduce using rule 25 (factor -> varcte .)
    SEMICOLON       reduce using rule 25 (factor -> varcte .)
    RPAREN          reduce using rule 25 (factor -> varcte .)
    COMMA           reduce using rule 25 (factor -> varcte .)
    RSQBRACKET      reduce using rule 25 (factor -> varcte .)


state 47

    (110) ctestring -> CTESTRING .

    TIMES           reduce using rule 110 (ctestring -> CTESTRING .)
    DIVIDE          reduce using rule 110 (ctestring -> CTESTRING .)
    PLUS            reduce using rule 110 (ctestring -> CTESTRING .)
    MINUS           reduce using rule 110 (ctestring -> CTESTRING .)
    MORETHAN        reduce using rule 110 (ctestring -> CTESTRING .)
    LESSTHAN        reduce using rule 110 (ctestring -> CTESTRING .)
    NOTEQUAL        reduce using rule 110 (ctestring -> CTESTRING .)
    ISEQUALTO       reduce using rule 110 (ctestring -> CTESTRING .)
    MORETHANEQUAL   reduce using rule 110 (ctestring -> CTESTRING .)
    LESSTHANEQUAL   reduce using rule 110 (ctestring -> CTESTRING .)
    AND             reduce using rule 110 (ctestring -> CTESTRING .)
    OR              reduce using rule 110 (ctestring -> CTESTRING .)
    RPAREN          reduce using rule 110 (ctestring -> CTESTRING .)
    COMMA           reduce using rule 110 (ctestring -> CTESTRING .)
    SEMICOLON       reduce using rule 110 (ctestring -> CTESTRING .)
    RSQBRACKET      reduce using rule 110 (ctestring -> CTESTRING .)


state 48

    (33) exp -> termino . masexp
    (34) masexp -> . addQPPM exp
    (35) masexp -> . empty
    (36) addQPPM -> . PLUS
    (37) addQPPM -> . MINUS
    (113) empty -> .

    PLUS            shift and go to state 97
    MINUS           shift and go to state 98
    MORETHAN        reduce using rule 113 (empty -> .)
    LESSTHAN        reduce using rule 113 (empty -> .)
    NOTEQUAL        reduce using rule 113 (empty -> .)
    ISEQUALTO       reduce using rule 113 (empty -> .)
    MORETHANEQUAL   reduce using rule 113 (empty -> .)
    LESSTHANEQUAL   reduce using rule 113 (empty -> .)
    AND             reduce using rule 113 (empty -> .)
    OR              reduce using rule 113 (empty -> .)
    COMMA           reduce using rule 113 (empty -> .)
    SEMICOLON       reduce using rule 113 (empty -> .)
    RPAREN          reduce using rule 113 (empty -> .)
    RSQBRACKET      reduce using rule 113 (empty -> .)

    empty                          shift and go to state 99
    masexp                         shift and go to state 96
    addQPPM                        shift and go to state 100

state 49

    (106) varcte -> ctebool .

    TIMES           reduce using rule 106 (varcte -> ctebool .)
    DIVIDE          reduce using rule 106 (varcte -> ctebool .)
    PLUS            reduce using rule 106 (varcte -> ctebool .)
    MINUS           reduce using rule 106 (varcte -> ctebool .)
    MORETHAN        reduce using rule 106 (varcte -> ctebool .)
    LESSTHAN        reduce using rule 106 (varcte -> ctebool .)
    NOTEQUAL        reduce using rule 106 (varcte -> ctebool .)
    ISEQUALTO       reduce using rule 106 (varcte -> ctebool .)
    MORETHANEQUAL   reduce using rule 106 (varcte -> ctebool .)
    LESSTHANEQUAL   reduce using rule 106 (varcte -> ctebool .)
    AND             reduce using rule 106 (varcte -> ctebool .)
    OR              reduce using rule 106 (varcte -> ctebool .)
    COMMA           reduce using rule 106 (varcte -> ctebool .)
    SEMICOLON       reduce using rule 106 (varcte -> ctebool .)
    RPAREN          reduce using rule 106 (varcte -> ctebool .)
    RSQBRACKET      reduce using rule 106 (varcte -> ctebool .)


state 50

    (45) termino -> factor . masterminos
    (48) masterminos -> . addQTD termino
    (49) masterminos -> . empty
    (46) addQTD -> . TIMES
    (47) addQTD -> . DIVIDE
    (113) empty -> .

    TIMES           shift and go to state 103
    DIVIDE          shift and go to state 102
    PLUS            reduce using rule 113 (empty -> .)
    MINUS           reduce using rule 113 (empty -> .)
    MORETHAN        reduce using rule 113 (empty -> .)
    LESSTHAN        reduce using rule 113 (empty -> .)
    NOTEQUAL        reduce using rule 113 (empty -> .)
    ISEQUALTO       reduce using rule 113 (empty -> .)
    MORETHANEQUAL   reduce using rule 113 (empty -> .)
    LESSTHANEQUAL   reduce using rule 113 (empty -> .)
    AND             reduce using rule 113 (empty -> .)
    OR              reduce using rule 113 (empty -> .)
    COMMA           reduce using rule 113 (empty -> .)
    SEMICOLON       reduce using rule 113 (empty -> .)
    RPAREN          reduce using rule 113 (empty -> .)
    RSQBRACKET      reduce using rule 113 (empty -> .)

    empty                          shift and go to state 105
    masterminos                    shift and go to state 104
    addQTD                         shift and go to state 101

state 51

    (27) factor -> llamafunc .

    TIMES           reduce using rule 27 (factor -> llamafunc .)
    DIVIDE          reduce using rule 27 (factor -> llamafunc .)
    PLUS            reduce using rule 27 (factor -> llamafunc .)
    MINUS           reduce using rule 27 (factor -> llamafunc .)
    MORETHAN        reduce using rule 27 (factor -> llamafunc .)
    LESSTHAN        reduce using rule 27 (factor -> llamafunc .)
    NOTEQUAL        reduce using rule 27 (factor -> llamafunc .)
    ISEQUALTO       reduce using rule 27 (factor -> llamafunc .)
    MORETHANEQUAL   reduce using rule 27 (factor -> llamafunc .)
    LESSTHANEQUAL   reduce using rule 27 (factor -> llamafunc .)
    AND             reduce using rule 27 (factor -> llamafunc .)
    OR              reduce using rule 27 (factor -> llamafunc .)
    SEMICOLON       reduce using rule 27 (factor -> llamafunc .)
    RPAREN          reduce using rule 27 (factor -> llamafunc .)
    COMMA           reduce using rule 27 (factor -> llamafunc .)
    RSQBRACKET      reduce using rule 27 (factor -> llamafunc .)


state 52

    (111) ctebool -> TRUE .

    TIMES           reduce using rule 111 (ctebool -> TRUE .)
    DIVIDE          reduce using rule 111 (ctebool -> TRUE .)
    PLUS            reduce using rule 111 (ctebool -> TRUE .)
    MINUS           reduce using rule 111 (ctebool -> TRUE .)
    MORETHAN        reduce using rule 111 (ctebool -> TRUE .)
    LESSTHAN        reduce using rule 111 (ctebool -> TRUE .)
    NOTEQUAL        reduce using rule 111 (ctebool -> TRUE .)
    ISEQUALTO       reduce using rule 111 (ctebool -> TRUE .)
    MORETHANEQUAL   reduce using rule 111 (ctebool -> TRUE .)
    LESSTHANEQUAL   reduce using rule 111 (ctebool -> TRUE .)
    AND             reduce using rule 111 (ctebool -> TRUE .)
    OR              reduce using rule 111 (ctebool -> TRUE .)
    COMMA           reduce using rule 111 (ctebool -> TRUE .)
    RSQBRACKET      reduce using rule 111 (ctebool -> TRUE .)
    SEMICOLON       reduce using rule 111 (ctebool -> TRUE .)
    RPAREN          reduce using rule 111 (ctebool -> TRUE .)


state 53

    (26) factor -> varid .

    TIMES           reduce using rule 26 (factor -> varid .)
    DIVIDE          reduce using rule 26 (factor -> varid .)
    PLUS            reduce using rule 26 (factor -> varid .)
    MINUS           reduce using rule 26 (factor -> varid .)
    MORETHAN        reduce using rule 26 (factor -> varid .)
    LESSTHAN        reduce using rule 26 (factor -> varid .)
    NOTEQUAL        reduce using rule 26 (factor -> varid .)
    ISEQUALTO       reduce using rule 26 (factor -> varid .)
    MORETHANEQUAL   reduce using rule 26 (factor -> varid .)
    LESSTHANEQUAL   reduce using rule 26 (factor -> varid .)
    AND             reduce using rule 26 (factor -> varid .)
    OR              reduce using rule 26 (factor -> varid .)
    SEMICOLON       reduce using rule 26 (factor -> varid .)
    RPAREN          reduce using rule 26 (factor -> varid .)
    COMMA           reduce using rule 26 (factor -> varid .)
    RSQBRACKET      reduce using rule 26 (factor -> varid .)


state 54

    (30) varid -> ID . arr
    (70) idfunc -> ID .
    (31) arr -> . LSQBRACKET RSQBRACKET
    (32) arr -> . empty
    (113) empty -> .

    LPAREN          reduce using rule 70 (idfunc -> ID .)
    LSQBRACKET      shift and go to state 107
    TIMES           reduce using rule 113 (empty -> .)
    DIVIDE          reduce using rule 113 (empty -> .)
    PLUS            reduce using rule 113 (empty -> .)
    MINUS           reduce using rule 113 (empty -> .)
    MORETHAN        reduce using rule 113 (empty -> .)
    LESSTHAN        reduce using rule 113 (empty -> .)
    NOTEQUAL        reduce using rule 113 (empty -> .)
    ISEQUALTO       reduce using rule 113 (empty -> .)
    MORETHANEQUAL   reduce using rule 113 (empty -> .)
    LESSTHANEQUAL   reduce using rule 113 (empty -> .)
    AND             reduce using rule 113 (empty -> .)
    OR              reduce using rule 113 (empty -> .)
    COMMA           reduce using rule 113 (empty -> .)
    SEMICOLON       reduce using rule 113 (empty -> .)
    RPAREN          reduce using rule 113 (empty -> .)
    RSQBRACKET      reduce using rule 113 (empty -> .)

    empty                          shift and go to state 106
    arr                            shift and go to state 108

state 55

    (40) expresion -> expcomp . masexpresion
    (43) masexpresion -> . addQPAO expresion
    (44) masexpresion -> . empty
    (41) addQPAO -> . AND
    (42) addQPAO -> . OR
    (113) empty -> .

    AND             shift and go to state 113
    OR              shift and go to state 109
    COMMA           reduce using rule 113 (empty -> .)
    SEMICOLON       reduce using rule 113 (empty -> .)
    RPAREN          reduce using rule 113 (empty -> .)
    RSQBRACKET      reduce using rule 113 (empty -> .)

    empty                          shift and go to state 112
    masexpresion                   shift and go to state 110
    addQPAO                        shift and go to state 111

state 56

    (24) factor -> leftparen . expresion rightparen
    (40) expresion -> . expcomp masexpresion
    (50) expcomp -> . exp expcompcontinuo
    (33) exp -> . termino masexp
    (45) termino -> . factor masterminos
    (24) factor -> . leftparen expresion rightparen
    (25) factor -> . varcte
    (26) factor -> . varid
    (27) factor -> . llamafunc
    (28) leftparen -> . LPAREN
    (102) varcte -> . cteint
    (103) varcte -> . ctefloat
    (104) varcte -> . ctechar
    (105) varcte -> . ctestring
    (106) varcte -> . ctebool
    (30) varid -> . ID arr
    (69) llamafunc -> . idfunc LPAREN funcargs RPAREN
    (107) cteint -> . CTEINT
    (108) ctefloat -> . CTEFLOAT
    (109) ctechar -> . CTECHAR
    (110) ctestring -> . CTESTRING
    (111) ctebool -> . TRUE
    (112) ctebool -> . FALSE
    (70) idfunc -> . ID

    LPAREN          shift and go to state 43
    ID              shift and go to state 54
    CTEINT          shift and go to state 59
    CTEFLOAT        shift and go to state 39
    CTECHAR         shift and go to state 44
    CTESTRING       shift and go to state 47
    TRUE            shift and go to state 52
    FALSE           shift and go to state 45

    ctefloat                       shift and go to state 40
    exp                            shift and go to state 41
    idfunc                         shift and go to state 42
    varcte                         shift and go to state 46
    termino                        shift and go to state 48
    ctebool                        shift and go to state 49
    factor                         shift and go to state 50
    llamafunc                      shift and go to state 51
    varid                          shift and go to state 53
    expcomp                        shift and go to state 55
    leftparen                      shift and go to state 56
    expresion                      shift and go to state 114
    ctestring                      shift and go to state 58
    cteint                         shift and go to state 60
    ctechar                        shift and go to state 61

state 57

    (81) initvar -> ID EQUALS expresion .

    COMMA           reduce using rule 81 (initvar -> ID EQUALS expresion .)
    SEMICOLON       reduce using rule 81 (initvar -> ID EQUALS expresion .)


state 58

    (105) varcte -> ctestring .

    TIMES           reduce using rule 105 (varcte -> ctestring .)
    DIVIDE          reduce using rule 105 (varcte -> ctestring .)
    PLUS            reduce using rule 105 (varcte -> ctestring .)
    MINUS           reduce using rule 105 (varcte -> ctestring .)
    MORETHAN        reduce using rule 105 (varcte -> ctestring .)
    LESSTHAN        reduce using rule 105 (varcte -> ctestring .)
    NOTEQUAL        reduce using rule 105 (varcte -> ctestring .)
    ISEQUALTO       reduce using rule 105 (varcte -> ctestring .)
    MORETHANEQUAL   reduce using rule 105 (varcte -> ctestring .)
    LESSTHANEQUAL   reduce using rule 105 (varcte -> ctestring .)
    AND             reduce using rule 105 (varcte -> ctestring .)
    OR              reduce using rule 105 (varcte -> ctestring .)
    COMMA           reduce using rule 105 (varcte -> ctestring .)
    SEMICOLON       reduce using rule 105 (varcte -> ctestring .)
    RPAREN          reduce using rule 105 (varcte -> ctestring .)
    RSQBRACKET      reduce using rule 105 (varcte -> ctestring .)


state 59

    (107) cteint -> CTEINT .

    TIMES           reduce using rule 107 (cteint -> CTEINT .)
    DIVIDE          reduce using rule 107 (cteint -> CTEINT .)
    PLUS            reduce using rule 107 (cteint -> CTEINT .)
    MINUS           reduce using rule 107 (cteint -> CTEINT .)
    MORETHAN        reduce using rule 107 (cteint -> CTEINT .)
    LESSTHAN        reduce using rule 107 (cteint -> CTEINT .)
    NOTEQUAL        reduce using rule 107 (cteint -> CTEINT .)
    ISEQUALTO       reduce using rule 107 (cteint -> CTEINT .)
    MORETHANEQUAL   reduce using rule 107 (cteint -> CTEINT .)
    LESSTHANEQUAL   reduce using rule 107 (cteint -> CTEINT .)
    AND             reduce using rule 107 (cteint -> CTEINT .)
    OR              reduce using rule 107 (cteint -> CTEINT .)
    RPAREN          reduce using rule 107 (cteint -> CTEINT .)
    SEMICOLON       reduce using rule 107 (cteint -> CTEINT .)
    COMMA           reduce using rule 107 (cteint -> CTEINT .)
    RSQBRACKET      reduce using rule 107 (cteint -> CTEINT .)


state 60

    (102) varcte -> cteint .

    TIMES           reduce using rule 102 (varcte -> cteint .)
    DIVIDE          reduce using rule 102 (varcte -> cteint .)
    PLUS            reduce using rule 102 (varcte -> cteint .)
    MINUS           reduce using rule 102 (varcte -> cteint .)
    MORETHAN        reduce using rule 102 (varcte -> cteint .)
    LESSTHAN        reduce using rule 102 (varcte -> cteint .)
    NOTEQUAL        reduce using rule 102 (varcte -> cteint .)
    ISEQUALTO       reduce using rule 102 (varcte -> cteint .)
    MORETHANEQUAL   reduce using rule 102 (varcte -> cteint .)
    LESSTHANEQUAL   reduce using rule 102 (varcte -> cteint .)
    AND             reduce using rule 102 (varcte -> cteint .)
    OR              reduce using rule 102 (varcte -> cteint .)
    COMMA           reduce using rule 102 (varcte -> cteint .)
    SEMICOLON       reduce using rule 102 (varcte -> cteint .)
    RPAREN          reduce using rule 102 (varcte -> cteint .)
    RSQBRACKET      reduce using rule 102 (varcte -> cteint .)


state 61

    (104) varcte -> ctechar .

    TIMES           reduce using rule 104 (varcte -> ctechar .)
    DIVIDE          reduce using rule 104 (varcte -> ctechar .)
    PLUS            reduce using rule 104 (varcte -> ctechar .)
    MINUS           reduce using rule 104 (varcte -> ctechar .)
    MORETHAN        reduce using rule 104 (varcte -> ctechar .)
    LESSTHAN        reduce using rule 104 (varcte -> ctechar .)
    NOTEQUAL        reduce using rule 104 (varcte -> ctechar .)
    ISEQUALTO       reduce using rule 104 (varcte -> ctechar .)
    MORETHANEQUAL   reduce using rule 104 (varcte -> ctechar .)
    LESSTHANEQUAL   reduce using rule 104 (varcte -> ctechar .)
    AND             reduce using rule 104 (varcte -> ctechar .)
    OR              reduce using rule 104 (varcte -> ctechar .)
    COMMA           reduce using rule 104 (varcte -> ctechar .)
    SEMICOLON       reduce using rule 104 (varcte -> ctechar .)
    RPAREN          reduce using rule 104 (varcte -> ctechar .)
    RSQBRACKET      reduce using rule 104 (varcte -> ctechar .)


state 62

    (83) masid -> COMMA listaid .

    SEMICOLON       reduce using rule 83 (masid -> COMMA listaid .)


state 63

    (85) funcs -> FUNCTION funcaux LPAREN args . masargs RPAREN bloquefunc funcs
    (94) masargs -> . COMMA args masargs
    (95) masargs -> . empty
    (113) empty -> .

    COMMA           shift and go to state 115
    RPAREN          reduce using rule 113 (empty -> .)

    masargs                        shift and go to state 116
    empty                          shift and go to state 117

state 64

    (86) funcs -> FUNCTION funcaux LPAREN RPAREN . bloquefunc funcs
    (88) bloquefunc -> . LBRACKET masestatuto retorno RBRACKET

    LBRACKET        shift and go to state 118

    bloquefunc                     shift and go to state 119

state 65

    (92) args -> tipo . ID

    ID              shift and go to state 120


state 66

    (93) args -> empty .

    COMMA           reduce using rule 93 (args -> empty .)
    RPAREN          reduce using rule 93 (args -> empty .)


state 67

    (76) masestatuto -> estatuto . masestatuto
    (76) masestatuto -> . estatuto masestatuto
    (77) masestatuto -> . empty
    (59) estatuto -> . asignacion
    (60) estatuto -> . condicion
    (61) estatuto -> . ciclo
    (62) estatuto -> . escritura
    (63) estatuto -> . lectura
    (64) estatuto -> . vars
    (65) estatuto -> . llamafunc SEMICOLON
    (66) estatuto -> . COMMENT
    (67) estatuto -> . CPPCOMMENT
    (113) empty -> .
    (22) asignacion -> . ID EQUALS expresion SEMICOLON
    (23) asignacion -> . ID LSQBRACKET RSQBRACKET EQUALS LSQBRACKET expresion comaexpresion RSQBRACKET SEMICOLON
    (5) condicion -> . IF LPAREN expresion RPAREN gotoF estatutobloque masbloque
    (13) ciclo -> . while LPAREN expresion RPAREN gotoF estatutobloque goto
    (15) escritura -> . print LPAREN listaprint RPAREN SEMICOLON
    (68) lectura -> . READ LPAREN ID RPAREN SEMICOLON
    (78) vars -> . VAR tipo listaid SEMICOLON vars
    (79) vars -> . empty
    (69) llamafunc -> . idfunc LPAREN funcargs RPAREN
    (14) while -> . WHILE
    (16) print -> . PRINT
    (70) idfunc -> . ID

  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for CPPCOMMENT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
    COMMENT         shift and go to state 78
    CPPCOMMENT      shift and go to state 80
    RBRACKET        reduce using rule 113 (empty -> .)
    RETURN          reduce using rule 113 (empty -> .)
    ID              shift and go to state 85
    IF              shift and go to state 70
    READ            shift and go to state 69
    VAR             shift and go to state 8
    WHILE           shift and go to state 74
    PRINT           shift and go to state 68

  ! COMMENT         [ reduce using rule 113 (empty -> .) ]
  ! CPPCOMMENT      [ reduce using rule 113 (empty -> .) ]
  ! ID              [ reduce using rule 113 (empty -> .) ]
  ! IF              [ reduce using rule 113 (empty -> .) ]
  ! READ            [ reduce using rule 113 (empty -> .) ]
  ! VAR             [ reduce using rule 113 (empty -> .) ]
  ! WHILE           [ reduce using rule 113 (empty -> .) ]
  ! PRINT           [ reduce using rule 113 (empty -> .) ]

    estatuto                       shift and go to state 67
    idfunc                         shift and go to state 42
    asignacion                     shift and go to state 71
    condicion                      shift and go to state 72
    escritura                      shift and go to state 73
    empty                          shift and go to state 77
    llamafunc                      shift and go to state 75
    vars                           shift and go to state 76
    print                          shift and go to state 81
    ciclo                          shift and go to state 79
    masestatuto                    shift and go to state 121
    while                          shift and go to state 83
    lectura                        shift and go to state 84

state 68

    (16) print -> PRINT .

    LPAREN          reduce using rule 16 (print -> PRINT .)


state 69

    (68) lectura -> READ . LPAREN ID RPAREN SEMICOLON

    LPAREN          shift and go to state 122


state 70

    (5) condicion -> IF . LPAREN expresion RPAREN gotoF estatutobloque masbloque

    LPAREN          shift and go to state 123


state 71

    (59) estatuto -> asignacion .

    ELSE            reduce using rule 59 (estatuto -> asignacion .)
    COMMENT         reduce using rule 59 (estatuto -> asignacion .)
    CPPCOMMENT      reduce using rule 59 (estatuto -> asignacion .)
    ID              reduce using rule 59 (estatuto -> asignacion .)
    IF              reduce using rule 59 (estatuto -> asignacion .)
    READ            reduce using rule 59 (estatuto -> asignacion .)
    VAR             reduce using rule 59 (estatuto -> asignacion .)
    WHILE           reduce using rule 59 (estatuto -> asignacion .)
    PRINT           reduce using rule 59 (estatuto -> asignacion .)
    RBRACKET        reduce using rule 59 (estatuto -> asignacion .)
    RETURN          reduce using rule 59 (estatuto -> asignacion .)


state 72

    (60) estatuto -> condicion .

    ELSE            reduce using rule 60 (estatuto -> condicion .)
    COMMENT         reduce using rule 60 (estatuto -> condicion .)
    CPPCOMMENT      reduce using rule 60 (estatuto -> condicion .)
    ID              reduce using rule 60 (estatuto -> condicion .)
    IF              reduce using rule 60 (estatuto -> condicion .)
    READ            reduce using rule 60 (estatuto -> condicion .)
    VAR             reduce using rule 60 (estatuto -> condicion .)
    WHILE           reduce using rule 60 (estatuto -> condicion .)
    PRINT           reduce using rule 60 (estatuto -> condicion .)
    RBRACKET        reduce using rule 60 (estatuto -> condicion .)
    RETURN          reduce using rule 60 (estatuto -> condicion .)


state 73

    (62) estatuto -> escritura .

    ELSE            reduce using rule 62 (estatuto -> escritura .)
    COMMENT         reduce using rule 62 (estatuto -> escritura .)
    CPPCOMMENT      reduce using rule 62 (estatuto -> escritura .)
    ID              reduce using rule 62 (estatuto -> escritura .)
    IF              reduce using rule 62 (estatuto -> escritura .)
    READ            reduce using rule 62 (estatuto -> escritura .)
    VAR             reduce using rule 62 (estatuto -> escritura .)
    WHILE           reduce using rule 62 (estatuto -> escritura .)
    PRINT           reduce using rule 62 (estatuto -> escritura .)
    RBRACKET        reduce using rule 62 (estatuto -> escritura .)
    RETURN          reduce using rule 62 (estatuto -> escritura .)


state 74

    (14) while -> WHILE .

    LPAREN          reduce using rule 14 (while -> WHILE .)


state 75

    (65) estatuto -> llamafunc . SEMICOLON

    SEMICOLON       shift and go to state 124


state 76

    (64) estatuto -> vars .

    ELSE            reduce using rule 64 (estatuto -> vars .)
    COMMENT         reduce using rule 64 (estatuto -> vars .)
    CPPCOMMENT      reduce using rule 64 (estatuto -> vars .)
    ID              reduce using rule 64 (estatuto -> vars .)
    IF              reduce using rule 64 (estatuto -> vars .)
    READ            reduce using rule 64 (estatuto -> vars .)
    VAR             reduce using rule 64 (estatuto -> vars .)
    WHILE           reduce using rule 64 (estatuto -> vars .)
    PRINT           reduce using rule 64 (estatuto -> vars .)
    RBRACKET        reduce using rule 64 (estatuto -> vars .)
    RETURN          reduce using rule 64 (estatuto -> vars .)


state 77

    (77) masestatuto -> empty .
    (79) vars -> empty .

  ! reduce/reduce conflict for RBRACKET resolved using rule 77 (masestatuto -> empty .)
  ! reduce/reduce conflict for RETURN resolved using rule 77 (masestatuto -> empty .)
    RETURN          reduce using rule 77 (masestatuto -> empty .)
    RBRACKET        reduce using rule 77 (masestatuto -> empty .)
    COMMENT         reduce using rule 79 (vars -> empty .)
    CPPCOMMENT      reduce using rule 79 (vars -> empty .)
    ID              reduce using rule 79 (vars -> empty .)
    IF              reduce using rule 79 (vars -> empty .)
    READ            reduce using rule 79 (vars -> empty .)
    VAR             reduce using rule 79 (vars -> empty .)
    WHILE           reduce using rule 79 (vars -> empty .)
    PRINT           reduce using rule 79 (vars -> empty .)

  ! RBRACKET        [ reduce using rule 79 (vars -> empty .) ]
  ! RETURN          [ reduce using rule 79 (vars -> empty .) ]


state 78

    (66) estatuto -> COMMENT .

    ELSE            reduce using rule 66 (estatuto -> COMMENT .)
    COMMENT         reduce using rule 66 (estatuto -> COMMENT .)
    CPPCOMMENT      reduce using rule 66 (estatuto -> COMMENT .)
    ID              reduce using rule 66 (estatuto -> COMMENT .)
    IF              reduce using rule 66 (estatuto -> COMMENT .)
    READ            reduce using rule 66 (estatuto -> COMMENT .)
    VAR             reduce using rule 66 (estatuto -> COMMENT .)
    WHILE           reduce using rule 66 (estatuto -> COMMENT .)
    PRINT           reduce using rule 66 (estatuto -> COMMENT .)
    RBRACKET        reduce using rule 66 (estatuto -> COMMENT .)
    RETURN          reduce using rule 66 (estatuto -> COMMENT .)


state 79

    (61) estatuto -> ciclo .

    ELSE            reduce using rule 61 (estatuto -> ciclo .)
    COMMENT         reduce using rule 61 (estatuto -> ciclo .)
    CPPCOMMENT      reduce using rule 61 (estatuto -> ciclo .)
    ID              reduce using rule 61 (estatuto -> ciclo .)
    IF              reduce using rule 61 (estatuto -> ciclo .)
    READ            reduce using rule 61 (estatuto -> ciclo .)
    VAR             reduce using rule 61 (estatuto -> ciclo .)
    WHILE           reduce using rule 61 (estatuto -> ciclo .)
    PRINT           reduce using rule 61 (estatuto -> ciclo .)
    RBRACKET        reduce using rule 61 (estatuto -> ciclo .)
    RETURN          reduce using rule 61 (estatuto -> ciclo .)


state 80

    (67) estatuto -> CPPCOMMENT .

    ELSE            reduce using rule 67 (estatuto -> CPPCOMMENT .)
    COMMENT         reduce using rule 67 (estatuto -> CPPCOMMENT .)
    CPPCOMMENT      reduce using rule 67 (estatuto -> CPPCOMMENT .)
    ID              reduce using rule 67 (estatuto -> CPPCOMMENT .)
    IF              reduce using rule 67 (estatuto -> CPPCOMMENT .)
    READ            reduce using rule 67 (estatuto -> CPPCOMMENT .)
    VAR             reduce using rule 67 (estatuto -> CPPCOMMENT .)
    WHILE           reduce using rule 67 (estatuto -> CPPCOMMENT .)
    PRINT           reduce using rule 67 (estatuto -> CPPCOMMENT .)
    RBRACKET        reduce using rule 67 (estatuto -> CPPCOMMENT .)
    RETURN          reduce using rule 67 (estatuto -> CPPCOMMENT .)


state 81

    (15) escritura -> print . LPAREN listaprint RPAREN SEMICOLON

    LPAREN          shift and go to state 125


state 82

    (9) bloque -> LBRACKET masestatuto . RBRACKET

    RBRACKET        shift and go to state 126


state 83

    (13) ciclo -> while . LPAREN expresion RPAREN gotoF estatutobloque goto

    LPAREN          shift and go to state 127


state 84

    (63) estatuto -> lectura .

    ELSE            reduce using rule 63 (estatuto -> lectura .)
    COMMENT         reduce using rule 63 (estatuto -> lectura .)
    CPPCOMMENT      reduce using rule 63 (estatuto -> lectura .)
    ID              reduce using rule 63 (estatuto -> lectura .)
    IF              reduce using rule 63 (estatuto -> lectura .)
    READ            reduce using rule 63 (estatuto -> lectura .)
    VAR             reduce using rule 63 (estatuto -> lectura .)
    WHILE           reduce using rule 63 (estatuto -> lectura .)
    PRINT           reduce using rule 63 (estatuto -> lectura .)
    RBRACKET        reduce using rule 63 (estatuto -> lectura .)
    RETURN          reduce using rule 63 (estatuto -> lectura .)


state 85

    (22) asignacion -> ID . EQUALS expresion SEMICOLON
    (23) asignacion -> ID . LSQBRACKET RSQBRACKET EQUALS LSQBRACKET expresion comaexpresion RSQBRACKET SEMICOLON
    (70) idfunc -> ID .

    EQUALS          shift and go to state 128
    LSQBRACKET      shift and go to state 129
    LPAREN          reduce using rule 70 (idfunc -> ID .)


state 86

    (57) expcompcontinuo -> addQPComp . expcomp
    (50) expcomp -> . exp expcompcontinuo
    (33) exp -> . termino masexp
    (45) termino -> . factor masterminos
    (24) factor -> . leftparen expresion rightparen
    (25) factor -> . varcte
    (26) factor -> . varid
    (27) factor -> . llamafunc
    (28) leftparen -> . LPAREN
    (102) varcte -> . cteint
    (103) varcte -> . ctefloat
    (104) varcte -> . ctechar
    (105) varcte -> . ctestring
    (106) varcte -> . ctebool
    (30) varid -> . ID arr
    (69) llamafunc -> . idfunc LPAREN funcargs RPAREN
    (107) cteint -> . CTEINT
    (108) ctefloat -> . CTEFLOAT
    (109) ctechar -> . CTECHAR
    (110) ctestring -> . CTESTRING
    (111) ctebool -> . TRUE
    (112) ctebool -> . FALSE
    (70) idfunc -> . ID

    LPAREN          shift and go to state 43
    ID              shift and go to state 54
    CTEINT          shift and go to state 59
    CTEFLOAT        shift and go to state 39
    CTECHAR         shift and go to state 44
    CTESTRING       shift and go to state 47
    TRUE            shift and go to state 52
    FALSE           shift and go to state 45

    ctefloat                       shift and go to state 40
    exp                            shift and go to state 41
    idfunc                         shift and go to state 42
    varcte                         shift and go to state 46
    termino                        shift and go to state 48
    ctebool                        shift and go to state 49
    factor                         shift and go to state 50
    llamafunc                      shift and go to state 51
    varid                          shift and go to state 53
    ctechar                        shift and go to state 61
    leftparen                      shift and go to state 56
    ctestring                      shift and go to state 58
    cteint                         shift and go to state 60
    expcomp                        shift and go to state 130

state 87

    (54) addQPComp -> ISEQUALTO .

    LPAREN          reduce using rule 54 (addQPComp -> ISEQUALTO .)
    ID              reduce using rule 54 (addQPComp -> ISEQUALTO .)
    CTEINT          reduce using rule 54 (addQPComp -> ISEQUALTO .)
    CTEFLOAT        reduce using rule 54 (addQPComp -> ISEQUALTO .)
    CTECHAR         reduce using rule 54 (addQPComp -> ISEQUALTO .)
    CTESTRING       reduce using rule 54 (addQPComp -> ISEQUALTO .)
    TRUE            reduce using rule 54 (addQPComp -> ISEQUALTO .)
    FALSE           reduce using rule 54 (addQPComp -> ISEQUALTO .)


state 88

    (56) addQPComp -> LESSTHANEQUAL .

    LPAREN          reduce using rule 56 (addQPComp -> LESSTHANEQUAL .)
    ID              reduce using rule 56 (addQPComp -> LESSTHANEQUAL .)
    CTEINT          reduce using rule 56 (addQPComp -> LESSTHANEQUAL .)
    CTEFLOAT        reduce using rule 56 (addQPComp -> LESSTHANEQUAL .)
    CTECHAR         reduce using rule 56 (addQPComp -> LESSTHANEQUAL .)
    CTESTRING       reduce using rule 56 (addQPComp -> LESSTHANEQUAL .)
    TRUE            reduce using rule 56 (addQPComp -> LESSTHANEQUAL .)
    FALSE           reduce using rule 56 (addQPComp -> LESSTHANEQUAL .)


state 89

    (53) addQPComp -> NOTEQUAL .

    LPAREN          reduce using rule 53 (addQPComp -> NOTEQUAL .)
    ID              reduce using rule 53 (addQPComp -> NOTEQUAL .)
    CTEINT          reduce using rule 53 (addQPComp -> NOTEQUAL .)
    CTEFLOAT        reduce using rule 53 (addQPComp -> NOTEQUAL .)
    CTECHAR         reduce using rule 53 (addQPComp -> NOTEQUAL .)
    CTESTRING       reduce using rule 53 (addQPComp -> NOTEQUAL .)
    TRUE            reduce using rule 53 (addQPComp -> NOTEQUAL .)
    FALSE           reduce using rule 53 (addQPComp -> NOTEQUAL .)


state 90

    (55) addQPComp -> MORETHANEQUAL .

    LPAREN          reduce using rule 55 (addQPComp -> MORETHANEQUAL .)
    ID              reduce using rule 55 (addQPComp -> MORETHANEQUAL .)
    CTEINT          reduce using rule 55 (addQPComp -> MORETHANEQUAL .)
    CTEFLOAT        reduce using rule 55 (addQPComp -> MORETHANEQUAL .)
    CTECHAR         reduce using rule 55 (addQPComp -> MORETHANEQUAL .)
    CTESTRING       reduce using rule 55 (addQPComp -> MORETHANEQUAL .)
    TRUE            reduce using rule 55 (addQPComp -> MORETHANEQUAL .)
    FALSE           reduce using rule 55 (addQPComp -> MORETHANEQUAL .)


state 91

    (52) addQPComp -> LESSTHAN .

    LPAREN          reduce using rule 52 (addQPComp -> LESSTHAN .)
    ID              reduce using rule 52 (addQPComp -> LESSTHAN .)
    CTEINT          reduce using rule 52 (addQPComp -> LESSTHAN .)
    CTEFLOAT        reduce using rule 52 (addQPComp -> LESSTHAN .)
    CTECHAR         reduce using rule 52 (addQPComp -> LESSTHAN .)
    CTESTRING       reduce using rule 52 (addQPComp -> LESSTHAN .)
    TRUE            reduce using rule 52 (addQPComp -> LESSTHAN .)
    FALSE           reduce using rule 52 (addQPComp -> LESSTHAN .)


state 92

    (58) expcompcontinuo -> empty .

    AND             reduce using rule 58 (expcompcontinuo -> empty .)
    OR              reduce using rule 58 (expcompcontinuo -> empty .)
    COMMA           reduce using rule 58 (expcompcontinuo -> empty .)
    SEMICOLON       reduce using rule 58 (expcompcontinuo -> empty .)
    RPAREN          reduce using rule 58 (expcompcontinuo -> empty .)
    RSQBRACKET      reduce using rule 58 (expcompcontinuo -> empty .)


state 93

    (51) addQPComp -> MORETHAN .

    LPAREN          reduce using rule 51 (addQPComp -> MORETHAN .)
    ID              reduce using rule 51 (addQPComp -> MORETHAN .)
    CTEINT          reduce using rule 51 (addQPComp -> MORETHAN .)
    CTEFLOAT        reduce using rule 51 (addQPComp -> MORETHAN .)
    CTECHAR         reduce using rule 51 (addQPComp -> MORETHAN .)
    CTESTRING       reduce using rule 51 (addQPComp -> MORETHAN .)
    TRUE            reduce using rule 51 (addQPComp -> MORETHAN .)
    FALSE           reduce using rule 51 (addQPComp -> MORETHAN .)


state 94

    (50) expcomp -> exp expcompcontinuo .

    AND             reduce using rule 50 (expcomp -> exp expcompcontinuo .)
    OR              reduce using rule 50 (expcomp -> exp expcompcontinuo .)
    COMMA           reduce using rule 50 (expcomp -> exp expcompcontinuo .)
    RSQBRACKET      reduce using rule 50 (expcomp -> exp expcompcontinuo .)
    RPAREN          reduce using rule 50 (expcomp -> exp expcompcontinuo .)
    SEMICOLON       reduce using rule 50 (expcomp -> exp expcompcontinuo .)


state 95

    (69) llamafunc -> idfunc LPAREN . funcargs RPAREN
    (71) funcargs -> . expresion listafuncargs checarparams
    (72) funcargs -> . empty
    (40) expresion -> . expcomp masexpresion
    (113) empty -> .
    (50) expcomp -> . exp expcompcontinuo
    (33) exp -> . termino masexp
    (45) termino -> . factor masterminos
    (24) factor -> . leftparen expresion rightparen
    (25) factor -> . varcte
    (26) factor -> . varid
    (27) factor -> . llamafunc
    (28) leftparen -> . LPAREN
    (102) varcte -> . cteint
    (103) varcte -> . ctefloat
    (104) varcte -> . ctechar
    (105) varcte -> . ctestring
    (106) varcte -> . ctebool
    (30) varid -> . ID arr
    (69) llamafunc -> . idfunc LPAREN funcargs RPAREN
    (107) cteint -> . CTEINT
    (108) ctefloat -> . CTEFLOAT
    (109) ctechar -> . CTECHAR
    (110) ctestring -> . CTESTRING
    (111) ctebool -> . TRUE
    (112) ctebool -> . FALSE
    (70) idfunc -> . ID

    RPAREN          reduce using rule 113 (empty -> .)
    LPAREN          shift and go to state 43
    ID              shift and go to state 54
    CTEINT          shift and go to state 59
    CTEFLOAT        shift and go to state 39
    CTECHAR         shift and go to state 44
    CTESTRING       shift and go to state 47
    TRUE            shift and go to state 52
    FALSE           shift and go to state 45

    funcargs                       shift and go to state 131
    ctefloat                       shift and go to state 40
    exp                            shift and go to state 41
    idfunc                         shift and go to state 42
    varcte                         shift and go to state 46
    termino                        shift and go to state 48
    ctebool                        shift and go to state 49
    empty                          shift and go to state 132
    factor                         shift and go to state 50
    llamafunc                      shift and go to state 51
    varid                          shift and go to state 53
    expcomp                        shift and go to state 55
    leftparen                      shift and go to state 56
    expresion                      shift and go to state 133
    ctestring                      shift and go to state 58
    cteint                         shift and go to state 60
    ctechar                        shift and go to state 61

state 96

    (33) exp -> termino masexp .

    MORETHAN        reduce using rule 33 (exp -> termino masexp .)
    LESSTHAN        reduce using rule 33 (exp -> termino masexp .)
    NOTEQUAL        reduce using rule 33 (exp -> termino masexp .)
    ISEQUALTO       reduce using rule 33 (exp -> termino masexp .)
    MORETHANEQUAL   reduce using rule 33 (exp -> termino masexp .)
    LESSTHANEQUAL   reduce using rule 33 (exp -> termino masexp .)
    AND             reduce using rule 33 (exp -> termino masexp .)
    OR              reduce using rule 33 (exp -> termino masexp .)
    COMMA           reduce using rule 33 (exp -> termino masexp .)
    SEMICOLON       reduce using rule 33 (exp -> termino masexp .)
    RPAREN          reduce using rule 33 (exp -> termino masexp .)
    RSQBRACKET      reduce using rule 33 (exp -> termino masexp .)


state 97

    (36) addQPPM -> PLUS .

    LPAREN          reduce using rule 36 (addQPPM -> PLUS .)
    ID              reduce using rule 36 (addQPPM -> PLUS .)
    CTEINT          reduce using rule 36 (addQPPM -> PLUS .)
    CTEFLOAT        reduce using rule 36 (addQPPM -> PLUS .)
    CTECHAR         reduce using rule 36 (addQPPM -> PLUS .)
    CTESTRING       reduce using rule 36 (addQPPM -> PLUS .)
    TRUE            reduce using rule 36 (addQPPM -> PLUS .)
    FALSE           reduce using rule 36 (addQPPM -> PLUS .)


state 98

    (37) addQPPM -> MINUS .

    LPAREN          reduce using rule 37 (addQPPM -> MINUS .)
    ID              reduce using rule 37 (addQPPM -> MINUS .)
    CTEINT          reduce using rule 37 (addQPPM -> MINUS .)
    CTEFLOAT        reduce using rule 37 (addQPPM -> MINUS .)
    CTECHAR         reduce using rule 37 (addQPPM -> MINUS .)
    CTESTRING       reduce using rule 37 (addQPPM -> MINUS .)
    TRUE            reduce using rule 37 (addQPPM -> MINUS .)
    FALSE           reduce using rule 37 (addQPPM -> MINUS .)


state 99

    (35) masexp -> empty .

    MORETHAN        reduce using rule 35 (masexp -> empty .)
    LESSTHAN        reduce using rule 35 (masexp -> empty .)
    NOTEQUAL        reduce using rule 35 (masexp -> empty .)
    ISEQUALTO       reduce using rule 35 (masexp -> empty .)
    MORETHANEQUAL   reduce using rule 35 (masexp -> empty .)
    LESSTHANEQUAL   reduce using rule 35 (masexp -> empty .)
    AND             reduce using rule 35 (masexp -> empty .)
    OR              reduce using rule 35 (masexp -> empty .)
    COMMA           reduce using rule 35 (masexp -> empty .)
    SEMICOLON       reduce using rule 35 (masexp -> empty .)
    RPAREN          reduce using rule 35 (masexp -> empty .)
    RSQBRACKET      reduce using rule 35 (masexp -> empty .)


state 100

    (34) masexp -> addQPPM . exp
    (33) exp -> . termino masexp
    (45) termino -> . factor masterminos
    (24) factor -> . leftparen expresion rightparen
    (25) factor -> . varcte
    (26) factor -> . varid
    (27) factor -> . llamafunc
    (28) leftparen -> . LPAREN
    (102) varcte -> . cteint
    (103) varcte -> . ctefloat
    (104) varcte -> . ctechar
    (105) varcte -> . ctestring
    (106) varcte -> . ctebool
    (30) varid -> . ID arr
    (69) llamafunc -> . idfunc LPAREN funcargs RPAREN
    (107) cteint -> . CTEINT
    (108) ctefloat -> . CTEFLOAT
    (109) ctechar -> . CTECHAR
    (110) ctestring -> . CTESTRING
    (111) ctebool -> . TRUE
    (112) ctebool -> . FALSE
    (70) idfunc -> . ID

    LPAREN          shift and go to state 43
    ID              shift and go to state 54
    CTEINT          shift and go to state 59
    CTEFLOAT        shift and go to state 39
    CTECHAR         shift and go to state 44
    CTESTRING       shift and go to state 47
    TRUE            shift and go to state 52
    FALSE           shift and go to state 45

    llamafunc                      shift and go to state 51
    ctefloat                       shift and go to state 40
    exp                            shift and go to state 134
    idfunc                         shift and go to state 42
    varid                          shift and go to state 53
    varcte                         shift and go to state 46
    termino                        shift and go to state 48
    factor                         shift and go to state 50
    leftparen                      shift and go to state 56
    ctestring                      shift and go to state 58
    ctebool                        shift and go to state 49
    cteint                         shift and go to state 60
    ctechar                        shift and go to state 61

state 101

    (48) masterminos -> addQTD . termino
    (45) termino -> . factor masterminos
    (24) factor -> . leftparen expresion rightparen
    (25) factor -> . varcte
    (26) factor -> . varid
    (27) factor -> . llamafunc
    (28) leftparen -> . LPAREN
    (102) varcte -> . cteint
    (103) varcte -> . ctefloat
    (104) varcte -> . ctechar
    (105) varcte -> . ctestring
    (106) varcte -> . ctebool
    (30) varid -> . ID arr
    (69) llamafunc -> . idfunc LPAREN funcargs RPAREN
    (107) cteint -> . CTEINT
    (108) ctefloat -> . CTEFLOAT
    (109) ctechar -> . CTECHAR
    (110) ctestring -> . CTESTRING
    (111) ctebool -> . TRUE
    (112) ctebool -> . FALSE
    (70) idfunc -> . ID

    LPAREN          shift and go to state 43
    ID              shift and go to state 54
    CTEINT          shift and go to state 59
    CTEFLOAT        shift and go to state 39
    CTECHAR         shift and go to state 44
    CTESTRING       shift and go to state 47
    TRUE            shift and go to state 52
    FALSE           shift and go to state 45

    llamafunc                      shift and go to state 51
    ctefloat                       shift and go to state 40
    idfunc                         shift and go to state 42
    cteint                         shift and go to state 60
    varid                          shift and go to state 53
    varcte                         shift and go to state 46
    termino                        shift and go to state 135
    ctechar                        shift and go to state 61
    leftparen                      shift and go to state 56
    ctestring                      shift and go to state 58
    factor                         shift and go to state 50
    ctebool                        shift and go to state 49

state 102

    (47) addQTD -> DIVIDE .

    LPAREN          reduce using rule 47 (addQTD -> DIVIDE .)
    ID              reduce using rule 47 (addQTD -> DIVIDE .)
    CTEINT          reduce using rule 47 (addQTD -> DIVIDE .)
    CTEFLOAT        reduce using rule 47 (addQTD -> DIVIDE .)
    CTECHAR         reduce using rule 47 (addQTD -> DIVIDE .)
    CTESTRING       reduce using rule 47 (addQTD -> DIVIDE .)
    TRUE            reduce using rule 47 (addQTD -> DIVIDE .)
    FALSE           reduce using rule 47 (addQTD -> DIVIDE .)


state 103

    (46) addQTD -> TIMES .

    LPAREN          reduce using rule 46 (addQTD -> TIMES .)
    ID              reduce using rule 46 (addQTD -> TIMES .)
    CTEINT          reduce using rule 46 (addQTD -> TIMES .)
    CTEFLOAT        reduce using rule 46 (addQTD -> TIMES .)
    CTECHAR         reduce using rule 46 (addQTD -> TIMES .)
    CTESTRING       reduce using rule 46 (addQTD -> TIMES .)
    TRUE            reduce using rule 46 (addQTD -> TIMES .)
    FALSE           reduce using rule 46 (addQTD -> TIMES .)


state 104

    (45) termino -> factor masterminos .

    PLUS            reduce using rule 45 (termino -> factor masterminos .)
    MINUS           reduce using rule 45 (termino -> factor masterminos .)
    MORETHAN        reduce using rule 45 (termino -> factor masterminos .)
    LESSTHAN        reduce using rule 45 (termino -> factor masterminos .)
    NOTEQUAL        reduce using rule 45 (termino -> factor masterminos .)
    ISEQUALTO       reduce using rule 45 (termino -> factor masterminos .)
    MORETHANEQUAL   reduce using rule 45 (termino -> factor masterminos .)
    LESSTHANEQUAL   reduce using rule 45 (termino -> factor masterminos .)
    AND             reduce using rule 45 (termino -> factor masterminos .)
    OR              reduce using rule 45 (termino -> factor masterminos .)
    COMMA           reduce using rule 45 (termino -> factor masterminos .)
    SEMICOLON       reduce using rule 45 (termino -> factor masterminos .)
    RPAREN          reduce using rule 45 (termino -> factor masterminos .)
    RSQBRACKET      reduce using rule 45 (termino -> factor masterminos .)


state 105

    (49) masterminos -> empty .

    PLUS            reduce using rule 49 (masterminos -> empty .)
    MINUS           reduce using rule 49 (masterminos -> empty .)
    MORETHAN        reduce using rule 49 (masterminos -> empty .)
    LESSTHAN        reduce using rule 49 (masterminos -> empty .)
    NOTEQUAL        reduce using rule 49 (masterminos -> empty .)
    ISEQUALTO       reduce using rule 49 (masterminos -> empty .)
    MORETHANEQUAL   reduce using rule 49 (masterminos -> empty .)
    LESSTHANEQUAL   reduce using rule 49 (masterminos -> empty .)
    AND             reduce using rule 49 (masterminos -> empty .)
    OR              reduce using rule 49 (masterminos -> empty .)
    COMMA           reduce using rule 49 (masterminos -> empty .)
    SEMICOLON       reduce using rule 49 (masterminos -> empty .)
    RPAREN          reduce using rule 49 (masterminos -> empty .)
    RSQBRACKET      reduce using rule 49 (masterminos -> empty .)


state 106

    (32) arr -> empty .

    TIMES           reduce using rule 32 (arr -> empty .)
    DIVIDE          reduce using rule 32 (arr -> empty .)
    PLUS            reduce using rule 32 (arr -> empty .)
    MINUS           reduce using rule 32 (arr -> empty .)
    MORETHAN        reduce using rule 32 (arr -> empty .)
    LESSTHAN        reduce using rule 32 (arr -> empty .)
    NOTEQUAL        reduce using rule 32 (arr -> empty .)
    ISEQUALTO       reduce using rule 32 (arr -> empty .)
    MORETHANEQUAL   reduce using rule 32 (arr -> empty .)
    LESSTHANEQUAL   reduce using rule 32 (arr -> empty .)
    AND             reduce using rule 32 (arr -> empty .)
    OR              reduce using rule 32 (arr -> empty .)
    COMMA           reduce using rule 32 (arr -> empty .)
    SEMICOLON       reduce using rule 32 (arr -> empty .)
    RPAREN          reduce using rule 32 (arr -> empty .)
    RSQBRACKET      reduce using rule 32 (arr -> empty .)


state 107

    (31) arr -> LSQBRACKET . RSQBRACKET

    RSQBRACKET      shift and go to state 136


state 108

    (30) varid -> ID arr .

    TIMES           reduce using rule 30 (varid -> ID arr .)
    DIVIDE          reduce using rule 30 (varid -> ID arr .)
    PLUS            reduce using rule 30 (varid -> ID arr .)
    MINUS           reduce using rule 30 (varid -> ID arr .)
    MORETHAN        reduce using rule 30 (varid -> ID arr .)
    LESSTHAN        reduce using rule 30 (varid -> ID arr .)
    NOTEQUAL        reduce using rule 30 (varid -> ID arr .)
    ISEQUALTO       reduce using rule 30 (varid -> ID arr .)
    MORETHANEQUAL   reduce using rule 30 (varid -> ID arr .)
    LESSTHANEQUAL   reduce using rule 30 (varid -> ID arr .)
    AND             reduce using rule 30 (varid -> ID arr .)
    OR              reduce using rule 30 (varid -> ID arr .)
    COMMA           reduce using rule 30 (varid -> ID arr .)
    SEMICOLON       reduce using rule 30 (varid -> ID arr .)
    RPAREN          reduce using rule 30 (varid -> ID arr .)
    RSQBRACKET      reduce using rule 30 (varid -> ID arr .)


state 109

    (42) addQPAO -> OR .

    LPAREN          reduce using rule 42 (addQPAO -> OR .)
    ID              reduce using rule 42 (addQPAO -> OR .)
    CTEINT          reduce using rule 42 (addQPAO -> OR .)
    CTEFLOAT        reduce using rule 42 (addQPAO -> OR .)
    CTECHAR         reduce using rule 42 (addQPAO -> OR .)
    CTESTRING       reduce using rule 42 (addQPAO -> OR .)
    TRUE            reduce using rule 42 (addQPAO -> OR .)
    FALSE           reduce using rule 42 (addQPAO -> OR .)


state 110

    (40) expresion -> expcomp masexpresion .

    RPAREN          reduce using rule 40 (expresion -> expcomp masexpresion .)
    COMMA           reduce using rule 40 (expresion -> expcomp masexpresion .)
    SEMICOLON       reduce using rule 40 (expresion -> expcomp masexpresion .)
    RSQBRACKET      reduce using rule 40 (expresion -> expcomp masexpresion .)


state 111

    (43) masexpresion -> addQPAO . expresion
    (40) expresion -> . expcomp masexpresion
    (50) expcomp -> . exp expcompcontinuo
    (33) exp -> . termino masexp
    (45) termino -> . factor masterminos
    (24) factor -> . leftparen expresion rightparen
    (25) factor -> . varcte
    (26) factor -> . varid
    (27) factor -> . llamafunc
    (28) leftparen -> . LPAREN
    (102) varcte -> . cteint
    (103) varcte -> . ctefloat
    (104) varcte -> . ctechar
    (105) varcte -> . ctestring
    (106) varcte -> . ctebool
    (30) varid -> . ID arr
    (69) llamafunc -> . idfunc LPAREN funcargs RPAREN
    (107) cteint -> . CTEINT
    (108) ctefloat -> . CTEFLOAT
    (109) ctechar -> . CTECHAR
    (110) ctestring -> . CTESTRING
    (111) ctebool -> . TRUE
    (112) ctebool -> . FALSE
    (70) idfunc -> . ID

    LPAREN          shift and go to state 43
    ID              shift and go to state 54
    CTEINT          shift and go to state 59
    CTEFLOAT        shift and go to state 39
    CTECHAR         shift and go to state 44
    CTESTRING       shift and go to state 47
    TRUE            shift and go to state 52
    FALSE           shift and go to state 45

    ctefloat                       shift and go to state 40
    exp                            shift and go to state 41
    idfunc                         shift and go to state 42
    varcte                         shift and go to state 46
    termino                        shift and go to state 48
    ctebool                        shift and go to state 49
    factor                         shift and go to state 50
    llamafunc                      shift and go to state 51
    varid                          shift and go to state 53
    expcomp                        shift and go to state 55
    leftparen                      shift and go to state 56
    expresion                      shift and go to state 137
    ctestring                      shift and go to state 58
    cteint                         shift and go to state 60
    ctechar                        shift and go to state 61

state 112

    (44) masexpresion -> empty .

    COMMA           reduce using rule 44 (masexpresion -> empty .)
    SEMICOLON       reduce using rule 44 (masexpresion -> empty .)
    RPAREN          reduce using rule 44 (masexpresion -> empty .)
    RSQBRACKET      reduce using rule 44 (masexpresion -> empty .)


state 113

    (41) addQPAO -> AND .

    LPAREN          reduce using rule 41 (addQPAO -> AND .)
    ID              reduce using rule 41 (addQPAO -> AND .)
    CTEINT          reduce using rule 41 (addQPAO -> AND .)
    CTEFLOAT        reduce using rule 41 (addQPAO -> AND .)
    CTECHAR         reduce using rule 41 (addQPAO -> AND .)
    CTESTRING       reduce using rule 41 (addQPAO -> AND .)
    TRUE            reduce using rule 41 (addQPAO -> AND .)
    FALSE           reduce using rule 41 (addQPAO -> AND .)


state 114

    (24) factor -> leftparen expresion . rightparen
    (29) rightparen -> . RPAREN

    RPAREN          shift and go to state 139

    rightparen                     shift and go to state 138

state 115

    (94) masargs -> COMMA . args masargs
    (92) args -> . tipo ID
    (93) args -> . empty
    (96) tipo -> . INT
    (97) tipo -> . FLOAT
    (98) tipo -> . CHAR
    (99) tipo -> . BOOL
    (100) tipo -> . STRING
    (101) tipo -> . VOID
    (113) empty -> .

    INT             shift and go to state 12
    FLOAT           shift and go to state 16
    CHAR            shift and go to state 11
    BOOL            shift and go to state 13
    STRING          shift and go to state 17
    VOID            shift and go to state 15
    COMMA           reduce using rule 113 (empty -> .)
    RPAREN          reduce using rule 113 (empty -> .)

    tipo                           shift and go to state 65
    args                           shift and go to state 140
    empty                          shift and go to state 66

state 116

    (85) funcs -> FUNCTION funcaux LPAREN args masargs . RPAREN bloquefunc funcs

    RPAREN          shift and go to state 141


state 117

    (95) masargs -> empty .

    RPAREN          reduce using rule 95 (masargs -> empty .)


state 118

    (88) bloquefunc -> LBRACKET . masestatuto retorno RBRACKET
    (76) masestatuto -> . estatuto masestatuto
    (77) masestatuto -> . empty
    (59) estatuto -> . asignacion
    (60) estatuto -> . condicion
    (61) estatuto -> . ciclo
    (62) estatuto -> . escritura
    (63) estatuto -> . lectura
    (64) estatuto -> . vars
    (65) estatuto -> . llamafunc SEMICOLON
    (66) estatuto -> . COMMENT
    (67) estatuto -> . CPPCOMMENT
    (113) empty -> .
    (22) asignacion -> . ID EQUALS expresion SEMICOLON
    (23) asignacion -> . ID LSQBRACKET RSQBRACKET EQUALS LSQBRACKET expresion comaexpresion RSQBRACKET SEMICOLON
    (5) condicion -> . IF LPAREN expresion RPAREN gotoF estatutobloque masbloque
    (13) ciclo -> . while LPAREN expresion RPAREN gotoF estatutobloque goto
    (15) escritura -> . print LPAREN listaprint RPAREN SEMICOLON
    (68) lectura -> . READ LPAREN ID RPAREN SEMICOLON
    (78) vars -> . VAR tipo listaid SEMICOLON vars
    (79) vars -> . empty
    (69) llamafunc -> . idfunc LPAREN funcargs RPAREN
    (14) while -> . WHILE
    (16) print -> . PRINT
    (70) idfunc -> . ID

  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for CPPCOMMENT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
    COMMENT         shift and go to state 78
    CPPCOMMENT      shift and go to state 80
    RETURN          reduce using rule 113 (empty -> .)
    ID              shift and go to state 85
    IF              shift and go to state 70
    READ            shift and go to state 69
    VAR             shift and go to state 8
    WHILE           shift and go to state 74
    PRINT           shift and go to state 68

  ! COMMENT         [ reduce using rule 113 (empty -> .) ]
  ! CPPCOMMENT      [ reduce using rule 113 (empty -> .) ]
  ! ID              [ reduce using rule 113 (empty -> .) ]
  ! IF              [ reduce using rule 113 (empty -> .) ]
  ! READ            [ reduce using rule 113 (empty -> .) ]
  ! VAR             [ reduce using rule 113 (empty -> .) ]
  ! WHILE           [ reduce using rule 113 (empty -> .) ]
  ! PRINT           [ reduce using rule 113 (empty -> .) ]

    estatuto                       shift and go to state 67
    idfunc                         shift and go to state 42
    asignacion                     shift and go to state 71
    condicion                      shift and go to state 72
    escritura                      shift and go to state 73
    empty                          shift and go to state 77
    llamafunc                      shift and go to state 75
    vars                           shift and go to state 76
    print                          shift and go to state 81
    ciclo                          shift and go to state 79
    masestatuto                    shift and go to state 142
    while                          shift and go to state 83
    lectura                        shift and go to state 84

state 119

    (86) funcs -> FUNCTION funcaux LPAREN RPAREN bloquefunc . funcs
    (85) funcs -> . FUNCTION funcaux LPAREN args masargs RPAREN bloquefunc funcs
    (86) funcs -> . FUNCTION funcaux LPAREN RPAREN bloquefunc funcs
    (87) funcs -> . empty
    (113) empty -> .

    FUNCTION        shift and go to state 19
    MAIN            reduce using rule 113 (empty -> .)

    empty                          shift and go to state 18
    funcs                          shift and go to state 143

state 120

    (92) args -> tipo ID .

    COMMA           reduce using rule 92 (args -> tipo ID .)
    RPAREN          reduce using rule 92 (args -> tipo ID .)


state 121

    (76) masestatuto -> estatuto masestatuto .

    RETURN          reduce using rule 76 (masestatuto -> estatuto masestatuto .)
    RBRACKET        reduce using rule 76 (masestatuto -> estatuto masestatuto .)


state 122

    (68) lectura -> READ LPAREN . ID RPAREN SEMICOLON

    ID              shift and go to state 144


state 123

    (5) condicion -> IF LPAREN . expresion RPAREN gotoF estatutobloque masbloque
    (40) expresion -> . expcomp masexpresion
    (50) expcomp -> . exp expcompcontinuo
    (33) exp -> . termino masexp
    (45) termino -> . factor masterminos
    (24) factor -> . leftparen expresion rightparen
    (25) factor -> . varcte
    (26) factor -> . varid
    (27) factor -> . llamafunc
    (28) leftparen -> . LPAREN
    (102) varcte -> . cteint
    (103) varcte -> . ctefloat
    (104) varcte -> . ctechar
    (105) varcte -> . ctestring
    (106) varcte -> . ctebool
    (30) varid -> . ID arr
    (69) llamafunc -> . idfunc LPAREN funcargs RPAREN
    (107) cteint -> . CTEINT
    (108) ctefloat -> . CTEFLOAT
    (109) ctechar -> . CTECHAR
    (110) ctestring -> . CTESTRING
    (111) ctebool -> . TRUE
    (112) ctebool -> . FALSE
    (70) idfunc -> . ID

    LPAREN          shift and go to state 43
    ID              shift and go to state 54
    CTEINT          shift and go to state 59
    CTEFLOAT        shift and go to state 39
    CTECHAR         shift and go to state 44
    CTESTRING       shift and go to state 47
    TRUE            shift and go to state 52
    FALSE           shift and go to state 45

    ctefloat                       shift and go to state 40
    exp                            shift and go to state 41
    idfunc                         shift and go to state 42
    varcte                         shift and go to state 46
    termino                        shift and go to state 48
    ctebool                        shift and go to state 49
    factor                         shift and go to state 50
    llamafunc                      shift and go to state 51
    varid                          shift and go to state 53
    expcomp                        shift and go to state 55
    leftparen                      shift and go to state 56
    expresion                      shift and go to state 145
    ctestring                      shift and go to state 58
    cteint                         shift and go to state 60
    ctechar                        shift and go to state 61

state 124

    (65) estatuto -> llamafunc SEMICOLON .

    ELSE            reduce using rule 65 (estatuto -> llamafunc SEMICOLON .)
    COMMENT         reduce using rule 65 (estatuto -> llamafunc SEMICOLON .)
    CPPCOMMENT      reduce using rule 65 (estatuto -> llamafunc SEMICOLON .)
    ID              reduce using rule 65 (estatuto -> llamafunc SEMICOLON .)
    IF              reduce using rule 65 (estatuto -> llamafunc SEMICOLON .)
    READ            reduce using rule 65 (estatuto -> llamafunc SEMICOLON .)
    VAR             reduce using rule 65 (estatuto -> llamafunc SEMICOLON .)
    WHILE           reduce using rule 65 (estatuto -> llamafunc SEMICOLON .)
    PRINT           reduce using rule 65 (estatuto -> llamafunc SEMICOLON .)
    RBRACKET        reduce using rule 65 (estatuto -> llamafunc SEMICOLON .)
    RETURN          reduce using rule 65 (estatuto -> llamafunc SEMICOLON .)


state 125

    (15) escritura -> print LPAREN . listaprint RPAREN SEMICOLON
    (17) listaprint -> . expresion masprint
    (18) listaprint -> . ctestring masprint
    (40) expresion -> . expcomp masexpresion
    (110) ctestring -> . CTESTRING
    (50) expcomp -> . exp expcompcontinuo
    (33) exp -> . termino masexp
    (45) termino -> . factor masterminos
    (24) factor -> . leftparen expresion rightparen
    (25) factor -> . varcte
    (26) factor -> . varid
    (27) factor -> . llamafunc
    (28) leftparen -> . LPAREN
    (102) varcte -> . cteint
    (103) varcte -> . ctefloat
    (104) varcte -> . ctechar
    (105) varcte -> . ctestring
    (106) varcte -> . ctebool
    (30) varid -> . ID arr
    (69) llamafunc -> . idfunc LPAREN funcargs RPAREN
    (107) cteint -> . CTEINT
    (108) ctefloat -> . CTEFLOAT
    (109) ctechar -> . CTECHAR
    (111) ctebool -> . TRUE
    (112) ctebool -> . FALSE
    (70) idfunc -> . ID

    CTESTRING       shift and go to state 47
    LPAREN          shift and go to state 43
    ID              shift and go to state 54
    CTEINT          shift and go to state 59
    CTEFLOAT        shift and go to state 39
    CTECHAR         shift and go to state 44
    TRUE            shift and go to state 52
    FALSE           shift and go to state 45

    ctefloat                       shift and go to state 40
    exp                            shift and go to state 41
    idfunc                         shift and go to state 42
    varcte                         shift and go to state 46
    termino                        shift and go to state 48
    ctebool                        shift and go to state 49
    factor                         shift and go to state 50
    llamafunc                      shift and go to state 51
    ctechar                        shift and go to state 61
    varid                          shift and go to state 53
    leftparen                      shift and go to state 56
    expresion                      shift and go to state 147
    ctestring                      shift and go to state 146
    cteint                         shift and go to state 60
    listaprint                     shift and go to state 148
    expcomp                        shift and go to state 55

state 126

    (9) bloque -> LBRACKET masestatuto RBRACKET .

    ELSE            reduce using rule 9 (bloque -> LBRACKET masestatuto RBRACKET .)
    COMMENT         reduce using rule 9 (bloque -> LBRACKET masestatuto RBRACKET .)
    CPPCOMMENT      reduce using rule 9 (bloque -> LBRACKET masestatuto RBRACKET .)
    ID              reduce using rule 9 (bloque -> LBRACKET masestatuto RBRACKET .)
    IF              reduce using rule 9 (bloque -> LBRACKET masestatuto RBRACKET .)
    READ            reduce using rule 9 (bloque -> LBRACKET masestatuto RBRACKET .)
    VAR             reduce using rule 9 (bloque -> LBRACKET masestatuto RBRACKET .)
    WHILE           reduce using rule 9 (bloque -> LBRACKET masestatuto RBRACKET .)
    PRINT           reduce using rule 9 (bloque -> LBRACKET masestatuto RBRACKET .)
    RBRACKET        reduce using rule 9 (bloque -> LBRACKET masestatuto RBRACKET .)
    RETURN          reduce using rule 9 (bloque -> LBRACKET masestatuto RBRACKET .)
    $end            reduce using rule 9 (bloque -> LBRACKET masestatuto RBRACKET .)


state 127

    (13) ciclo -> while LPAREN . expresion RPAREN gotoF estatutobloque goto
    (40) expresion -> . expcomp masexpresion
    (50) expcomp -> . exp expcompcontinuo
    (33) exp -> . termino masexp
    (45) termino -> . factor masterminos
    (24) factor -> . leftparen expresion rightparen
    (25) factor -> . varcte
    (26) factor -> . varid
    (27) factor -> . llamafunc
    (28) leftparen -> . LPAREN
    (102) varcte -> . cteint
    (103) varcte -> . ctefloat
    (104) varcte -> . ctechar
    (105) varcte -> . ctestring
    (106) varcte -> . ctebool
    (30) varid -> . ID arr
    (69) llamafunc -> . idfunc LPAREN funcargs RPAREN
    (107) cteint -> . CTEINT
    (108) ctefloat -> . CTEFLOAT
    (109) ctechar -> . CTECHAR
    (110) ctestring -> . CTESTRING
    (111) ctebool -> . TRUE
    (112) ctebool -> . FALSE
    (70) idfunc -> . ID

    LPAREN          shift and go to state 43
    ID              shift and go to state 54
    CTEINT          shift and go to state 59
    CTEFLOAT        shift and go to state 39
    CTECHAR         shift and go to state 44
    CTESTRING       shift and go to state 47
    TRUE            shift and go to state 52
    FALSE           shift and go to state 45

    exp                            shift and go to state 41
    idfunc                         shift and go to state 42
    varcte                         shift and go to state 46
    termino                        shift and go to state 48
    ctebool                        shift and go to state 49
    factor                         shift and go to state 50
    llamafunc                      shift and go to state 51
    ctefloat                       shift and go to state 40
    varid                          shift and go to state 53
    expcomp                        shift and go to state 55
    leftparen                      shift and go to state 56
    expresion                      shift and go to state 149
    ctestring                      shift and go to state 58
    cteint                         shift and go to state 60
    ctechar                        shift and go to state 61

state 128

    (22) asignacion -> ID EQUALS . expresion SEMICOLON
    (40) expresion -> . expcomp masexpresion
    (50) expcomp -> . exp expcompcontinuo
    (33) exp -> . termino masexp
    (45) termino -> . factor masterminos
    (24) factor -> . leftparen expresion rightparen
    (25) factor -> . varcte
    (26) factor -> . varid
    (27) factor -> . llamafunc
    (28) leftparen -> . LPAREN
    (102) varcte -> . cteint
    (103) varcte -> . ctefloat
    (104) varcte -> . ctechar
    (105) varcte -> . ctestring
    (106) varcte -> . ctebool
    (30) varid -> . ID arr
    (69) llamafunc -> . idfunc LPAREN funcargs RPAREN
    (107) cteint -> . CTEINT
    (108) ctefloat -> . CTEFLOAT
    (109) ctechar -> . CTECHAR
    (110) ctestring -> . CTESTRING
    (111) ctebool -> . TRUE
    (112) ctebool -> . FALSE
    (70) idfunc -> . ID

    LPAREN          shift and go to state 43
    ID              shift and go to state 54
    CTEINT          shift and go to state 59
    CTEFLOAT        shift and go to state 39
    CTECHAR         shift and go to state 44
    CTESTRING       shift and go to state 47
    TRUE            shift and go to state 52
    FALSE           shift and go to state 45

    ctefloat                       shift and go to state 40
    exp                            shift and go to state 41
    idfunc                         shift and go to state 42
    varcte                         shift and go to state 46
    termino                        shift and go to state 48
    ctebool                        shift and go to state 49
    factor                         shift and go to state 50
    llamafunc                      shift and go to state 51
    varid                          shift and go to state 53
    expcomp                        shift and go to state 55
    leftparen                      shift and go to state 56
    expresion                      shift and go to state 150
    ctestring                      shift and go to state 58
    cteint                         shift and go to state 60
    ctechar                        shift and go to state 61

state 129

    (23) asignacion -> ID LSQBRACKET . RSQBRACKET EQUALS LSQBRACKET expresion comaexpresion RSQBRACKET SEMICOLON

    RSQBRACKET      shift and go to state 151


state 130

    (57) expcompcontinuo -> addQPComp expcomp .

    AND             reduce using rule 57 (expcompcontinuo -> addQPComp expcomp .)
    OR              reduce using rule 57 (expcompcontinuo -> addQPComp expcomp .)
    COMMA           reduce using rule 57 (expcompcontinuo -> addQPComp expcomp .)
    SEMICOLON       reduce using rule 57 (expcompcontinuo -> addQPComp expcomp .)
    RPAREN          reduce using rule 57 (expcompcontinuo -> addQPComp expcomp .)
    RSQBRACKET      reduce using rule 57 (expcompcontinuo -> addQPComp expcomp .)


state 131

    (69) llamafunc -> idfunc LPAREN funcargs . RPAREN

    RPAREN          shift and go to state 152


state 132

    (72) funcargs -> empty .

    RPAREN          reduce using rule 72 (funcargs -> empty .)


state 133

    (71) funcargs -> expresion . listafuncargs checarparams
    (73) listafuncargs -> . COMMA expresion listafuncargs
    (74) listafuncargs -> . empty
    (113) empty -> .

    COMMA           shift and go to state 153
    RPAREN          reduce using rule 113 (empty -> .)

    empty                          shift and go to state 154
    listafuncargs                  shift and go to state 155

state 134

    (34) masexp -> addQPPM exp .

    MORETHAN        reduce using rule 34 (masexp -> addQPPM exp .)
    LESSTHAN        reduce using rule 34 (masexp -> addQPPM exp .)
    NOTEQUAL        reduce using rule 34 (masexp -> addQPPM exp .)
    ISEQUALTO       reduce using rule 34 (masexp -> addQPPM exp .)
    MORETHANEQUAL   reduce using rule 34 (masexp -> addQPPM exp .)
    LESSTHANEQUAL   reduce using rule 34 (masexp -> addQPPM exp .)
    AND             reduce using rule 34 (masexp -> addQPPM exp .)
    OR              reduce using rule 34 (masexp -> addQPPM exp .)
    COMMA           reduce using rule 34 (masexp -> addQPPM exp .)
    SEMICOLON       reduce using rule 34 (masexp -> addQPPM exp .)
    RPAREN          reduce using rule 34 (masexp -> addQPPM exp .)
    RSQBRACKET      reduce using rule 34 (masexp -> addQPPM exp .)


state 135

    (48) masterminos -> addQTD termino .

    PLUS            reduce using rule 48 (masterminos -> addQTD termino .)
    MINUS           reduce using rule 48 (masterminos -> addQTD termino .)
    MORETHAN        reduce using rule 48 (masterminos -> addQTD termino .)
    LESSTHAN        reduce using rule 48 (masterminos -> addQTD termino .)
    NOTEQUAL        reduce using rule 48 (masterminos -> addQTD termino .)
    ISEQUALTO       reduce using rule 48 (masterminos -> addQTD termino .)
    MORETHANEQUAL   reduce using rule 48 (masterminos -> addQTD termino .)
    LESSTHANEQUAL   reduce using rule 48 (masterminos -> addQTD termino .)
    AND             reduce using rule 48 (masterminos -> addQTD termino .)
    OR              reduce using rule 48 (masterminos -> addQTD termino .)
    COMMA           reduce using rule 48 (masterminos -> addQTD termino .)
    SEMICOLON       reduce using rule 48 (masterminos -> addQTD termino .)
    RPAREN          reduce using rule 48 (masterminos -> addQTD termino .)
    RSQBRACKET      reduce using rule 48 (masterminos -> addQTD termino .)


state 136

    (31) arr -> LSQBRACKET RSQBRACKET .

    TIMES           reduce using rule 31 (arr -> LSQBRACKET RSQBRACKET .)
    DIVIDE          reduce using rule 31 (arr -> LSQBRACKET RSQBRACKET .)
    PLUS            reduce using rule 31 (arr -> LSQBRACKET RSQBRACKET .)
    MINUS           reduce using rule 31 (arr -> LSQBRACKET RSQBRACKET .)
    MORETHAN        reduce using rule 31 (arr -> LSQBRACKET RSQBRACKET .)
    LESSTHAN        reduce using rule 31 (arr -> LSQBRACKET RSQBRACKET .)
    NOTEQUAL        reduce using rule 31 (arr -> LSQBRACKET RSQBRACKET .)
    ISEQUALTO       reduce using rule 31 (arr -> LSQBRACKET RSQBRACKET .)
    MORETHANEQUAL   reduce using rule 31 (arr -> LSQBRACKET RSQBRACKET .)
    LESSTHANEQUAL   reduce using rule 31 (arr -> LSQBRACKET RSQBRACKET .)
    AND             reduce using rule 31 (arr -> LSQBRACKET RSQBRACKET .)
    OR              reduce using rule 31 (arr -> LSQBRACKET RSQBRACKET .)
    COMMA           reduce using rule 31 (arr -> LSQBRACKET RSQBRACKET .)
    SEMICOLON       reduce using rule 31 (arr -> LSQBRACKET RSQBRACKET .)
    RPAREN          reduce using rule 31 (arr -> LSQBRACKET RSQBRACKET .)
    RSQBRACKET      reduce using rule 31 (arr -> LSQBRACKET RSQBRACKET .)


state 137

    (43) masexpresion -> addQPAO expresion .

    COMMA           reduce using rule 43 (masexpresion -> addQPAO expresion .)
    SEMICOLON       reduce using rule 43 (masexpresion -> addQPAO expresion .)
    RPAREN          reduce using rule 43 (masexpresion -> addQPAO expresion .)
    RSQBRACKET      reduce using rule 43 (masexpresion -> addQPAO expresion .)


state 138

    (24) factor -> leftparen expresion rightparen .

    TIMES           reduce using rule 24 (factor -> leftparen expresion rightparen .)
    DIVIDE          reduce using rule 24 (factor -> leftparen expresion rightparen .)
    PLUS            reduce using rule 24 (factor -> leftparen expresion rightparen .)
    MINUS           reduce using rule 24 (factor -> leftparen expresion rightparen .)
    MORETHAN        reduce using rule 24 (factor -> leftparen expresion rightparen .)
    LESSTHAN        reduce using rule 24 (factor -> leftparen expresion rightparen .)
    NOTEQUAL        reduce using rule 24 (factor -> leftparen expresion rightparen .)
    ISEQUALTO       reduce using rule 24 (factor -> leftparen expresion rightparen .)
    MORETHANEQUAL   reduce using rule 24 (factor -> leftparen expresion rightparen .)
    LESSTHANEQUAL   reduce using rule 24 (factor -> leftparen expresion rightparen .)
    AND             reduce using rule 24 (factor -> leftparen expresion rightparen .)
    OR              reduce using rule 24 (factor -> leftparen expresion rightparen .)
    SEMICOLON       reduce using rule 24 (factor -> leftparen expresion rightparen .)
    RPAREN          reduce using rule 24 (factor -> leftparen expresion rightparen .)
    COMMA           reduce using rule 24 (factor -> leftparen expresion rightparen .)
    RSQBRACKET      reduce using rule 24 (factor -> leftparen expresion rightparen .)


state 139

    (29) rightparen -> RPAREN .

    TIMES           reduce using rule 29 (rightparen -> RPAREN .)
    DIVIDE          reduce using rule 29 (rightparen -> RPAREN .)
    PLUS            reduce using rule 29 (rightparen -> RPAREN .)
    MINUS           reduce using rule 29 (rightparen -> RPAREN .)
    MORETHAN        reduce using rule 29 (rightparen -> RPAREN .)
    LESSTHAN        reduce using rule 29 (rightparen -> RPAREN .)
    NOTEQUAL        reduce using rule 29 (rightparen -> RPAREN .)
    ISEQUALTO       reduce using rule 29 (rightparen -> RPAREN .)
    MORETHANEQUAL   reduce using rule 29 (rightparen -> RPAREN .)
    LESSTHANEQUAL   reduce using rule 29 (rightparen -> RPAREN .)
    AND             reduce using rule 29 (rightparen -> RPAREN .)
    OR              reduce using rule 29 (rightparen -> RPAREN .)
    COMMA           reduce using rule 29 (rightparen -> RPAREN .)
    SEMICOLON       reduce using rule 29 (rightparen -> RPAREN .)
    RPAREN          reduce using rule 29 (rightparen -> RPAREN .)
    RSQBRACKET      reduce using rule 29 (rightparen -> RPAREN .)


state 140

    (94) masargs -> COMMA args . masargs
    (94) masargs -> . COMMA args masargs
    (95) masargs -> . empty
    (113) empty -> .

    COMMA           shift and go to state 115
    RPAREN          reduce using rule 113 (empty -> .)

    empty                          shift and go to state 117
    masargs                        shift and go to state 156

state 141

    (85) funcs -> FUNCTION funcaux LPAREN args masargs RPAREN . bloquefunc funcs
    (88) bloquefunc -> . LBRACKET masestatuto retorno RBRACKET

    LBRACKET        shift and go to state 118

    bloquefunc                     shift and go to state 157

state 142

    (88) bloquefunc -> LBRACKET masestatuto . retorno RBRACKET
    (89) retorno -> . RETURN expresion SEMICOLON
    (90) retorno -> . RETURN SEMICOLON

    RETURN          shift and go to state 159

    retorno                        shift and go to state 158

state 143

    (86) funcs -> FUNCTION funcaux LPAREN RPAREN bloquefunc funcs .

    MAIN            reduce using rule 86 (funcs -> FUNCTION funcaux LPAREN RPAREN bloquefunc funcs .)


state 144

    (68) lectura -> READ LPAREN ID . RPAREN SEMICOLON

    RPAREN          shift and go to state 160


state 145

    (5) condicion -> IF LPAREN expresion . RPAREN gotoF estatutobloque masbloque

    RPAREN          shift and go to state 161


state 146

    (18) listaprint -> ctestring . masprint
    (105) varcte -> ctestring .
    (19) masprint -> . addQPP listaprint
    (20) masprint -> . empty
    (21) addQPP -> . COMMA
    (113) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for RPAREN resolved using rule 105 (varcte -> ctestring .)
    TIMES           reduce using rule 105 (varcte -> ctestring .)
    DIVIDE          reduce using rule 105 (varcte -> ctestring .)
    PLUS            reduce using rule 105 (varcte -> ctestring .)
    MINUS           reduce using rule 105 (varcte -> ctestring .)
    MORETHAN        reduce using rule 105 (varcte -> ctestring .)
    LESSTHAN        reduce using rule 105 (varcte -> ctestring .)
    NOTEQUAL        reduce using rule 105 (varcte -> ctestring .)
    ISEQUALTO       reduce using rule 105 (varcte -> ctestring .)
    MORETHANEQUAL   reduce using rule 105 (varcte -> ctestring .)
    LESSTHANEQUAL   reduce using rule 105 (varcte -> ctestring .)
    AND             reduce using rule 105 (varcte -> ctestring .)
    OR              reduce using rule 105 (varcte -> ctestring .)
    RPAREN          reduce using rule 105 (varcte -> ctestring .)
    COMMA           shift and go to state 162

  ! COMMA           [ reduce using rule 105 (varcte -> ctestring .) ]
  ! RPAREN          [ reduce using rule 113 (empty -> .) ]

    empty                          shift and go to state 164
    addQPP                         shift and go to state 163
    masprint                       shift and go to state 165

state 147

    (17) listaprint -> expresion . masprint
    (19) masprint -> . addQPP listaprint
    (20) masprint -> . empty
    (21) addQPP -> . COMMA
    (113) empty -> .

    COMMA           shift and go to state 162
    RPAREN          reduce using rule 113 (empty -> .)

    addQPP                         shift and go to state 163
    empty                          shift and go to state 164
    masprint                       shift and go to state 166

state 148

    (15) escritura -> print LPAREN listaprint . RPAREN SEMICOLON

    RPAREN          shift and go to state 167


state 149

    (13) ciclo -> while LPAREN expresion . RPAREN gotoF estatutobloque goto

    RPAREN          shift and go to state 168


state 150

    (22) asignacion -> ID EQUALS expresion . SEMICOLON

    SEMICOLON       shift and go to state 169


state 151

    (23) asignacion -> ID LSQBRACKET RSQBRACKET . EQUALS LSQBRACKET expresion comaexpresion RSQBRACKET SEMICOLON

    EQUALS          shift and go to state 170


state 152

    (69) llamafunc -> idfunc LPAREN funcargs RPAREN .

    TIMES           reduce using rule 69 (llamafunc -> idfunc LPAREN funcargs RPAREN .)
    DIVIDE          reduce using rule 69 (llamafunc -> idfunc LPAREN funcargs RPAREN .)
    PLUS            reduce using rule 69 (llamafunc -> idfunc LPAREN funcargs RPAREN .)
    MINUS           reduce using rule 69 (llamafunc -> idfunc LPAREN funcargs RPAREN .)
    MORETHAN        reduce using rule 69 (llamafunc -> idfunc LPAREN funcargs RPAREN .)
    LESSTHAN        reduce using rule 69 (llamafunc -> idfunc LPAREN funcargs RPAREN .)
    NOTEQUAL        reduce using rule 69 (llamafunc -> idfunc LPAREN funcargs RPAREN .)
    ISEQUALTO       reduce using rule 69 (llamafunc -> idfunc LPAREN funcargs RPAREN .)
    MORETHANEQUAL   reduce using rule 69 (llamafunc -> idfunc LPAREN funcargs RPAREN .)
    LESSTHANEQUAL   reduce using rule 69 (llamafunc -> idfunc LPAREN funcargs RPAREN .)
    AND             reduce using rule 69 (llamafunc -> idfunc LPAREN funcargs RPAREN .)
    OR              reduce using rule 69 (llamafunc -> idfunc LPAREN funcargs RPAREN .)
    RPAREN          reduce using rule 69 (llamafunc -> idfunc LPAREN funcargs RPAREN .)
    SEMICOLON       reduce using rule 69 (llamafunc -> idfunc LPAREN funcargs RPAREN .)
    COMMA           reduce using rule 69 (llamafunc -> idfunc LPAREN funcargs RPAREN .)
    RSQBRACKET      reduce using rule 69 (llamafunc -> idfunc LPAREN funcargs RPAREN .)


state 153

    (73) listafuncargs -> COMMA . expresion listafuncargs
    (40) expresion -> . expcomp masexpresion
    (50) expcomp -> . exp expcompcontinuo
    (33) exp -> . termino masexp
    (45) termino -> . factor masterminos
    (24) factor -> . leftparen expresion rightparen
    (25) factor -> . varcte
    (26) factor -> . varid
    (27) factor -> . llamafunc
    (28) leftparen -> . LPAREN
    (102) varcte -> . cteint
    (103) varcte -> . ctefloat
    (104) varcte -> . ctechar
    (105) varcte -> . ctestring
    (106) varcte -> . ctebool
    (30) varid -> . ID arr
    (69) llamafunc -> . idfunc LPAREN funcargs RPAREN
    (107) cteint -> . CTEINT
    (108) ctefloat -> . CTEFLOAT
    (109) ctechar -> . CTECHAR
    (110) ctestring -> . CTESTRING
    (111) ctebool -> . TRUE
    (112) ctebool -> . FALSE
    (70) idfunc -> . ID

    LPAREN          shift and go to state 43
    ID              shift and go to state 54
    CTEINT          shift and go to state 59
    CTEFLOAT        shift and go to state 39
    CTECHAR         shift and go to state 44
    CTESTRING       shift and go to state 47
    TRUE            shift and go to state 52
    FALSE           shift and go to state 45

    ctefloat                       shift and go to state 40
    exp                            shift and go to state 41
    idfunc                         shift and go to state 42
    varcte                         shift and go to state 46
    termino                        shift and go to state 48
    ctebool                        shift and go to state 49
    factor                         shift and go to state 50
    llamafunc                      shift and go to state 51
    varid                          shift and go to state 53
    expcomp                        shift and go to state 55
    leftparen                      shift and go to state 56
    expresion                      shift and go to state 171
    ctestring                      shift and go to state 58
    cteint                         shift and go to state 60
    ctechar                        shift and go to state 61

state 154

    (74) listafuncargs -> empty .

    RPAREN          reduce using rule 74 (listafuncargs -> empty .)


state 155

    (71) funcargs -> expresion listafuncargs . checarparams
    (75) checarparams -> . empty
    (113) empty -> .

    RPAREN          reduce using rule 113 (empty -> .)

    empty                          shift and go to state 172
    checarparams                   shift and go to state 173

state 156

    (94) masargs -> COMMA args masargs .

    RPAREN          reduce using rule 94 (masargs -> COMMA args masargs .)


state 157

    (85) funcs -> FUNCTION funcaux LPAREN args masargs RPAREN bloquefunc . funcs
    (85) funcs -> . FUNCTION funcaux LPAREN args masargs RPAREN bloquefunc funcs
    (86) funcs -> . FUNCTION funcaux LPAREN RPAREN bloquefunc funcs
    (87) funcs -> . empty
    (113) empty -> .

    FUNCTION        shift and go to state 19
    MAIN            reduce using rule 113 (empty -> .)

    funcs                          shift and go to state 174
    empty                          shift and go to state 18

state 158

    (88) bloquefunc -> LBRACKET masestatuto retorno . RBRACKET

    RBRACKET        shift and go to state 175


state 159

    (89) retorno -> RETURN . expresion SEMICOLON
    (90) retorno -> RETURN . SEMICOLON
    (40) expresion -> . expcomp masexpresion
    (50) expcomp -> . exp expcompcontinuo
    (33) exp -> . termino masexp
    (45) termino -> . factor masterminos
    (24) factor -> . leftparen expresion rightparen
    (25) factor -> . varcte
    (26) factor -> . varid
    (27) factor -> . llamafunc
    (28) leftparen -> . LPAREN
    (102) varcte -> . cteint
    (103) varcte -> . ctefloat
    (104) varcte -> . ctechar
    (105) varcte -> . ctestring
    (106) varcte -> . ctebool
    (30) varid -> . ID arr
    (69) llamafunc -> . idfunc LPAREN funcargs RPAREN
    (107) cteint -> . CTEINT
    (108) ctefloat -> . CTEFLOAT
    (109) ctechar -> . CTECHAR
    (110) ctestring -> . CTESTRING
    (111) ctebool -> . TRUE
    (112) ctebool -> . FALSE
    (70) idfunc -> . ID

    SEMICOLON       shift and go to state 176
    LPAREN          shift and go to state 43
    ID              shift and go to state 54
    CTEINT          shift and go to state 59
    CTEFLOAT        shift and go to state 39
    CTECHAR         shift and go to state 44
    CTESTRING       shift and go to state 47
    TRUE            shift and go to state 52
    FALSE           shift and go to state 45

    ctefloat                       shift and go to state 40
    exp                            shift and go to state 41
    idfunc                         shift and go to state 42
    varcte                         shift and go to state 46
    termino                        shift and go to state 48
    ctebool                        shift and go to state 49
    factor                         shift and go to state 50
    llamafunc                      shift and go to state 51
    varid                          shift and go to state 53
    expcomp                        shift and go to state 55
    leftparen                      shift and go to state 56
    expresion                      shift and go to state 177
    ctestring                      shift and go to state 58
    cteint                         shift and go to state 60
    ctechar                        shift and go to state 61

state 160

    (68) lectura -> READ LPAREN ID RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 178


state 161

    (5) condicion -> IF LPAREN expresion RPAREN . gotoF estatutobloque masbloque
    (8) gotoF -> . empty
    (113) empty -> .

    COMMENT         reduce using rule 113 (empty -> .)
    CPPCOMMENT      reduce using rule 113 (empty -> .)
    LBRACKET        reduce using rule 113 (empty -> .)
    ID              reduce using rule 113 (empty -> .)
    IF              reduce using rule 113 (empty -> .)
    READ            reduce using rule 113 (empty -> .)
    VAR             reduce using rule 113 (empty -> .)
    WHILE           reduce using rule 113 (empty -> .)
    PRINT           reduce using rule 113 (empty -> .)
    ELSE            reduce using rule 113 (empty -> .)
    RBRACKET        reduce using rule 113 (empty -> .)
    RETURN          reduce using rule 113 (empty -> .)

    gotoF                          shift and go to state 179
    empty                          shift and go to state 180

state 162

    (21) addQPP -> COMMA .

    CTESTRING       reduce using rule 21 (addQPP -> COMMA .)
    LPAREN          reduce using rule 21 (addQPP -> COMMA .)
    ID              reduce using rule 21 (addQPP -> COMMA .)
    CTEINT          reduce using rule 21 (addQPP -> COMMA .)
    CTEFLOAT        reduce using rule 21 (addQPP -> COMMA .)
    CTECHAR         reduce using rule 21 (addQPP -> COMMA .)
    TRUE            reduce using rule 21 (addQPP -> COMMA .)
    FALSE           reduce using rule 21 (addQPP -> COMMA .)


state 163

    (19) masprint -> addQPP . listaprint
    (17) listaprint -> . expresion masprint
    (18) listaprint -> . ctestring masprint
    (40) expresion -> . expcomp masexpresion
    (110) ctestring -> . CTESTRING
    (50) expcomp -> . exp expcompcontinuo
    (33) exp -> . termino masexp
    (45) termino -> . factor masterminos
    (24) factor -> . leftparen expresion rightparen
    (25) factor -> . varcte
    (26) factor -> . varid
    (27) factor -> . llamafunc
    (28) leftparen -> . LPAREN
    (102) varcte -> . cteint
    (103) varcte -> . ctefloat
    (104) varcte -> . ctechar
    (105) varcte -> . ctestring
    (106) varcte -> . ctebool
    (30) varid -> . ID arr
    (69) llamafunc -> . idfunc LPAREN funcargs RPAREN
    (107) cteint -> . CTEINT
    (108) ctefloat -> . CTEFLOAT
    (109) ctechar -> . CTECHAR
    (111) ctebool -> . TRUE
    (112) ctebool -> . FALSE
    (70) idfunc -> . ID

    CTESTRING       shift and go to state 47
    LPAREN          shift and go to state 43
    ID              shift and go to state 54
    CTEINT          shift and go to state 59
    CTEFLOAT        shift and go to state 39
    CTECHAR         shift and go to state 44
    TRUE            shift and go to state 52
    FALSE           shift and go to state 45

    ctefloat                       shift and go to state 40
    exp                            shift and go to state 41
    idfunc                         shift and go to state 42
    varcte                         shift and go to state 46
    termino                        shift and go to state 48
    ctebool                        shift and go to state 49
    factor                         shift and go to state 50
    llamafunc                      shift and go to state 51
    ctechar                        shift and go to state 61
    varid                          shift and go to state 53
    leftparen                      shift and go to state 56
    expresion                      shift and go to state 147
    ctestring                      shift and go to state 146
    cteint                         shift and go to state 60
    listaprint                     shift and go to state 181
    expcomp                        shift and go to state 55

state 164

    (20) masprint -> empty .

    RPAREN          reduce using rule 20 (masprint -> empty .)


state 165

    (18) listaprint -> ctestring masprint .

    RPAREN          reduce using rule 18 (listaprint -> ctestring masprint .)


state 166

    (17) listaprint -> expresion masprint .

    RPAREN          reduce using rule 17 (listaprint -> expresion masprint .)


state 167

    (15) escritura -> print LPAREN listaprint RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 182


state 168

    (13) ciclo -> while LPAREN expresion RPAREN . gotoF estatutobloque goto
    (8) gotoF -> . empty
    (113) empty -> .

    COMMENT         reduce using rule 113 (empty -> .)
    CPPCOMMENT      reduce using rule 113 (empty -> .)
    LBRACKET        reduce using rule 113 (empty -> .)
    ID              reduce using rule 113 (empty -> .)
    IF              reduce using rule 113 (empty -> .)
    READ            reduce using rule 113 (empty -> .)
    VAR             reduce using rule 113 (empty -> .)
    WHILE           reduce using rule 113 (empty -> .)
    PRINT           reduce using rule 113 (empty -> .)
    RBRACKET        reduce using rule 113 (empty -> .)
    RETURN          reduce using rule 113 (empty -> .)
    ELSE            reduce using rule 113 (empty -> .)

    gotoF                          shift and go to state 183
    empty                          shift and go to state 180

state 169

    (22) asignacion -> ID EQUALS expresion SEMICOLON .

    COMMENT         reduce using rule 22 (asignacion -> ID EQUALS expresion SEMICOLON .)
    CPPCOMMENT      reduce using rule 22 (asignacion -> ID EQUALS expresion SEMICOLON .)
    ID              reduce using rule 22 (asignacion -> ID EQUALS expresion SEMICOLON .)
    IF              reduce using rule 22 (asignacion -> ID EQUALS expresion SEMICOLON .)
    READ            reduce using rule 22 (asignacion -> ID EQUALS expresion SEMICOLON .)
    VAR             reduce using rule 22 (asignacion -> ID EQUALS expresion SEMICOLON .)
    WHILE           reduce using rule 22 (asignacion -> ID EQUALS expresion SEMICOLON .)
    PRINT           reduce using rule 22 (asignacion -> ID EQUALS expresion SEMICOLON .)
    RETURN          reduce using rule 22 (asignacion -> ID EQUALS expresion SEMICOLON .)
    ELSE            reduce using rule 22 (asignacion -> ID EQUALS expresion SEMICOLON .)
    RBRACKET        reduce using rule 22 (asignacion -> ID EQUALS expresion SEMICOLON .)


state 170

    (23) asignacion -> ID LSQBRACKET RSQBRACKET EQUALS . LSQBRACKET expresion comaexpresion RSQBRACKET SEMICOLON

    LSQBRACKET      shift and go to state 184


state 171

    (73) listafuncargs -> COMMA expresion . listafuncargs
    (73) listafuncargs -> . COMMA expresion listafuncargs
    (74) listafuncargs -> . empty
    (113) empty -> .

    COMMA           shift and go to state 153
    RPAREN          reduce using rule 113 (empty -> .)

    empty                          shift and go to state 154
    listafuncargs                  shift and go to state 185

state 172

    (75) checarparams -> empty .

    RPAREN          reduce using rule 75 (checarparams -> empty .)


state 173

    (71) funcargs -> expresion listafuncargs checarparams .

    RPAREN          reduce using rule 71 (funcargs -> expresion listafuncargs checarparams .)


state 174

    (85) funcs -> FUNCTION funcaux LPAREN args masargs RPAREN bloquefunc funcs .

    MAIN            reduce using rule 85 (funcs -> FUNCTION funcaux LPAREN args masargs RPAREN bloquefunc funcs .)


state 175

    (88) bloquefunc -> LBRACKET masestatuto retorno RBRACKET .

    FUNCTION        reduce using rule 88 (bloquefunc -> LBRACKET masestatuto retorno RBRACKET .)
    MAIN            reduce using rule 88 (bloquefunc -> LBRACKET masestatuto retorno RBRACKET .)


state 176

    (90) retorno -> RETURN SEMICOLON .

    RBRACKET        reduce using rule 90 (retorno -> RETURN SEMICOLON .)


state 177

    (89) retorno -> RETURN expresion . SEMICOLON

    SEMICOLON       shift and go to state 186


state 178

    (68) lectura -> READ LPAREN ID RPAREN SEMICOLON .

    ELSE            reduce using rule 68 (lectura -> READ LPAREN ID RPAREN SEMICOLON .)
    COMMENT         reduce using rule 68 (lectura -> READ LPAREN ID RPAREN SEMICOLON .)
    CPPCOMMENT      reduce using rule 68 (lectura -> READ LPAREN ID RPAREN SEMICOLON .)
    ID              reduce using rule 68 (lectura -> READ LPAREN ID RPAREN SEMICOLON .)
    IF              reduce using rule 68 (lectura -> READ LPAREN ID RPAREN SEMICOLON .)
    READ            reduce using rule 68 (lectura -> READ LPAREN ID RPAREN SEMICOLON .)
    VAR             reduce using rule 68 (lectura -> READ LPAREN ID RPAREN SEMICOLON .)
    WHILE           reduce using rule 68 (lectura -> READ LPAREN ID RPAREN SEMICOLON .)
    PRINT           reduce using rule 68 (lectura -> READ LPAREN ID RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 68 (lectura -> READ LPAREN ID RPAREN SEMICOLON .)
    RETURN          reduce using rule 68 (lectura -> READ LPAREN ID RPAREN SEMICOLON .)


state 179

    (5) condicion -> IF LPAREN expresion RPAREN gotoF . estatutobloque masbloque
    (6) estatutobloque -> . estatuto
    (7) estatutobloque -> . bloque
    (59) estatuto -> . asignacion
    (60) estatuto -> . condicion
    (61) estatuto -> . ciclo
    (62) estatuto -> . escritura
    (63) estatuto -> . lectura
    (64) estatuto -> . vars
    (65) estatuto -> . llamafunc SEMICOLON
    (66) estatuto -> . COMMENT
    (67) estatuto -> . CPPCOMMENT
    (9) bloque -> . LBRACKET masestatuto RBRACKET
    (22) asignacion -> . ID EQUALS expresion SEMICOLON
    (23) asignacion -> . ID LSQBRACKET RSQBRACKET EQUALS LSQBRACKET expresion comaexpresion RSQBRACKET SEMICOLON
    (5) condicion -> . IF LPAREN expresion RPAREN gotoF estatutobloque masbloque
    (13) ciclo -> . while LPAREN expresion RPAREN gotoF estatutobloque goto
    (15) escritura -> . print LPAREN listaprint RPAREN SEMICOLON
    (68) lectura -> . READ LPAREN ID RPAREN SEMICOLON
    (78) vars -> . VAR tipo listaid SEMICOLON vars
    (79) vars -> . empty
    (69) llamafunc -> . idfunc LPAREN funcargs RPAREN
    (14) while -> . WHILE
    (16) print -> . PRINT
    (113) empty -> .
    (70) idfunc -> . ID

  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for CPPCOMMENT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
    COMMENT         shift and go to state 78
    CPPCOMMENT      shift and go to state 80
    LBRACKET        shift and go to state 37
    ID              shift and go to state 85
    IF              shift and go to state 70
    READ            shift and go to state 69
    VAR             shift and go to state 8
    WHILE           shift and go to state 74
    PRINT           shift and go to state 68
    ELSE            reduce using rule 113 (empty -> .)
    RBRACKET        reduce using rule 113 (empty -> .)
    RETURN          reduce using rule 113 (empty -> .)

  ! COMMENT         [ reduce using rule 113 (empty -> .) ]
  ! CPPCOMMENT      [ reduce using rule 113 (empty -> .) ]
  ! ID              [ reduce using rule 113 (empty -> .) ]
  ! IF              [ reduce using rule 113 (empty -> .) ]
  ! READ            [ reduce using rule 113 (empty -> .) ]
  ! VAR             [ reduce using rule 113 (empty -> .) ]
  ! WHILE           [ reduce using rule 113 (empty -> .) ]
  ! PRINT           [ reduce using rule 113 (empty -> .) ]

    estatuto                       shift and go to state 187
    idfunc                         shift and go to state 42
    asignacion                     shift and go to state 71
    condicion                      shift and go to state 72
    escritura                      shift and go to state 73
    empty                          shift and go to state 7
    estatutobloque                 shift and go to state 188
    llamafunc                      shift and go to state 75
    vars                           shift and go to state 76
    bloque                         shift and go to state 189
    print                          shift and go to state 81
    ciclo                          shift and go to state 79
    while                          shift and go to state 83
    lectura                        shift and go to state 84

state 180

    (8) gotoF -> empty .

    COMMENT         reduce using rule 8 (gotoF -> empty .)
    CPPCOMMENT      reduce using rule 8 (gotoF -> empty .)
    LBRACKET        reduce using rule 8 (gotoF -> empty .)
    ID              reduce using rule 8 (gotoF -> empty .)
    IF              reduce using rule 8 (gotoF -> empty .)
    READ            reduce using rule 8 (gotoF -> empty .)
    VAR             reduce using rule 8 (gotoF -> empty .)
    WHILE           reduce using rule 8 (gotoF -> empty .)
    PRINT           reduce using rule 8 (gotoF -> empty .)
    ELSE            reduce using rule 8 (gotoF -> empty .)
    RBRACKET        reduce using rule 8 (gotoF -> empty .)
    RETURN          reduce using rule 8 (gotoF -> empty .)


state 181

    (19) masprint -> addQPP listaprint .

    RPAREN          reduce using rule 19 (masprint -> addQPP listaprint .)


state 182

    (15) escritura -> print LPAREN listaprint RPAREN SEMICOLON .

    COMMENT         reduce using rule 15 (escritura -> print LPAREN listaprint RPAREN SEMICOLON .)
    CPPCOMMENT      reduce using rule 15 (escritura -> print LPAREN listaprint RPAREN SEMICOLON .)
    ID              reduce using rule 15 (escritura -> print LPAREN listaprint RPAREN SEMICOLON .)
    IF              reduce using rule 15 (escritura -> print LPAREN listaprint RPAREN SEMICOLON .)
    READ            reduce using rule 15 (escritura -> print LPAREN listaprint RPAREN SEMICOLON .)
    VAR             reduce using rule 15 (escritura -> print LPAREN listaprint RPAREN SEMICOLON .)
    WHILE           reduce using rule 15 (escritura -> print LPAREN listaprint RPAREN SEMICOLON .)
    PRINT           reduce using rule 15 (escritura -> print LPAREN listaprint RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 15 (escritura -> print LPAREN listaprint RPAREN SEMICOLON .)
    ELSE            reduce using rule 15 (escritura -> print LPAREN listaprint RPAREN SEMICOLON .)
    RETURN          reduce using rule 15 (escritura -> print LPAREN listaprint RPAREN SEMICOLON .)


state 183

    (13) ciclo -> while LPAREN expresion RPAREN gotoF . estatutobloque goto
    (6) estatutobloque -> . estatuto
    (7) estatutobloque -> . bloque
    (59) estatuto -> . asignacion
    (60) estatuto -> . condicion
    (61) estatuto -> . ciclo
    (62) estatuto -> . escritura
    (63) estatuto -> . lectura
    (64) estatuto -> . vars
    (65) estatuto -> . llamafunc SEMICOLON
    (66) estatuto -> . COMMENT
    (67) estatuto -> . CPPCOMMENT
    (9) bloque -> . LBRACKET masestatuto RBRACKET
    (22) asignacion -> . ID EQUALS expresion SEMICOLON
    (23) asignacion -> . ID LSQBRACKET RSQBRACKET EQUALS LSQBRACKET expresion comaexpresion RSQBRACKET SEMICOLON
    (5) condicion -> . IF LPAREN expresion RPAREN gotoF estatutobloque masbloque
    (13) ciclo -> . while LPAREN expresion RPAREN gotoF estatutobloque goto
    (15) escritura -> . print LPAREN listaprint RPAREN SEMICOLON
    (68) lectura -> . READ LPAREN ID RPAREN SEMICOLON
    (78) vars -> . VAR tipo listaid SEMICOLON vars
    (79) vars -> . empty
    (69) llamafunc -> . idfunc LPAREN funcargs RPAREN
    (14) while -> . WHILE
    (16) print -> . PRINT
    (113) empty -> .
    (70) idfunc -> . ID

  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for CPPCOMMENT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
    COMMENT         shift and go to state 78
    CPPCOMMENT      shift and go to state 80
    LBRACKET        shift and go to state 37
    ID              shift and go to state 85
    IF              shift and go to state 70
    READ            shift and go to state 69
    VAR             shift and go to state 8
    WHILE           shift and go to state 74
    PRINT           shift and go to state 68
    ELSE            reduce using rule 113 (empty -> .)
    RBRACKET        reduce using rule 113 (empty -> .)
    RETURN          reduce using rule 113 (empty -> .)

  ! COMMENT         [ reduce using rule 113 (empty -> .) ]
  ! CPPCOMMENT      [ reduce using rule 113 (empty -> .) ]
  ! ID              [ reduce using rule 113 (empty -> .) ]
  ! IF              [ reduce using rule 113 (empty -> .) ]
  ! READ            [ reduce using rule 113 (empty -> .) ]
  ! VAR             [ reduce using rule 113 (empty -> .) ]
  ! WHILE           [ reduce using rule 113 (empty -> .) ]
  ! PRINT           [ reduce using rule 113 (empty -> .) ]

    estatuto                       shift and go to state 187
    idfunc                         shift and go to state 42
    asignacion                     shift and go to state 71
    condicion                      shift and go to state 72
    escritura                      shift and go to state 73
    empty                          shift and go to state 7
    estatutobloque                 shift and go to state 190
    llamafunc                      shift and go to state 75
    vars                           shift and go to state 76
    bloque                         shift and go to state 189
    print                          shift and go to state 81
    ciclo                          shift and go to state 79
    while                          shift and go to state 83
    lectura                        shift and go to state 84

state 184

    (23) asignacion -> ID LSQBRACKET RSQBRACKET EQUALS LSQBRACKET . expresion comaexpresion RSQBRACKET SEMICOLON
    (40) expresion -> . expcomp masexpresion
    (50) expcomp -> . exp expcompcontinuo
    (33) exp -> . termino masexp
    (45) termino -> . factor masterminos
    (24) factor -> . leftparen expresion rightparen
    (25) factor -> . varcte
    (26) factor -> . varid
    (27) factor -> . llamafunc
    (28) leftparen -> . LPAREN
    (102) varcte -> . cteint
    (103) varcte -> . ctefloat
    (104) varcte -> . ctechar
    (105) varcte -> . ctestring
    (106) varcte -> . ctebool
    (30) varid -> . ID arr
    (69) llamafunc -> . idfunc LPAREN funcargs RPAREN
    (107) cteint -> . CTEINT
    (108) ctefloat -> . CTEFLOAT
    (109) ctechar -> . CTECHAR
    (110) ctestring -> . CTESTRING
    (111) ctebool -> . TRUE
    (112) ctebool -> . FALSE
    (70) idfunc -> . ID

    LPAREN          shift and go to state 43
    ID              shift and go to state 54
    CTEINT          shift and go to state 59
    CTEFLOAT        shift and go to state 39
    CTECHAR         shift and go to state 44
    CTESTRING       shift and go to state 47
    TRUE            shift and go to state 52
    FALSE           shift and go to state 45

    ctefloat                       shift and go to state 40
    exp                            shift and go to state 41
    idfunc                         shift and go to state 42
    varcte                         shift and go to state 46
    termino                        shift and go to state 48
    ctebool                        shift and go to state 49
    factor                         shift and go to state 50
    llamafunc                      shift and go to state 51
    varid                          shift and go to state 53
    expcomp                        shift and go to state 55
    leftparen                      shift and go to state 56
    expresion                      shift and go to state 191
    ctestring                      shift and go to state 58
    cteint                         shift and go to state 60
    ctechar                        shift and go to state 61

state 185

    (73) listafuncargs -> COMMA expresion listafuncargs .

    RPAREN          reduce using rule 73 (listafuncargs -> COMMA expresion listafuncargs .)


state 186

    (89) retorno -> RETURN expresion SEMICOLON .

    RBRACKET        reduce using rule 89 (retorno -> RETURN expresion SEMICOLON .)


state 187

    (6) estatutobloque -> estatuto .

    ELSE            reduce using rule 6 (estatutobloque -> estatuto .)
    COMMENT         reduce using rule 6 (estatutobloque -> estatuto .)
    CPPCOMMENT      reduce using rule 6 (estatutobloque -> estatuto .)
    ID              reduce using rule 6 (estatutobloque -> estatuto .)
    IF              reduce using rule 6 (estatutobloque -> estatuto .)
    READ            reduce using rule 6 (estatutobloque -> estatuto .)
    VAR             reduce using rule 6 (estatutobloque -> estatuto .)
    WHILE           reduce using rule 6 (estatutobloque -> estatuto .)
    PRINT           reduce using rule 6 (estatutobloque -> estatuto .)
    RBRACKET        reduce using rule 6 (estatutobloque -> estatuto .)
    RETURN          reduce using rule 6 (estatutobloque -> estatuto .)


state 188

    (5) condicion -> IF LPAREN expresion RPAREN gotoF estatutobloque . masbloque
    (10) masbloque -> . ELSE goto estatutobloque
    (11) masbloque -> . empty
    (113) empty -> .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 192
    COMMENT         reduce using rule 113 (empty -> .)
    CPPCOMMENT      reduce using rule 113 (empty -> .)
    ID              reduce using rule 113 (empty -> .)
    IF              reduce using rule 113 (empty -> .)
    READ            reduce using rule 113 (empty -> .)
    VAR             reduce using rule 113 (empty -> .)
    WHILE           reduce using rule 113 (empty -> .)
    PRINT           reduce using rule 113 (empty -> .)
    RBRACKET        reduce using rule 113 (empty -> .)
    RETURN          reduce using rule 113 (empty -> .)

  ! ELSE            [ reduce using rule 113 (empty -> .) ]

    masbloque                      shift and go to state 193
    empty                          shift and go to state 194

state 189

    (7) estatutobloque -> bloque .

    ELSE            reduce using rule 7 (estatutobloque -> bloque .)
    COMMENT         reduce using rule 7 (estatutobloque -> bloque .)
    CPPCOMMENT      reduce using rule 7 (estatutobloque -> bloque .)
    ID              reduce using rule 7 (estatutobloque -> bloque .)
    IF              reduce using rule 7 (estatutobloque -> bloque .)
    READ            reduce using rule 7 (estatutobloque -> bloque .)
    VAR             reduce using rule 7 (estatutobloque -> bloque .)
    WHILE           reduce using rule 7 (estatutobloque -> bloque .)
    PRINT           reduce using rule 7 (estatutobloque -> bloque .)
    RBRACKET        reduce using rule 7 (estatutobloque -> bloque .)
    RETURN          reduce using rule 7 (estatutobloque -> bloque .)


state 190

    (13) ciclo -> while LPAREN expresion RPAREN gotoF estatutobloque . goto
    (12) goto -> . empty
    (113) empty -> .

    COMMENT         reduce using rule 113 (empty -> .)
    CPPCOMMENT      reduce using rule 113 (empty -> .)
    ID              reduce using rule 113 (empty -> .)
    IF              reduce using rule 113 (empty -> .)
    READ            reduce using rule 113 (empty -> .)
    VAR             reduce using rule 113 (empty -> .)
    WHILE           reduce using rule 113 (empty -> .)
    PRINT           reduce using rule 113 (empty -> .)
    RBRACKET        reduce using rule 113 (empty -> .)
    RETURN          reduce using rule 113 (empty -> .)
    ELSE            reduce using rule 113 (empty -> .)

    goto                           shift and go to state 196
    empty                          shift and go to state 195

state 191

    (23) asignacion -> ID LSQBRACKET RSQBRACKET EQUALS LSQBRACKET expresion . comaexpresion RSQBRACKET SEMICOLON
    (38) comaexpresion -> . COMMA expresion comaexpresion
    (39) comaexpresion -> . empty
    (113) empty -> .

    COMMA           shift and go to state 199
    RSQBRACKET      reduce using rule 113 (empty -> .)

    comaexpresion                  shift and go to state 198
    empty                          shift and go to state 197

state 192

    (10) masbloque -> ELSE . goto estatutobloque
    (12) goto -> . empty
    (113) empty -> .

    COMMENT         reduce using rule 113 (empty -> .)
    CPPCOMMENT      reduce using rule 113 (empty -> .)
    LBRACKET        reduce using rule 113 (empty -> .)
    ID              reduce using rule 113 (empty -> .)
    IF              reduce using rule 113 (empty -> .)
    READ            reduce using rule 113 (empty -> .)
    VAR             reduce using rule 113 (empty -> .)
    WHILE           reduce using rule 113 (empty -> .)
    PRINT           reduce using rule 113 (empty -> .)
    ELSE            reduce using rule 113 (empty -> .)
    RBRACKET        reduce using rule 113 (empty -> .)
    RETURN          reduce using rule 113 (empty -> .)

    goto                           shift and go to state 200
    empty                          shift and go to state 195

state 193

    (5) condicion -> IF LPAREN expresion RPAREN gotoF estatutobloque masbloque .

    ELSE            reduce using rule 5 (condicion -> IF LPAREN expresion RPAREN gotoF estatutobloque masbloque .)
    COMMENT         reduce using rule 5 (condicion -> IF LPAREN expresion RPAREN gotoF estatutobloque masbloque .)
    CPPCOMMENT      reduce using rule 5 (condicion -> IF LPAREN expresion RPAREN gotoF estatutobloque masbloque .)
    ID              reduce using rule 5 (condicion -> IF LPAREN expresion RPAREN gotoF estatutobloque masbloque .)
    IF              reduce using rule 5 (condicion -> IF LPAREN expresion RPAREN gotoF estatutobloque masbloque .)
    READ            reduce using rule 5 (condicion -> IF LPAREN expresion RPAREN gotoF estatutobloque masbloque .)
    VAR             reduce using rule 5 (condicion -> IF LPAREN expresion RPAREN gotoF estatutobloque masbloque .)
    WHILE           reduce using rule 5 (condicion -> IF LPAREN expresion RPAREN gotoF estatutobloque masbloque .)
    PRINT           reduce using rule 5 (condicion -> IF LPAREN expresion RPAREN gotoF estatutobloque masbloque .)
    RBRACKET        reduce using rule 5 (condicion -> IF LPAREN expresion RPAREN gotoF estatutobloque masbloque .)
    RETURN          reduce using rule 5 (condicion -> IF LPAREN expresion RPAREN gotoF estatutobloque masbloque .)


state 194

    (11) masbloque -> empty .

    ELSE            reduce using rule 11 (masbloque -> empty .)
    COMMENT         reduce using rule 11 (masbloque -> empty .)
    CPPCOMMENT      reduce using rule 11 (masbloque -> empty .)
    ID              reduce using rule 11 (masbloque -> empty .)
    IF              reduce using rule 11 (masbloque -> empty .)
    READ            reduce using rule 11 (masbloque -> empty .)
    VAR             reduce using rule 11 (masbloque -> empty .)
    WHILE           reduce using rule 11 (masbloque -> empty .)
    PRINT           reduce using rule 11 (masbloque -> empty .)
    RBRACKET        reduce using rule 11 (masbloque -> empty .)
    RETURN          reduce using rule 11 (masbloque -> empty .)


state 195

    (12) goto -> empty .

    COMMENT         reduce using rule 12 (goto -> empty .)
    CPPCOMMENT      reduce using rule 12 (goto -> empty .)
    ID              reduce using rule 12 (goto -> empty .)
    IF              reduce using rule 12 (goto -> empty .)
    READ            reduce using rule 12 (goto -> empty .)
    VAR             reduce using rule 12 (goto -> empty .)
    WHILE           reduce using rule 12 (goto -> empty .)
    PRINT           reduce using rule 12 (goto -> empty .)
    RBRACKET        reduce using rule 12 (goto -> empty .)
    RETURN          reduce using rule 12 (goto -> empty .)
    ELSE            reduce using rule 12 (goto -> empty .)
    LBRACKET        reduce using rule 12 (goto -> empty .)


state 196

    (13) ciclo -> while LPAREN expresion RPAREN gotoF estatutobloque goto .

    ELSE            reduce using rule 13 (ciclo -> while LPAREN expresion RPAREN gotoF estatutobloque goto .)
    COMMENT         reduce using rule 13 (ciclo -> while LPAREN expresion RPAREN gotoF estatutobloque goto .)
    CPPCOMMENT      reduce using rule 13 (ciclo -> while LPAREN expresion RPAREN gotoF estatutobloque goto .)
    ID              reduce using rule 13 (ciclo -> while LPAREN expresion RPAREN gotoF estatutobloque goto .)
    IF              reduce using rule 13 (ciclo -> while LPAREN expresion RPAREN gotoF estatutobloque goto .)
    READ            reduce using rule 13 (ciclo -> while LPAREN expresion RPAREN gotoF estatutobloque goto .)
    VAR             reduce using rule 13 (ciclo -> while LPAREN expresion RPAREN gotoF estatutobloque goto .)
    WHILE           reduce using rule 13 (ciclo -> while LPAREN expresion RPAREN gotoF estatutobloque goto .)
    PRINT           reduce using rule 13 (ciclo -> while LPAREN expresion RPAREN gotoF estatutobloque goto .)
    RBRACKET        reduce using rule 13 (ciclo -> while LPAREN expresion RPAREN gotoF estatutobloque goto .)
    RETURN          reduce using rule 13 (ciclo -> while LPAREN expresion RPAREN gotoF estatutobloque goto .)


state 197

    (39) comaexpresion -> empty .

    RSQBRACKET      reduce using rule 39 (comaexpresion -> empty .)


state 198

    (23) asignacion -> ID LSQBRACKET RSQBRACKET EQUALS LSQBRACKET expresion comaexpresion . RSQBRACKET SEMICOLON

    RSQBRACKET      shift and go to state 201


state 199

    (38) comaexpresion -> COMMA . expresion comaexpresion
    (40) expresion -> . expcomp masexpresion
    (50) expcomp -> . exp expcompcontinuo
    (33) exp -> . termino masexp
    (45) termino -> . factor masterminos
    (24) factor -> . leftparen expresion rightparen
    (25) factor -> . varcte
    (26) factor -> . varid
    (27) factor -> . llamafunc
    (28) leftparen -> . LPAREN
    (102) varcte -> . cteint
    (103) varcte -> . ctefloat
    (104) varcte -> . ctechar
    (105) varcte -> . ctestring
    (106) varcte -> . ctebool
    (30) varid -> . ID arr
    (69) llamafunc -> . idfunc LPAREN funcargs RPAREN
    (107) cteint -> . CTEINT
    (108) ctefloat -> . CTEFLOAT
    (109) ctechar -> . CTECHAR
    (110) ctestring -> . CTESTRING
    (111) ctebool -> . TRUE
    (112) ctebool -> . FALSE
    (70) idfunc -> . ID

    LPAREN          shift and go to state 43
    ID              shift and go to state 54
    CTEINT          shift and go to state 59
    CTEFLOAT        shift and go to state 39
    CTECHAR         shift and go to state 44
    CTESTRING       shift and go to state 47
    TRUE            shift and go to state 52
    FALSE           shift and go to state 45

    ctefloat                       shift and go to state 40
    exp                            shift and go to state 41
    idfunc                         shift and go to state 42
    varcte                         shift and go to state 46
    termino                        shift and go to state 48
    ctebool                        shift and go to state 49
    factor                         shift and go to state 50
    llamafunc                      shift and go to state 51
    varid                          shift and go to state 53
    expcomp                        shift and go to state 55
    leftparen                      shift and go to state 56
    expresion                      shift and go to state 202
    ctestring                      shift and go to state 58
    cteint                         shift and go to state 60
    ctechar                        shift and go to state 61

state 200

    (10) masbloque -> ELSE goto . estatutobloque
    (6) estatutobloque -> . estatuto
    (7) estatutobloque -> . bloque
    (59) estatuto -> . asignacion
    (60) estatuto -> . condicion
    (61) estatuto -> . ciclo
    (62) estatuto -> . escritura
    (63) estatuto -> . lectura
    (64) estatuto -> . vars
    (65) estatuto -> . llamafunc SEMICOLON
    (66) estatuto -> . COMMENT
    (67) estatuto -> . CPPCOMMENT
    (9) bloque -> . LBRACKET masestatuto RBRACKET
    (22) asignacion -> . ID EQUALS expresion SEMICOLON
    (23) asignacion -> . ID LSQBRACKET RSQBRACKET EQUALS LSQBRACKET expresion comaexpresion RSQBRACKET SEMICOLON
    (5) condicion -> . IF LPAREN expresion RPAREN gotoF estatutobloque masbloque
    (13) ciclo -> . while LPAREN expresion RPAREN gotoF estatutobloque goto
    (15) escritura -> . print LPAREN listaprint RPAREN SEMICOLON
    (68) lectura -> . READ LPAREN ID RPAREN SEMICOLON
    (78) vars -> . VAR tipo listaid SEMICOLON vars
    (79) vars -> . empty
    (69) llamafunc -> . idfunc LPAREN funcargs RPAREN
    (14) while -> . WHILE
    (16) print -> . PRINT
    (113) empty -> .
    (70) idfunc -> . ID

  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for CPPCOMMENT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
    COMMENT         shift and go to state 78
    CPPCOMMENT      shift and go to state 80
    LBRACKET        shift and go to state 37
    ID              shift and go to state 85
    IF              shift and go to state 70
    READ            shift and go to state 69
    VAR             shift and go to state 8
    WHILE           shift and go to state 74
    PRINT           shift and go to state 68
    ELSE            reduce using rule 113 (empty -> .)
    RBRACKET        reduce using rule 113 (empty -> .)
    RETURN          reduce using rule 113 (empty -> .)

  ! COMMENT         [ reduce using rule 113 (empty -> .) ]
  ! CPPCOMMENT      [ reduce using rule 113 (empty -> .) ]
  ! ID              [ reduce using rule 113 (empty -> .) ]
  ! IF              [ reduce using rule 113 (empty -> .) ]
  ! READ            [ reduce using rule 113 (empty -> .) ]
  ! VAR             [ reduce using rule 113 (empty -> .) ]
  ! WHILE           [ reduce using rule 113 (empty -> .) ]
  ! PRINT           [ reduce using rule 113 (empty -> .) ]

    estatuto                       shift and go to state 187
    idfunc                         shift and go to state 42
    asignacion                     shift and go to state 71
    condicion                      shift and go to state 72
    escritura                      shift and go to state 73
    empty                          shift and go to state 7
    estatutobloque                 shift and go to state 203
    llamafunc                      shift and go to state 75
    vars                           shift and go to state 76
    bloque                         shift and go to state 189
    print                          shift and go to state 81
    ciclo                          shift and go to state 79
    while                          shift and go to state 83
    lectura                        shift and go to state 84

state 201

    (23) asignacion -> ID LSQBRACKET RSQBRACKET EQUALS LSQBRACKET expresion comaexpresion RSQBRACKET . SEMICOLON

    SEMICOLON       shift and go to state 204


state 202

    (38) comaexpresion -> COMMA expresion . comaexpresion
    (38) comaexpresion -> . COMMA expresion comaexpresion
    (39) comaexpresion -> . empty
    (113) empty -> .

    COMMA           shift and go to state 199
    RSQBRACKET      reduce using rule 113 (empty -> .)

    comaexpresion                  shift and go to state 205
    empty                          shift and go to state 197

state 203

    (10) masbloque -> ELSE goto estatutobloque .

    ELSE            reduce using rule 10 (masbloque -> ELSE goto estatutobloque .)
    COMMENT         reduce using rule 10 (masbloque -> ELSE goto estatutobloque .)
    CPPCOMMENT      reduce using rule 10 (masbloque -> ELSE goto estatutobloque .)
    ID              reduce using rule 10 (masbloque -> ELSE goto estatutobloque .)
    IF              reduce using rule 10 (masbloque -> ELSE goto estatutobloque .)
    READ            reduce using rule 10 (masbloque -> ELSE goto estatutobloque .)
    VAR             reduce using rule 10 (masbloque -> ELSE goto estatutobloque .)
    WHILE           reduce using rule 10 (masbloque -> ELSE goto estatutobloque .)
    PRINT           reduce using rule 10 (masbloque -> ELSE goto estatutobloque .)
    RBRACKET        reduce using rule 10 (masbloque -> ELSE goto estatutobloque .)
    RETURN          reduce using rule 10 (masbloque -> ELSE goto estatutobloque .)


state 204

    (23) asignacion -> ID LSQBRACKET RSQBRACKET EQUALS LSQBRACKET expresion comaexpresion RSQBRACKET SEMICOLON .

    COMMENT         reduce using rule 23 (asignacion -> ID LSQBRACKET RSQBRACKET EQUALS LSQBRACKET expresion comaexpresion RSQBRACKET SEMICOLON .)
    CPPCOMMENT      reduce using rule 23 (asignacion -> ID LSQBRACKET RSQBRACKET EQUALS LSQBRACKET expresion comaexpresion RSQBRACKET SEMICOLON .)
    ID              reduce using rule 23 (asignacion -> ID LSQBRACKET RSQBRACKET EQUALS LSQBRACKET expresion comaexpresion RSQBRACKET SEMICOLON .)
    IF              reduce using rule 23 (asignacion -> ID LSQBRACKET RSQBRACKET EQUALS LSQBRACKET expresion comaexpresion RSQBRACKET SEMICOLON .)
    READ            reduce using rule 23 (asignacion -> ID LSQBRACKET RSQBRACKET EQUALS LSQBRACKET expresion comaexpresion RSQBRACKET SEMICOLON .)
    VAR             reduce using rule 23 (asignacion -> ID LSQBRACKET RSQBRACKET EQUALS LSQBRACKET expresion comaexpresion RSQBRACKET SEMICOLON .)
    WHILE           reduce using rule 23 (asignacion -> ID LSQBRACKET RSQBRACKET EQUALS LSQBRACKET expresion comaexpresion RSQBRACKET SEMICOLON .)
    PRINT           reduce using rule 23 (asignacion -> ID LSQBRACKET RSQBRACKET EQUALS LSQBRACKET expresion comaexpresion RSQBRACKET SEMICOLON .)
    RETURN          reduce using rule 23 (asignacion -> ID LSQBRACKET RSQBRACKET EQUALS LSQBRACKET expresion comaexpresion RSQBRACKET SEMICOLON .)
    ELSE            reduce using rule 23 (asignacion -> ID LSQBRACKET RSQBRACKET EQUALS LSQBRACKET expresion comaexpresion RSQBRACKET SEMICOLON .)
    RBRACKET        reduce using rule 23 (asignacion -> ID LSQBRACKET RSQBRACKET EQUALS LSQBRACKET expresion comaexpresion RSQBRACKET SEMICOLON .)


state 205

    (38) comaexpresion -> COMMA expresion comaexpresion .

    RSQBRACKET      reduce using rule 38 (comaexpresion -> COMMA expresion comaexpresion .)

